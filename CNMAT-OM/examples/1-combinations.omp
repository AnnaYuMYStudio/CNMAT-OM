; OM File Header - Saved 2016/05/11 10:54:57
; (6.1001 :patc (om-make-point 604 60) (om-make-point 246 112) (om-make-point 816 720) "" 183 0 nil "2016/05/11 10:54:57")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "1-combinations" (quote ((let ((box (om-load-editor-box1 "PRF" (quote cnmat::prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 553 431) (om-make-point 204 227) (if (find-class (quote cnmat::prf) nil) (make-instance (quote cnmat::prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 4 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 2 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 4 2) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat::prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 114 411) (om-make-point 203 266) (if (find-class (quote cnmat::prf) nil) (make-instance (quote cnmat::prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 12) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 10) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 8) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 3 8) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 5 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 2 3 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 2 4 5) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 52 40) (om-make-point 270 30) (list 1 2 3 4 5 6 8 10 12 15 20 24 30 40 60 120) "(1 2 3 4 5 6 8 10 12 15 20 24 30 40 60 120)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-COMBI 2" (quote cnmat:get-combi) (quote ((om-load-inputfun (quote input-funbox) "list of allowed durations" "DUR-SPACE" (list 1 2 3 4 5 6 8 10 12 15 20 24 30 40 60 120)) (om-load-inputfun (quote input-funbox) "sum of durations" "SUM" 120) (om-load-inputfun (quote input-funbox) "number of elements" "NUM" nil) (om-load-inputfunmenu1 (quote input-funmenu) "allow repeated elements?" "MODE" 0 (list (list "ordered without repetitions" 0) (list "unordered without repetitions" 1) (list "unordered with repetitions" 2))))) (om-make-point 117 149) (om-make-point 215 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 561 271) (om-make-point 180 132) (load-buffer-textfile (quote ("(1 3 4)" "(1 4 3)" "(2 2 4)" "(2 3 3)" "(2 4 2)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-COMBI 2" (quote cnmat:get-combi) (quote ((om-load-inputfun (quote input-funbox) "list of allowed durations" "DUR-SPACE" (list 1 2 3 4 5 6 8 10 12 15 20 24 30 40 60 120)) (om-load-inputfun (quote input-funbox) "sum of durations" "SUM" 120) (om-load-inputfun (quote input-funbox) "number of elements" "NUM" nil) (om-load-inputfunmenu1 (quote input-funmenu) "allow repeated elements?" "MODE" 2 (list (list "ordered without repetitions" 0) (list "unordered without repetitions" 1) (list "unordered with repetitions" 2))))) (om-make-point 559 155) (om-make-point 183 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 621 109) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 530 109) (om-make-point 70 30) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 658 109) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 432 45) (quote "Finds combinations of <n> elements which sum up to <sum>$(ordered/unordered and with or without repetitions)") "" (om-make-point 343 29) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 232 99) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 37 71) (om-make-point 138 30) (list 1 2 3 4 5 6 8 10 12) "(1 2 3 4 5 6 8 10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 188 99) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 126 252) (om-make-point 180 132) (load-buffer-textfile (quote ("(12)" "(2 10)" "(4 8)" "(1 3 8)" "(1 5 6)" "(2 4 6)" "(3 4 5)" "(1 2 3 6)" "(1 2 4 5)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 1 0 1 nil 0) (13 1 1 1 nil 0) (11 0 3 0 nil 0) (12 0 3 1 nil 0) (10 0 3 2 nil 0) (5 0 4 1 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (8 0 5 2 nil 0) (3 0 13 1 nil 0))) nil 6.1001))