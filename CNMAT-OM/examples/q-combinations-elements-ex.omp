; OM File Header - Saved 2016/08/04 11:25:56
; (6.1001 :patc (om-make-point 604 60) (om-make-point 173 27) (om-make-point 1267 674) "" 183 0 nil "2016/08/04 11:24:36")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "q-combinations-elements-ex" (quote ((let ((box (om-load-boxcall (quote genfun) "Q-COMBI-FROM-ELEMENTS" (quote cnmat:q-combi-from-elements) (quote ((om-load-inputfun (quote input-funbox) "a list of elements" "ELEMENTS-LIST" (list 1 2 3 4 5 6 8 10 12)) (om-load-inputfun (quote input-funbox) "ordered variable number" "ORDERED" 1) (om-load-inputfun (quote input-funbox) "mode: 0or 1" "MODE" 0))) (om-make-point 789 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-COMBI-FROM-ELEMENTS" (quote cnmat:q-combi-from-elements) (quote ((om-load-inputfun (quote input-funbox) "a list of elements" "ELEMENTS-LIST" (list 1 2 3 4 5 6 8 10 12)) (om-load-inputfun (quote input-funbox) "ordered variable number" "ORDERED" 1))) (om-make-point 97 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 778 384) (om-make-point 161 157) (load-buffer-textfile (quote ("((1))" "((2))" "((3))" "((1 2) (2 1))" "((4))" "((1 3) (3 1))" "((5))" "((1 4) (4 1))" "((2 3) (3 2))" "((6))" "((1 5) (5 1))" "((2 4) (4 2))" "((8))" "((2 6) (6 2))" "((3 5) (5 3))" "((1 2 5) (2 5 1) (5 1 2))" "((1 5 2) (5 2 1) (2 1 5))" "((10))" "((2 8) (8 2))" "((4 6) (6 4))" "((1 3 6) (3 6 1) (6 1 3))" "((1 6 3) (6 3 1) (3 1 6))" "((12))" "((2 10) (10 2))" "((4 8) (8 4))" "((1 3 8) (3 8 1) (8 1 3))" "((1 8 3) (8 3 1) (3 1 8))" "((3 4 5) (4 5 3) (5 3 4))" "((3 5 4) (5 4 3) (4 3 5))" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 259 35) (quote "Q-COMBI-FROM-ELEMENTS") "" (om-make-point 66 25) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 25) (quote "mode") "" (om-make-point 952 155) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 955 188) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 73 393) (om-make-point 215 139) (load-buffer-textfile (quote ("((1) 0)" "((2) 0)" "((3) 0)" "((1 2) (2 1) 0)" "((4) 0)" "((1 3) (3 1) 0)" "((5) 0)" "((1 4) (4 1) 0)" "((2 3) (3 2) 0)" "((6) 0)" "((1 5) (5 1) 0)" "((2 4) (4 2) 0)" "((1 2 3) (2 3 1) (3 1 2) 2)" "((8) 0)" "((2 6) (6 2) 0)" "((3 5) (5 3) 0)" "((1 2 5) (2 5 1) (5 1 2) 0)" "((1 3 4) (3 4 1) (4 1 3) 2)" "((10) 0)" "((2 8) (8 2) 0)" "((4 6) (6 4) 0)" "((1 3 6) (3 6 1) (6 1 3) 0)" "((1 4 5) (4 5 1) (5 1 4) 2)" "((2 3 5) (3 5 2) (5 2 3) 2)" "((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) 6)" "((12) 0)" "((2 10) (10 2) 0)" "((4 8) (8 4) 0)" "((1 3 8) (3 8 1) (8 1 3) 0)" "((1 5 6) (5 6 1) (6 1 5) 2)" "((2 4 6) (4 6 2) (6 2 4) 2)" "((3 4 5) (4 5 3) (5 3 4) 0)" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) 6)" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) 2)" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 322 65) (quote "QUICK PLAYER GOES DOWN HERE") "" (om-make-point 71 568) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 322 65) (quote "QUICK PLAYER GOES DOWN HERE") "" (om-make-point 699 572) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 832 190) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 654 189) (om-make-point 138 30) (list 1 2 3 4 5 6 8 10 12) "(1 2 3 4 5 6 8 10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 25) (quote "elements") "" (om-make-point 653 154) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 25) (quote "ordered") "" (om-make-point 829 153) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 442 98) (quote "Q-combi-from-elements MODE 1. $Finds combinations of <n> elements which sum up to any one of the elements provided and provides all rotations of these combinations that meet the q-canon test. (Ordered/unordered and with or without repetitions.)") "" (om-make-point 650 55) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 299 104) (quote "<--The output is all combinations with their rotations that pass the q-canon test.$$OUTPUT FORMAT:$((list)(additional lists...))$$$$$$") "" (om-make-point 951 424) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 310 149) (quote "<--The output calculates all combinations, including their rotations, and lists the number of overlaps.$$OUTPUT FORMAT:$((list) no. of overlaps)$$For each output you see the list and the number of overlaps of attacks.$$$$") "" (om-make-point 295 390) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 25) (quote "ordered") "" (om-make-point 242 165) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 25) (quote "elements") "" (om-make-point 67 172) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 250 205) (quote "KEY$$elements:$the allowable rhythm list$$ordered:$0= ordered without repetitions$1 = unordered without repetitions$2 = unordered with repetitions$$mode:$0 = default$1 = output meets canon-test") "" (om-make-point 367 164) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 261 197) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 371 99) (quote "Q-combi-from-elements MODE 0 (default). $Finds combinations of <n> elements which sum up to any one of the elements provided and provides all rotations of these combinations. (Ordered/unordered and with or without repetitions.)") "" (om-make-point 63 66) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 70 204) (om-make-point 138 30) (list 1 2 3 4 5 6 8 10 12) "(1 2 3 4 5 6 8 10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (9 0 0 1 nil 0) (5 0 0 2 nil 0) (21 0 1 0 nil 0) (19 0 1 1 nil 0) (0 0 2 1 nil 0) (1 0 6 1 nil 0))) nil 6.1001))
