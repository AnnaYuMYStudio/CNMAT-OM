; OM File Header - Saved 2016/08/10 15:38:29
; (6.1001 :patc (om-make-point 24 24) (om-make-point 0 23) (om-make-point 1440 851) "" 183 0 nil "2016/08/10 15:38:20")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "q-combination utilities" (quote ((let ((box (om-load-boxcomment "comment 13" (om-make-point 103 27) (quote "rhythms list") "" (om-make-point 138 539) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 200 35) (quote "RETROGRADE-CANON-TEST") "" (om-make-point 126 419) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 135 573) (om-make-point 80 30) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 13" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 133 711) (om-make-point 96 72) (load-buffer-textfile (quote ("(1 2 3 4 5)" "(5 4 3 2 1)" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 211 72) (quote "Tests canon-query on a list combined with its retrograde. If true, returns combined list. If false, returns nil.") "" (om-make-point 126 454) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RETRO-CANON?" (quote cnmat::r-retro-canon?) (quote ((om-load-inputfun (quote input-funbox) "Tests canon-query on list combined with its retrograde" "MY-LIST" (list 1 2 3 4 5)))) (om-make-point 129 617) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 12" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 133 245) (om-make-point 99 83) (load-buffer-textfile (quote ("(1 2 3)" "(2 3 1)" "(3 1 2)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 147 129) (om-make-point 59 30) (list 1 2 3) "(1 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 295 48) (quote "Computes and returns the list of all rotations (circular permutations of a given list.") "" (om-make-point 125 72) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 119 31) (quote "Q-ROTATIONS") "" (om-make-point 126 38) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 141 161) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 356 35) (quote "calculate total number of permutations possible") "" (om-make-point 777 592) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 889 634) (om-make-point 70 30) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 11" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 892 744) (om-make-point 70 50) (load-buffer-textfile (quote ("24" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "calculate total number of permutations possible" (om-load-patch-abs1 "calculate total number of permutations possible" (quote ((let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 178 314) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 93 323) (om-make-point 40 35) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 140 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 178 206) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 53 200) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 109 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 15 417) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "total-no-permutations-possible" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list" 0 (om-make-point 5 45) "" "list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 114 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 135 54) (om-make-point 80 30) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 125 84) (om-make-point 21 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 2 0 nil 0) (0 0 2 1 nil 0) (4 0 5 0 nil 0) (8 0 5 1 nil 0) (3 0 5 2 nil 0) (2 0 6 0 nil 0) (10 0 8 0 nil 0) (7 0 10 0 nil 0) (9 0 10 1 nil 0))) 6.1001 nil "" (om-make-point 433 197) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "" "list" nil))) (om-make-point 786 666) nil (list 24) nil "calculate total number of permutations possible"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 305 83) (quote "**N.B. if you ask for more permutations than possible, this algorithm will run forever.  Check below for total possible number of permutations.") "" (om-make-point 783 496) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-RANDOM-PERMUTATIONS-NO-DUPS" (quote cnmat:q-random-permutations-no-dups) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "number of permutations to generate" "NO-TIMES" 5))) (om-make-point 462 620) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 181 28) (quote "no. permutations needed") "" (om-make-point 574 540) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 79 27) (quote "original list") "" (om-make-point 449 534) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 312 44) (quote "Generate Random-Permutations From a List$With No Duplicate Lists Ouputted") "" (om-make-point 450 495) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 10" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 488 702) (om-make-point 170 102) (load-buffer-textfile (quote ("(1 2 3 4)" "(1 3 2 4)" "(2 1 4 3)" "(2 4 3 1)" "(3 2 4 1)" "(1 4 3 2)" "(2 3 1 4)" "(3 1 4 2)" "(4 3 2 1)" "(3 4 1 2)" "(3 2 1 4)" "(4 3 1 2)" "(2 1 3 4)" "(4 2 1 3)" "(2 3 4 1)" "(1 2 4 3)" "(4 2 3 1)" "(3 1 2 4)" "(4 1 3 2)" "(1 3 4 2)" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 575 571) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 451 566) (om-make-point 70 30) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1467 660) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "yes" "no")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 1151 588) (om-make-point 339 60) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 319 26) "untitled" :range (quote (((4 1 2 3 5) (1 5 3 4 2) (elems 5 sum 15 olaps 0)) ((2 1 3 4 5) (4 5 3 2 1) (elems 5 sum 15 olaps 0)) ((1 5 4 3 2) (4 5 3 2 1) (elems 5 sum 15 olaps 0)) ((4 2 3 1 5) (elems 5 sum 15 olaps 0)) ((1 5 3 4 2) (3 2 5 1 4) (elems 5 sum 15 olaps 0)) ((3 2 5 1 4) (4 5 3 2 1) (elems 5 sum 15 olaps 0)) ((4 5 3 2 1) (2 1 3 4 5) (elems 5 sum 15 olaps 0)) ((4 2 5 1 3) (5 3 1 4 2) (elems 5 sum 15 olaps 0)) ((5 3 1 4 2) (2 1 3 4 5) (elems 5 sum 15 olaps 0)) ((4 3 1 5 2) (2 1 3 4 5) (elems 5 sum 15 olaps 0))))))) (om-set-selected-item-index rep (quote 2)) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 7" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1735 711) (om-make-point 112 160) (load-buffer-textfile (quote ("((1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 8))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 4))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 1 3) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 7))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 2 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((1 3 2) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 8))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 5))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 1 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 1 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 2 3) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 7))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 3 2) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((3 1 2) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((3 2 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 185 46) (quote "Output utility--mode=0 = exclude rotations") "" (om-make-point 1699 487) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-UTILITY" (quote cnmat:q-permutations+canon-utility) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))) (om-load-inputfun (quote input-funbox) "a mode argument" "MODE" 0))) (om-make-point 1695 602) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1812 571) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-ALL" (quote cnmat:q-permutations+canon-all) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))))) (om-make-point 1951 305) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 2973 217) (om-make-point 138 30) (list 1 2 3 4 5 6 8 10 12) "(1 2 3 4 5 6 8 10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 3141 216) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 68 25) (quote "elements") "" (om-make-point 2969 185) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 11" (om-make-point 68 25) (quote "ordered") "" (om-make-point 3135 184) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 259 35) (quote "Q-COMBI-FILTER") "" (om-make-point 2963 11) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 3232 214) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 68 25) (quote "mode") "" (om-make-point 3228 186) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 9" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 3004 334) (om-make-point 355 92) (load-buffer-textfile (quote ("((1) (elems 1 sum 1 olaps 0))" "((2) (elems 1 sum 2 olaps 0))" "((3) (elems 1 sum 3 olaps 0))" "((4) (elems 1 sum 4 olaps 0))" "((5) (elems 1 sum 5 olaps 0))" "((6) (elems 1 sum 6 olaps 0))" "((8) (elems 1 sum 8 olaps 0))" "((10) (elems 1 sum 10 olaps 0))" "((12) (elems 1 sum 12 olaps 0))" "((1 2) (2 1) (elems 2 sum 3 olaps 0))" "((1 3) (3 1) (elems 2 sum 4 olaps 0))" "((1 4) (4 1) (elems 2 sum 5 olaps 0))" "((2 3) (3 2) (elems 2 sum 5 olaps 0))" "((1 5) (5 1) (elems 2 sum 6 olaps 0))" "((2 4) (4 2) (elems 2 sum 6 olaps 0))" "((2 6) (6 2) (elems 2 sum 8 olaps 0))" "((3 5) (5 3) (elems 2 sum 8 olaps 0))" "((2 8) (8 2) (elems 2 sum 10 olaps 0))" "((4 6) (6 4) (elems 2 sum 10 olaps 0))" "((2 10) (10 2) (elems 2 sum 12 olaps 0))" "((4 8) (8 4) (elems 2 sum 12 olaps 0))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 5) (2 5 1) (5 1 2) (elems 3 sum 8 olaps 0))" "((1 3 4) (3 4 1) (4 1 3) (elems 3 sum 8 olaps 2))" "((1 3 6) (3 6 1) (6 1 3) (elems 3 sum 10 olaps 0))" "((1 4 5) (4 5 1) (5 1 4) (elems 3 sum 10 olaps 2))" "((2 3 5) (3 5 2) (5 2 3) (elems 3 sum 10 olaps 2))" "((1 3 8) (3 8 1) (8 1 3) (elems 3 sum 12 olaps 0))" "((1 5 6) (5 6 1) (6 1 5) (elems 3 sum 12 olaps 2))" "((2 4 6) (4 6 2) (6 2 4) (elems 3 sum 12 olaps 2))" "((3 4 5) (4 5 3) (5 3 4) (elems 3 sum 12 olaps 0))" "((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-COMBI-FROM-ELEMENTS" (quote cnmat:q-combi-from-elements) (quote ((om-load-inputfun (quote input-funbox) "a list of elements" "ELEMENTS-LIST" (list 1 2 3 4 5 6 8 10 12)) (om-load-inputfun (quote input-funbox) "ordered variable number" "ORDERED" 1) (om-load-inputfun (quote input-funbox) "mode: 0 or 1" "MODE" 0))) (om-make-point 3083 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-COMBI-FILTER" (quote cnmat:q-combi-filter) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MAIN-LIST" (list (list 1 2 3) (list 3 4 5))) (om-load-inputfun (quote input-funbox) "a list of elements" "ELEMS" nil) (om-load-inputfun (quote input-funbox) "a list of possible sums" "SUMS" nil) (om-load-inputfun (quote input-funbox) "a list of overlaps" "OLAPS" nil))) (om-make-point 3127 514) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 45 28) (quote "olaps") "" (om-make-point 3301 444) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 45 28) (quote "sums") "" (om-make-point 3223 446) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 45 28) (quote "elems") "" (om-make-point 3159 446) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 372 54) (quote "Combi-filter:$arguments for elems, sums and olaps must be lists.") "" (om-make-point 2966 134) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 3306 469) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 3226 468) (om-make-point 62 30) (list 10 12) "(10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 3163 472) (om-make-point 37 30) (list 4) "(4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 8" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 3013 599) (om-make-point 384 155) (load-buffer-textfile (quote ("((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 451 92) (quote "q-combi-filter:$Filter results from q-combi-from-elements.$Specify lists for allowable number of elements (elems), list sums (sums), and overlaps (olaps), i.e. shared attacks not counting the first one.$$$") "" (om-make-point 2965 42) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 2635 320) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-UTILITY" (quote cnmat:q-permutations+canon-utility) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))) (om-load-inputfun (quote input-funbox) "a mode argument" "MODE" 0))) (om-make-point 2533 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 2095 505) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-UTILITY" (quote cnmat:q-permutations+canon-utility) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))) (om-load-inputfun (quote input-funbox) "a mode argument" "MODE" 0))) (om-make-point 1993 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON" (quote cnmat:q-permutations+canon) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list 1 2 3 4 5)))) (om-make-point 1200 373) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-N-PERMUTATIONS-NO-ROTATIONS" (quote cnmat:q-n-permutations-no-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list for permuting" "MYLIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "the number of permutations desired" "NUM-RESULTS" 4))) (om-make-point 452 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 227 83) (quote "<-- output utility, mode=2$function output sorted by fewest onset overlaps + excluding rotations") "" (om-make-point 2730 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 6" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2507 450) (om-make-point 277 455) (load-buffer-textfile (quote ("((1 2 3) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 1 3) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (3 2 1) (elems 3 sum 6 olaps 0))" "((2 1 3) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (3 1 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 2 3) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((3 1 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((3 2 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 3 2) (elems 3 sum 6 olaps 2))" "((3 1 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 5))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 5))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 5))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 5))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 7))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 7))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 224 59) (quote "<--output utility, mode=1$function output sorted by fewest onset overlaps") "" (om-make-point 2220 522) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 179 29) (quote "<--function output") "" (om-make-point 2286 424) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1957 640) (om-make-point 298 269) (load-buffer-textfile (quote ("((1 2 3) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 1 3) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (3 2 1) (elems 3 sum 6 olaps 0))" "((2 1 3) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (3 1 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 2 3) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((3 1 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((3 2 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 3 2) (elems 3 sum 6 olaps 2))" "((3 1 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 2 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 3))" "((1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((1 2 3) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 4))" "((2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 1 3) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 3 1) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 4))" "((3 1 2) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 4))" "((3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 5))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 5))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 5))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 5))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 7))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 7))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 8))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 8))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 8))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 9))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1912 397) (om-make-point 352 86) (load-buffer-textfile (quote ("((1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 8))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 4))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 1 3) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 7))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 2 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((1 3 2) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 8))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 5))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 1 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 1 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 2 3) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 7))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 3 2) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((3 1 2) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((3 2 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1967 190) (om-make-point 153 107) (load-buffer-textfile (quote ("(1 2 3)" "(1 3 2)" "(2 1 3)" "(2 3 1)" "(3 1 2)" "(3 2 1)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 436 135) (quote "Provided with a group of lists, iteratively builds output lists returning lists built up by element for each rotation.$$All lists are return.  The last element in the list indicates the number of points of onsets overlap in the list, not counting the initial attacks.$$Do this process on each rotation of the original lists provided.$$") "" (om-make-point 1892 46) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 310 29) (quote "Permutations+Canon-Growth-Return-All") "" (om-make-point 1894 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 241 49) (quote "(lists of lists from the original input$that do not have onset overlaps)") "" (om-make-point 1449 513) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 440 167) (quote "Provided with a group of lists, iteratively builds output lists with no rhythmic overlaps, except for the onset.$$Builds according to this process: take the first list and check it against the second list.  If there are no attack overlaps add both lists to the output list.  Then check the third list agains this output list. If there are no outputs, combine the third list to the output list and continue. Etc...$$Does this process on each rotation of the original lists provided.$$") "" (om-make-point 1203 53) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 59) (quote "<--checking elements for onset overlaps in a given list") "" (om-make-point 1413 729) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 1212 676) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 5 4 3 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 5 3 2 1) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 179 29) (quote "<--function output") "" (om-make-point 1452 483) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 159 28) (quote "starting lists") "" (om-make-point 1205 229) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1150 466) (om-make-point 292 109) (load-buffer-textfile (quote ("((4 1 2 3 5) (1 5 3 4 2) (elems 5 sum 15 olaps 0))" "((2 1 3 4 5) (4 5 3 2 1) (elems 5 sum 15 olaps 0))" "((1 5 4 3 2) (4 5 3 2 1) (elems 5 sum 15 olaps 0))" "((4 2 3 1 5) (elems 5 sum 15 olaps 0))" "((1 5 3 4 2) (3 2 5 1 4) (elems 5 sum 15 olaps 0))" "((3 2 5 1 4) (4 5 3 2 1) (elems 5 sum 15 olaps 0))" "((4 5 3 2 1) (2 1 3 4 5) (elems 5 sum 15 olaps 0))" "((4 2 5 1 3) (5 3 1 4 2) (elems 5 sum 15 olaps 0))" "((5 3 1 4 2) (2 1 3 4 5) (elems 5 sum 15 olaps 0))" "((4 3 1 5 2) (2 1 3 4 5) (elems 5 sum 15 olaps 0))" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1208 260) (om-make-point 153 107) (load-buffer-textfile (quote ("(4 1 2 3 5)" "(2 1 3 4 5)" "(1 5 4 3 2)" "(4 2 3 1 5)" "(1 5 3 4 2)" "(3 2 5 1 4)" "(4 5 3 2 1)" "(4 2 5 1 3)" "(5 3 1 4 2)" "(4 3 1 5 2)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 310 29) (quote "Permutations+Canon-Growth") "" (om-make-point 1205 22) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 254 127) (quote "N.B. if the no. of results desired is > the no. of possible results the computer then the computer will keep searching for results and return none.") "" (om-make-point 676 314) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 461 305) (om-make-point 194 158) (load-buffer-textfile (quote ("(4 1 2 3 5)" "(2 1 3 4 5)" "(1 5 4 3 2)" "(4 2 3 1 5)" "(1 5 3 4 2)" "(3 2 5 1 4)" "(4 5 3 2 1)" "(4 2 5 1 3)" "(5 3 1 4 2)" "(4 3 1 5 2)" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 473 177) (om-make-point 80 30) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 631 177) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 150 29) (quote "no. of results desired") "" (om-make-point 627 142) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 126 27) (quote "original list") "" (om-make-point 470 141) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 302 69) (quote "Returns a specified number of permutations from a given list such that none of the returned lists are rotations of one another.") "" (om-make-point 455 68) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 232 31) (quote "Q-N-Permutations-No-Rotations") "" (om-make-point 454 33) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 1 nil 0) (2 0 5 0 nil 0) (10 0 6 1 nil 0) (7 0 10 0 nil 0) (14 0 13 1 nil 0) (12 0 14 0 nil 0) (22 0 16 0 nil 0) (21 0 16 1 nil 0) (16 0 20 1 nil 0) (24 1 23 0 nil 0) (70 1 24 0 nil 0) (27 0 25 1 nil 0) (60 1 27 0 nil 0) (28 0 27 1 nil 0) (61 1 29 0 nil 0) (38 0 37 1 nil 0) (30 0 38 0 nil 0) (31 0 38 1 nil 0) (35 0 38 2 nil 0) (37 1 39 0 nil 0) (46 0 39 1 nil 0) (45 0 39 2 nil 0) (44 0 39 3 nil 0) (39 0 47 1 nil 0) (29 0 50 0 nil 0) (49 0 50 1 nil 0) (60 1 52 0 nil 0) (51 0 52 1 nil 0) (71 1 53 0 nil 0) (75 0 54 0 nil 0) (76 0 54 1 nil 0) (50 0 56 1 nil 0) (52 0 59 1 nil 0) (29 0 60 1 nil 0) (23 0 67 1 nil 0) (53 0 70 1 nil 0) (54 0 74 1 nil 0))) nil 6.1001))
