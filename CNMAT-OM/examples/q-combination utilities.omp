; OM File Header - Saved 2016/08/09 17:08:10
; (6.1001 :patc (om-make-point 24 24) (om-make-point 293 51) (om-make-point 1521 851) "" 183 0 nil "2016/08/09 17:06:59")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "q-combination utilities" (quote ((let ((box (om-load-editor-box1 "TEXTFILE 7" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1137 711) (om-make-point 112 160) (load-buffer-textfile (quote ("((1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 8))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 4))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 1 3) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 7))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 2 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((1 3 2) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 8))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 5))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 1 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 1 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 2 3) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 7))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 3 2) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((3 1 2) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((3 2 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 185 46) (quote "Output utility--mode=0 = exclude rotations") "" (om-make-point 1101 487) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-UTILITY" (quote cnmat:q-permutations+canon-utility) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))) (om-load-inputfun (quote input-funbox) "a mode argument" "MODE" 0))) (om-make-point 1097 602) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1214 571) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-ALL" (quote cnmat:q-permutations+canon-all) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))))) (om-make-point 1417 305) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 2439 219) (om-make-point 138 30) (list 1 2 3 4 5 6 8 10 12) "(1 2 3 4 5 6 8 10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 2607 216) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 68 25) (quote "elements") "" (om-make-point 2435 187) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 11" (om-make-point 68 25) (quote "ordered") "" (om-make-point 2601 184) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 259 35) (quote "Q-COMBI-FILTER") "" (om-make-point 2429 11) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 2695 210) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 68 25) (quote "mode") "" (om-make-point 2691 182) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 9" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2470 334) (om-make-point 355 92) (load-buffer-textfile (quote ("((1) (elems 1 sum 1 olaps 0))" "((2) (elems 1 sum 2 olaps 0))" "((3) (elems 1 sum 3 olaps 0))" "((4) (elems 1 sum 4 olaps 0))" "((5) (elems 1 sum 5 olaps 0))" "((6) (elems 1 sum 6 olaps 0))" "((8) (elems 1 sum 8 olaps 0))" "((10) (elems 1 sum 10 olaps 0))" "((12) (elems 1 sum 12 olaps 0))" "((1 2) (2 1) (elems 2 sum 3 olaps 0))" "((1 3) (3 1) (elems 2 sum 4 olaps 0))" "((1 4) (4 1) (elems 2 sum 5 olaps 0))" "((2 3) (3 2) (elems 2 sum 5 olaps 0))" "((1 5) (5 1) (elems 2 sum 6 olaps 0))" "((2 4) (4 2) (elems 2 sum 6 olaps 0))" "((2 6) (6 2) (elems 2 sum 8 olaps 0))" "((3 5) (5 3) (elems 2 sum 8 olaps 0))" "((2 8) (8 2) (elems 2 sum 10 olaps 0))" "((4 6) (6 4) (elems 2 sum 10 olaps 0))" "((2 10) (10 2) (elems 2 sum 12 olaps 0))" "((4 8) (8 4) (elems 2 sum 12 olaps 0))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 5) (2 5 1) (5 1 2) (elems 3 sum 8 olaps 0))" "((1 3 4) (3 4 1) (4 1 3) (elems 3 sum 8 olaps 2))" "((1 3 6) (3 6 1) (6 1 3) (elems 3 sum 10 olaps 0))" "((1 4 5) (4 5 1) (5 1 4) (elems 3 sum 10 olaps 2))" "((2 3 5) (3 5 2) (5 2 3) (elems 3 sum 10 olaps 2))" "((1 3 8) (3 8 1) (8 1 3) (elems 3 sum 12 olaps 0))" "((1 5 6) (5 6 1) (6 1 5) (elems 3 sum 12 olaps 2))" "((2 4 6) (4 6 2) (6 2 4) (elems 3 sum 12 olaps 2))" "((3 4 5) (4 5 3) (5 3 4) (elems 3 sum 12 olaps 0))" "((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-COMBI-FROM-ELEMENTS" (quote cnmat:q-combi-from-elements) (quote ((om-load-inputfun (quote input-funbox) "a list of elements" "ELEMENTS-LIST" (list 1 2 3 4 5 6 8 10 12)) (om-load-inputfun (quote input-funbox) "ordered variable number" "ORDERED" 1) (om-load-inputfun (quote input-funbox) "mode: 0 or 1" "MODE" 0))) (om-make-point 2549 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-COMBI-FILTER" (quote cnmat:q-combi-filter) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MAIN-LIST" (list (list 1 2 3) (list 3 4 5))) (om-load-inputfun (quote input-funbox) "a list of elements" "ELEMS" nil) (om-load-inputfun (quote input-funbox) "a list of possible sums" "SUMS" nil) (om-load-inputfun (quote input-funbox) "a list of overlaps" "OLAPS" nil))) (om-make-point 2593 514) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 45 28) (quote "olaps") "" (om-make-point 2767 444) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 45 28) (quote "sums") "" (om-make-point 2689 446) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 45 28) (quote "elems") "" (om-make-point 2625 446) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 372 54) (quote "Combi-filter:$arguments for elems, sums and olaps must be lists.") "" (om-make-point 2432 134) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 2772 469) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 2692 468) (om-make-point 62 30) (list 10 12) "(10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 2629 472) (om-make-point 37 30) (list 4) "(4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 8" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2479 599) (om-make-point 384 155) (load-buffer-textfile (quote ("((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 451 92) (quote "q-combi-filter:$Filter results from q-combi-from-elements.$Specify lists for allowable number of elements (elems), list sums (sums), and overlaps (olaps), i.e. shared attacks not counting the first one.$$$") "" (om-make-point 2431 42) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 2101 320) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-UTILITY" (quote cnmat:q-permutations+canon-utility) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))) (om-load-inputfun (quote input-funbox) "a mode argument" "MODE" 0))) (om-make-point 1999 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1561 505) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-UTILITY" (quote cnmat:q-permutations+canon-utility) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))) (om-load-inputfun (quote input-funbox) "a mode argument" "MODE" 0))) (om-make-point 1459 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON" (quote cnmat:q-permutations+canon) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list 1 2 3 4 5)))) (om-make-point 507 369) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-N-PERMUTATIONS-NO-ROTATIONS" (quote cnmat:q-n-permutations-no-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list for permuting" "MYLIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "the number of permutations desired" "NUM-RESULTS" 4))) (om-make-point 76 236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 227 83) (quote "<-- output utility, mode=2$function output sorted by fewest onset overlaps + excluding rotations") "" (om-make-point 2196 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 6" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1973 450) (om-make-point 277 455) (load-buffer-textfile (quote ("((1 2 3) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 1 3) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (3 2 1) (elems 3 sum 6 olaps 0))" "((2 1 3) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (3 1 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 2 3) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((3 1 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((3 2 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 3 2) (elems 3 sum 6 olaps 2))" "((3 1 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 5))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 5))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 5))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 5))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 7))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 7))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 224 59) (quote "<--output utility, mode=1$function output sorted by fewest onset overlaps") "" (om-make-point 1686 522) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 179 29) (quote "<--function output") "" (om-make-point 1752 424) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1423 640) (om-make-point 298 269) (load-buffer-textfile (quote ("((1 2 3) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 1 3) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (3 2 1) (elems 3 sum 6 olaps 0))" "((2 1 3) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (3 1 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 2 3) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((3 1 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((3 2 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 3 2) (elems 3 sum 6 olaps 2))" "((3 1 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 2 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 3))" "((1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((1 2 3) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 4))" "((2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 1 3) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 3 1) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 4))" "((3 1 2) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 4))" "((3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 5))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 5))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 5))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 5))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 7))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 7))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 8))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 8))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 8))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 9))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1378 397) (om-make-point 352 86) (load-buffer-textfile (quote ("((1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 8))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 4))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 1 3) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 7))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 2 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((1 3 2) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 8))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 5))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 1 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 1 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 2 3) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 7))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 3 2) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((3 1 2) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((3 2 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1433 190) (om-make-point 153 107) (load-buffer-textfile (quote ("(1 2 3)" "(1 3 2)" "(2 1 3)" "(2 3 1)" "(3 1 2)" "(3 2 1)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 436 135) (quote "Provided with a group of lists, iteratively builds output lists returning lists built up by element for each rotation.$$All lists are return.  The last element in the list indicates the number of points of onsets overlap in the list, not counting the initial attacks.$$Do this process on each rotation of the original lists provided.$$") "" (om-make-point 1358 46) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 310 29) (quote "Permutations+Canon-Growth-Return-All") "" (om-make-point 1359 18) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 241 49) (quote "(lists of lists from the original input$that do not have onset overlaps)") "" (om-make-point 675 475) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 440 167) (quote "Provided with a group of lists, iteratively builds output lists with no rhythmic overlaps, except for the onset.$$Builds according to this process: take the first list and check it against the second list.  If there are no attack overlaps add both lists to the output list.  Then check the third list agains this output list. If there are no outputs, combine the third list to the output list and continue. Etc...$$Does this process on each rotation of the original lists provided.$$") "" (om-make-point 510 49) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 179 29) (quote "<--list to check") "" (om-make-point 585 576) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 59) (quote "<--checking elements for onset overlaps in a given list") "" (om-make-point 721 681) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 519 672) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 2 3 1 5) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 539 580) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 553 620) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 179 29) (quote "<--function output") "" (om-make-point 673 450) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 159 28) (quote "starting lists") "" (om-make-point 512 225) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 517 461) (om-make-point 139 106) (load-buffer-textfile (quote ("((4 1 2 3 5) (1 5 3 4 2))" "((2 1 3 4 5) (4 5 3 2 1))" "((1 5 4 3 2) (4 5 3 2 1))" "((4 2 3 1 5))" "((1 5 3 4 2) (3 2 5 1 4))" "((3 2 5 1 4) (4 5 3 2 1))" "((4 5 3 2 1) (2 1 3 4 5))" "((4 2 5 1 3) (5 3 1 4 2))" "((5 3 1 4 2) (2 1 3 4 5))" "((4 3 1 5 2) (2 1 3 4 5))" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 515 256) (om-make-point 153 107) (load-buffer-textfile (quote ("(4 1 2 3 5)" "(2 1 3 4 5)" "(1 5 4 3 2)" "(4 2 3 1 5)" "(1 5 3 4 2)" "(3 2 5 1 4)" "(4 5 3 2 1)" "(4 2 5 1 3)" "(5 3 1 4 2)" "(4 3 1 5 2)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 310 29) (quote "Permutations+Canon-Growth") "" (om-make-point 512 18) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 256 89) (quote "N.B. if the no. of results desired is > the no. of possible results the computer then the computer will keep searching for results and return none.") "" (om-make-point 79 498) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 85 322) (om-make-point 194 158) (load-buffer-textfile (quote ("(4 1 2 3 5)" "(2 1 3 4 5)" "(1 5 4 3 2)" "(4 2 3 1 5)" "(1 5 3 4 2)" "(3 2 5 1 4)" "(4 5 3 2 1)" "(4 2 5 1 3)" "(5 3 1 4 2)" "(4 3 1 5 2)" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 97 159) (om-make-point 80 30) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 255 159) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 150 29) (quote "no. of results desired") "" (om-make-point 251 124) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 126 27) (quote "original list") "" (om-make-point 94 123) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 302 69) (quote "Returns a specified number of permutations from a given list such that none of the returned lists are rotations of one another.") "" (om-make-point 79 50) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 232 31) (quote "Q-N-Permutations-No-Rotations") "" (om-make-point 78 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 1 nil 0) (35 1 2 0 ((om-make-point 1516 481) (om-make-point 1346 549) (om-make-point 1154 553) (om-make-point 1154 602)) 0) (3 0 2 1 nil 0) (36 1 4 0 nil 0) (13 0 12 1 nil 0) (5 0 13 0 nil 0) (6 0 13 1 nil 0) (10 0 13 2 nil 0) (12 1 14 0 nil 0) (21 0 14 1 nil 0) (20 0 14 2 nil 0) (19 0 14 3 nil 0) (14 0 22 1 nil 0) (4 0 25 0 nil 0) (24 0 25 1 nil 0) (35 1 27 0 nil 0) (26 0 27 1 nil 0) (49 1 28 0 nil 0) (53 0 29 0 nil 0) (54 0 29 1 nil 0) (25 0 31 1 nil 0) (27 0 34 1 nil 0) (4 0 35 1 nil 0) (45 0 43 1 nil 0) (44 0 45 0 nil 0) (48 1 45 1 nil 0) (28 0 48 1 nil 0) (29 0 52 1 nil 0))) nil 6.1001))
