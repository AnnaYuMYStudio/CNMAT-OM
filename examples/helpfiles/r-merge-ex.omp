; OM File Header - Saved 2016/11/30 18:58:40
; (6.1001 :patc (om-make-point 843 710) (om-make-point 75 23) (om-make-point 1305 851) "" 183 0 "2016/11/11 13:06:32" "2016/11/30 18:58:28")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "r-merge-ex" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 297 88) (quote "Provide a third argument \"1\" when you would like to specify several lists of rhythmic frames to merge.  ") "" (om-make-point 838 329) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 239 36) (quote "R-MERGE with three arguments") "" (om-make-point 837 298) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 239 36) (quote "R-MERGE with two arguments") "" (om-make-point 452 300) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 837 565) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 2 2 1 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 1 3 8) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1022 441) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 896 441) (om-make-point 110 30) (list (list 0) (list 0 3) (list 7 5)) "((0) (0 3) (7 5))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MERGE 2" (quote cnmat::r-merge) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "MYVOICES" nil) (om-load-inputfun (quote input-funbox) "" "POLY" nil))) (om-make-point 867 500) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 444 567) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 1 3 8) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 70 24) (quote "R-MERGE") "" (om-make-point 62 45) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 294 99) (quote "R-merge collapes the attacks of all rhythmic frames within a polyrhythmic frame into one rhythmic frame.  An optional additional list specifies only those rhythmic frames within the polyrhythmic frame to be compressed. The output in both cases is a polyrhythmic frame.") "" (om-make-point 62 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MERGE" (quote cnmat::r-merge) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil))) (om-make-point 144 498) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 78 561) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 1 1 1 1 1 1 1 1 1 1 1 2) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 297 88) (quote "Provide a second argument when you would like to specify which rhythmic frames to merge.  Voices begin with 0, e.g. the first two voices would be specified in the list (0 1).") "" (om-make-point 450 332) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 605 446) (om-make-point 48 30) (list 7 5) "(7 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "old" (om-load-patch-abs1 "old" (quote ((let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 488 80) (om-make-point 80 30) (list -7 3 3 -2) "(-7 3 3 -2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction 2" (om-load-lisp-abspatch "lispfunction" 6.1001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (mylist) $$(let ((minus-list '())$      (positive-list '()))$$(setf positive-list mylist)$$(loop for elem in (reverse mylist)$      until (plusp elem) $      do $      (push elem minus-list)$      (setf positive-list (butlast positive-list)))$$(print (flat (list (butlast positive-list) (+ (reduce #'+ (om* -1 minus-list)) (first (last positive-list))))))$$)$$$)") (quote ((om-load-inputfun (quote input-funbox) "" "MYLIST" nil))) (om-make-point 546 145) nil (list (list -7 3 5)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.1001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (mylist) $(let ((final-list '()))$(loop for elem in mylist do$      (push (abs elem) final-list))$(reverse final-list)$)$)") (quote ((om-load-inputfun (quote input-funbox) "" "MYLIST" nil))) (om-make-point 204 407) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "remove-rest-values" (om-load-lisp-abspatch "remove-rest-values" 6.1001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (durations-list intervals-list) $$$(let ((final-list '())$      (pre-final-list '()))$$;get rid of intervals corresponding with rests$$(loop for duration in durations-list$      for interval in intervals-list do$      (if (> duration 0) (push interval final-list)))$(reverse final-list)        $)$$$)") (quote ((om-load-inputfun (quote input-funbox) "" "DURATIONS-LIST" nil) (om-load-inputfun (quote input-funbox) "" "INTERVALS-LIST" nil))) (om-make-point 377 598) nil (list nil) "l" "remove-rest-values"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 590 522) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 435 464) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 437 511) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 397 427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 185 88) (quote "add the sum of one of the lists to make sure that you cover up to the last element") "" (om-make-point 513 349) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 809 505) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 2" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 772 561) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 1 1 1 1 1 1 1 1 1 1 1 2) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 803 428) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 660 679) (om-make-point 29 30) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SORT" (quote sort) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "PREDICATE" "PREDICATE" nil))) (om-make-point 616 759) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 580 679) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 588 575) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "make rests positive numbers") "" (om-make-point 120 359) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 4" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 279 467) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 493 744) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 256 670) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 189 608) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 216 524) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 153 448) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 129 488) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-DURATION-LIST" (quote cnmat::r-duration-list) (quote ((om-load-inputfun (quote input-funbox) "" "MYVOICES" nil))) (om-make-point 290 386) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 116 73) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 -2 -3 -4) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (6 0 4 0 nil 0) (18 0 4 1 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0) (17 0 7 0 nil 0) (11 0 9 0 nil 0) (9 0 10 1 nil 0) (13 0 11 0 nil 0) (14 0 13 0 nil 0) (12 0 13 1 nil 0) (15 0 14 0 nil 0) (4 0 15 0 nil 0) (2 0 17 0 nil 0) (24 0 17 1 nil 0) (3 0 18 0 nil 0) (24 0 18 1 nil 0) (19 0 18 2 nil 0) (20 0 19 0 nil 0) (21 0 19 1 nil 0) (23 0 21 0 nil 0) (17 0 21 1 nil 0) (22 0 23 0 nil 0) (25 1 24 0 nil 0))) 6.1001 nil "" (om-make-point 59 23) (om-make-point 1381 851)) (quote nil) (om-make-point 1243 761) nil nil nil "old"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MERGE" (quote cnmat::r-merge) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "VOICES-TO-GROUP" nil))) (om-make-point 573 493) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "wrong" (om-load-patch-abs1 "wrong" (quote ((let ((box (om-load-boxcall (quote abstraction) "deal-with-rests" (om-load-lisp-abspatch "deal-with-rests" 6.1001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (mylist) $$(let ((hold-elems '(0))$      (output-list '()))$$; put the absolute value of any elem in to the holdelems$;then add it to the next positive element, if there is one$$(loop for elem in mylist do$      (cond ((> 0 elem) (push (abs elem) hold-elems))$             (t (progn (push (reduce #'+ (flat (list hold-elems elem))) output-list)$                        (setf hold-elems '(0))))))$$(reverse output-list)$            $)$$$$)") (quote ((om-load-inputfun (quote input-funbox) "" "MYLIST" nil))) (om-make-point 88 245) nil (list (list 1 2 5)) nil "deal-with-rests"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 98 184) (om-make-point 75 30) (list 1 2 -3 2) "(1 2 -3 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 126 85) (quote "function to add rests on to the following positive value") "" (om-make-point 33 82) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0))) 6.1001 nil "" (om-make-point 530 23) (om-make-point 249 359)) (quote nil) (om-make-point 1196 761) nil nil nil "wrong"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 63 178) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 -2 -3 -4) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 3 1 nil 0) (17 0 6 0 nil 0) (5 0 6 1 nil 0) (4 0 6 2 nil 0) (15 0 7 1 nil 0) (17 0 10 0 nil 0) (10 0 11 1 nil 0) (17 0 15 0 nil 0) (13 0 15 1 nil 0))) nil 6.1001))
