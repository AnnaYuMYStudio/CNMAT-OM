; OM File Header - Saved 2016/08/09 15:35:59
; (6.1001 :patc (om-make-point 604 60) (om-make-point 100 23) (om-make-point 1340 839) "" 183 0 nil "2016/08/09 15:35:59")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "q-canons-ex" (quote ((let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 230 384) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 81) (quote "q-rotations returns all rotations for a given list") nil (om-make-point 71 418) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 71 305) (om-make-point 102 105) (load-buffer-textfile (quote ("(2 3 4 6)" "(3 4 6 2)" "(4 6 2 3)" "(6 2 3 4)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 79 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-CANON-PERMUTATIONS-NO-OVERLAPS" (quote cnmat:q-canon-permutations-no-overlaps) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MAIN-LIST" (list 1 2 7 12)))) (om-make-point 776 536) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTE+REMOVE-DUP-ROTATIONS" (quote cnmat:q-permute+remove-dup-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MAIN-LIST" (list 1 2 3)))) (om-make-point 369 537) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 603 155) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATION-CANON?" (quote cnmat::q-rotation-canon?) (quote ((om-load-inputfun (quote input-funbox) "a list of durations" "VOICE" (list 1 2 3)) (om-load-inputfun (quote input-funbox) "print flag" "PRINT" nil))) (om-make-point 523 185) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATION-CANON?" (quote cnmat::q-rotation-canon?) (quote ((om-load-inputfun (quote input-funbox) "a list of durations" "VOICE" (list 1 2 3)))) (om-make-point 380 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 228 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-CANON" (quote cnmat:q-canon) (quote ((om-load-inputfun (quote input-funbox) "a list of list of durations" "VOICES" (list (list 1 2 3) (list 2 3 1) (list 3 1 2))))) (om-make-point 234 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 828 629) (om-make-point 210 104) (load-buffer-textfile (quote ("((2 3 4 6) (3 4 6 2) (4 2 6 3))" "((2 3 4 6) (4 2 6 3) (3 4 6 2))" "((2 3 4 6) (4 3 6 2) (6 2 3 4))" "((2 3 4 6) (4 6 2 3) (6 2 3 4) (3 4 6 2))" "((2 3 4 6) (4 6 3 2) (6 2 3 4))" "((2 3 4 6) (6 2 3 4) (3 4 6 2) (4 6 2 3))" "((2 3 4 6) (6 2 4 3) (3 4 6 2))" "((2 3 4 6) (6 4 2 3) (3 4 6 2))" "((2 3 4 6) (6 4 3 2))" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 427 631) (om-make-point 94 104) (load-buffer-textfile (quote ("(4 3 2 6)" "(3 4 2 6)" "(4 2 3 6)" "(2 4 3 6)" "(3 2 4 6)" "(2 3 4 6)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 154 74) (quote "Tests all permutations of a list, checking it for duplicates in the form of rotations ") "" (om-make-point 273 638) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 244 30) (quote "[same for all permutations of the list]") "" (om-make-point 517 377) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 194 42) (quote "[get rotations then test canon]$returns \"t\" if true") "" (om-make-point 227 440) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 85 30) (quote "[shorthand]") "" (om-make-point 406 274) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 216 30) (quote "Utilities to test a combination") "" (om-make-point 27 59) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 338 71) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 2417/4 1311/4) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 2465/4 1063/4) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUTATIONS" (quote permutations) (quote ((om-load-inputfun (quote input-funbox) "a list" "BAG" nil))) (om-make-point 2609/4 791/4) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 1 nil 0) (3 0 2 1 nil 0) (18 0 3 0 nil 0) (18 0 4 0 nil 0) (18 0 5 0 nil 0) (6 0 7 1 nil 0) (18 0 8 0 nil 0) (18 0 9 0 nil 0) (9 0 10 0 nil 0) (4 0 11 1 nil 0) (5 0 12 1 nil 0) (20 0 19 1 nil 0) (7 0 20 0 nil 0) (21 0 20 1 nil 0) (18 0 21 0 nil 0))) nil 6.1001))
