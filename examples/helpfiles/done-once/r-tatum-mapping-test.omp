; OM File Header - Saved 2017/04/08 15:35:00
; (6.110001 :patc (om-make-point 10 110) (om-make-point 333 23) (om-make-point 998 524) "" 183 0 nil "2017/04/08 15:35:00")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "r-tatum-mapping-test" (quote ((let ((box (om-load-boxcall (quote genfun) "R-TATUM-MAPPING" (quote cnmat::r-tatum-mapping) (quote ((om-load-inputfun (quote input-funbox) "" "MYLIST" nil))) (om-make-point 150 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 87 102) (om-make-point 384 63) (load-buffer-textfile (quote ("(1 2 3 4 5 6 8 10 15 20)" "(1 2 3 4 5 6 8 10 15 20)" "(1 2 3 4 5 6 8 10 15 20)" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-tatum-mapping-demo" (om-load-patch-abs1 "r-tatum-mapping-demo" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 261 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 293 307) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 260 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 247 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tatum-mapping" (om-load-lisp-abspatch "tatum-mapping" 6.110001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (mylist) $$(let ((final-list '()))$$(loop for elem in mylist do$      (cond ((eql elem 1) (push '(1 (4)) final-list))$            ((eql elem 2) (push '(1 (8)) final-list))$            ((eql elem 3) (push '(1 (12)) final-list))$            ((eql elem 4) (push '(1 (16)) final-list))$            ((eql elem 5) (push '(1 (20)) final-list))$            ((eql elem 6) (push '(1 (24)) final-list))$            ((eql elem 8) (push '(1 (32)) final-list))$            ((eql elem 10) (push '(1 (40)) final-list))$            ((eql elem 12) (push '(2 (6)) final-list))$            ((eql elem 15) (push '(1 (2)) final-list))$            ((eql elem 20) (push '(1 (1)) final-list))$            (t (push 'nil final-list)))$            )$$$(list (reverse final-list))$)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "MYLIST" nil))) (om-make-point 113 181) nil (list nil) "l" "tatum-mapping"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 14 480) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "output-tatums" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "rhythm-list" 0 (om-make-point 5 45) "" "rhythm-list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 3 1 nil 0) (0 0 5 0 nil 0))) 6.110001 nil "" (om-make-point 344 347) (om-make-point 953 722)) (quote ((om-load-inputfun (quote input-funbox) "" "list" nil))) (om-make-point 745 402) (om-make-point 139 67) (list (list (list (list 1 (list 4)) (list 1 (list 8)) (list 1 (list 12)) (list 1 (list 16)) (list 1 (list 20)) (list 1 (list 24)) (list 1 (list 32)) (list 1 (list 40)) (list 2 (list 6)) (list 1 (list 2)) (list 1 (list 1)) (list 1 (list 4)) (list 1 (list 8)) (list 1 (list 12)) (list 1 (list 16)) (list 1 (list 20)) (list 1 (list 24)) (list 1 (list 32)) (list 1 (list 40)) (list 2 (list 6)) (list 1 (list 2)) (list 1 (list 1)) (list 1 (list 4)) (list 1 (list 8)) (list 1 (list 12)) (list 1 (list 16)) (list 1 (list 20)) (list 1 (list 24)) (list 1 (list 32)) (list 1 (list 40)) (list 2 (list 6)) (list 1 (list 2)) (list 1 (list 1))))) nil "r-tatum-mapping-demo"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 409 40) (quote "Maps numbers to tatums according to a key.  See the key below.$Input must be a list of lists!") "" (om-make-point 82 57) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 242 32) (quote "TATUM MAPPING DRAFT OBJECT") "" (om-make-point 81 27) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 82 295) (om-make-point 412 51) (load-buffer-textfile (quote ("((1 (4)) (1 (8)) (1 (12)) (1 (16)) (1 (20)) (1 (24)) (1 (32)) (1 (40)) (1 (2)) (1 (1)))" "((1 (4)) (1 (8)) (1 (12)) (1 (16)) (1 (20)) (1 (24)) (1 (32)) (1 (40)) (1 (2)) (1 (1)))" "((1 (4)) (1 (8)) (1 (12)) (1 (16)) (1 (20)) (1 (24)) (1 (32)) (1 (40)) (1 (2)) (1 (1)))" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 317 218) (quote "Tatum Mapping Key:$1 = 1 beat of a quarter note (1 (4))$2 = 1 beat of eighth notes (1 (8))$3 = 1 beat of triplets (1 (12))$4 = 1 beat of sixteenths (1 (16))$5 = 1 beat of quintuplets (1 (20))$6 = 1 beat of setuplets (1 (24))$8 = 1 beat of thirty-seconds (1 (32))$10 = 1 beat of quintuplet thirty-seconds (1 (40))$//skipping triplet quarters for now$15 = 1 beat of a half note (1 (2))$//skipping dotted half for now...$20 = 1 beat of a whole note (1 (1))$$") "" (om-make-point 545 31) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 1 0 0 nil 0) (0 0 5 1 nil 0))) nil 6.110001))
