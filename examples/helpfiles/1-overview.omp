; OM File Header - Saved 2017/04/14 14:50:16
; (6.110001 :patc (om-make-point 380 210) (om-make-point 62 140) (om-make-point 490 717) "" 183 0 nil "2017/04/14 14:50:13")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../../in-files/Cb-ord-A#1-ff-3c.sdif\"") (list (quote :midi) "#P\"../../../../../../Max/Packages/CNMAT-MMJ-Depot-master/media/MIDI/bartok.mid\""))
(in-package :om)(load-lib-for (quote ("RepMus" "CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "1-overview" (quote ((let ((box (om-load-boxcall (quote abstraction) "ARCHIVE AND DEVELOPMENT" (om-load-patch-abs1 "ARCHIVE AND DEVELOPMENT" (quote ((let ((box (om-load-boxcall (quote abstraction) "q-canons-ex 2" (om-load-patch-abs1 "q-canons-ex" (quote ((let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 230 384) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 81) (quote "q-rotations returns all rotations for a given list") "" (om-make-point 71 418) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 71 305) (om-make-point 102 105) (load-buffer-textfile (quote ("(2 3 4 6)" "(3 4 6 2)" "(4 6 2 3)" "(6 2 3 4)" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 79 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-CANON-PERMUTATIONS-NO-OVERLAPS" (quote cnmat:q-canon-permutations-no-overlaps) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MAIN-LIST" (list 1 2 7 12)))) (om-make-point 776 536) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTE+REMOVE-DUP-ROTATIONS" (quote cnmat:q-permute+remove-dup-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MAIN-LIST" (list 1 2 3)))) (om-make-point 369 537) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 603 155) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATION-CANON?" (quote cnmat::q-rotation-canon?) (quote ((om-load-inputfun (quote input-funbox) "a list of durations" "VOICE" (list 1 2 3)) (om-load-inputfun (quote input-funbox) "print flag" "PRINT" nil))) (om-make-point 523 185) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATION-CANON?" (quote cnmat::q-rotation-canon?) (quote ((om-load-inputfun (quote input-funbox) "a list of durations" "VOICE" (list 1 2 3)))) (om-make-point 380 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 228 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-CANON" (quote cnmat:q-canon) (quote ((om-load-inputfun (quote input-funbox) "a list of list of durations" "VOICES" (list (list 1 2 3) (list 2 3 1) (list 3 1 2))))) (om-make-point 234 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 828 629) (om-make-point 210 104) (load-buffer-textfile (quote ("((2 3 4 6) (3 4 6 2) (4 2 6 3))" "((2 3 4 6) (4 2 6 3) (3 4 6 2))" "((2 3 4 6) (4 3 6 2) (6 2 3 4))" "((2 3 4 6) (4 6 2 3) (6 2 3 4) (3 4 6 2))" "((2 3 4 6) (4 6 3 2) (6 2 3 4))" "((2 3 4 6) (6 2 3 4) (3 4 6 2) (4 6 2 3))" "((2 3 4 6) (6 2 4 3) (3 4 6 2))" "((2 3 4 6) (6 4 2 3) (3 4 6 2))" "((2 3 4 6) (6 4 3 2))" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 427 631) (om-make-point 94 104) (load-buffer-textfile (quote ("(4 3 2 6)" "(3 4 2 6)" "(4 2 3 6)" "(2 4 3 6)" "(3 2 4 6)" "(2 3 4 6)" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 154 74) (quote "Tests all permutations of a list, checking it for duplicates in the form of rotations ") "" (om-make-point 273 638) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 244 30) (quote "[same for all permutations of the list]") "" (om-make-point 517 377) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 194 42) (quote "[get rotations then test canon]$returns \"t\" if true") "" (om-make-point 227 440) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 85 30) (quote "[shorthand]") "" (om-make-point 406 274) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 216 30) (quote "Utilities to test a combination") "" (om-make-point 27 59) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 338 71) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 2417/4 1311/4) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 2465/4 1063/4) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUTATIONS" (quote permutations) (quote ((om-load-inputfun (quote input-funbox) "a list" "BAG" nil))) (om-make-point 2609/4 791/4) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 1 nil 0) (3 0 2 1 nil 0) (18 0 3 0 nil 0) (18 0 4 0 nil 0) (18 0 5 0 nil 0) (6 0 7 1 nil 0) (18 0 8 0 nil 0) (18 0 9 0 nil 0) (9 0 10 0 nil 0) (4 0 11 1 nil 0) (5 0 12 1 nil 0) (20 0 19 1 nil 0) (7 0 20 0 nil 0) (21 0 20 1 nil 0) (18 0 21 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 1340 839)) (quote nil) (om-make-point 50 59) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.110001 nil "" (om-make-point 679 93) (om-make-point 640 615)) (quote nil) (om-make-point 25 471) nil nil nil "ARCHIVE AND DEVELOPMENT"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "SCORE" (om-load-patch-abs1 "SCORE" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 234 53) (quote "Information about midi input with Tessellate.") "" (om-make-point 209 634) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "s-midi-xml-io 2" (om-load-patch-abs1 "s-midi-xml-io" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 77 30) (quote "XML") "" (om-make-point 138 119) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 326 50) (quote "INFORMATION ABOUT INPUT/OUTPUT") "" (om-make-point 16 53) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 108 31) (quote "MIDIFILES") "" (om-make-point 15 119) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 155 26) (quote "MIDI KEYBOARD INPUT") "" (om-make-point 240 118) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "xml-file 2" (om-load-patch-abs1 "xml-file" (quote ((let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 111 415) (om-make-point 70 50) (load-buffer-textfile (quote ("((5 4))" "((5 4))" "((5 4))" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 211 416) (om-make-point 70 50) (load-buffer-textfile (quote ("(4400 5000 5600)" "(4400 5000 5600)" "(4400 5000 5600)" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 307 415) (om-make-point 70 50) (load-buffer-textfile (quote ("(3/16 1/16 3/8 -1/8 -1/2)" "(1/16 3/8 3/16 -1/8 -1/2)" "(3/8 3/16 1/16 -1/8 -1/2)" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 397 415) (om-make-point 70 50) (load-buffer-textfile (quote ("(3 1 6 -2 -8)" "(1 6 3 -2 -8)" "(6 3 1 -2 -8)" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 487 415) (om-make-point 70 50) (load-buffer-textfile (quote ("(5)" "(5)" "(5)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 53 28) (quote "meters") "" (om-make-point 106 475) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 53 28) (quote "pitches") "" (om-make-point 210 478) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 61 29) (quote "rhythms") "" (om-make-point 305 477) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 81 30) (quote "durations") "" (om-make-point 402 476) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 135 44) (quote "no. of elements") "" (om-make-point 493 475) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "optional tatum argument$(default 1/16)") "" (om-make-point 210 253) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 154 264) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-SCORE-LISTS" (quote cnmat:u-score-lists) (quote ((om-load-inputfun (quote input-funbox) "a poly or a voice" "MY-THING" nil) (om-load-inputfun (quote input-funbox) "an optional tatum" "THIS-TATUM" nil))) (om-make-point 112 295) nil nil nil nil 5))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 153 33) (quote "<--Load xml file here") "" (om-make-point 173 38) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 274 38) (quote "IMPORT XML DATA INTO OM") "" (om-make-point 82 6) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 38 102) (om-make-point 304 109) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/4 (((5 4) ((1 (3 1)) 1 (1 (1.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/4 (((5 4) ((1 (1 3)) (1 (3.0 1)) (1 (1.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/4 (((5 4) (1 (1 (1.0 1)) (1 (1.0 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote gf) (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 467 459) (om-make-point 292 42) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IMPORT-MUSICXML" (quote import-musicxml) (quote nil) (om-make-point 47 41) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 1 nil 0) (12 1 1 1 nil 0) (12 2 2 1 nil 0) (12 3 3 1 nil 0) (12 4 4 1 nil 0) (15 0 12 0 nil 0) (11 0 12 1 nil 0) (16 0 15 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 760 584)) (quote nil) (om-make-point 135 155) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "keyboard-in 2" (om-load-patch-abs1 "keyboard-in" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 172 31) (quote "RECORD MIDIPITCHES") "" (om-make-point 126 77) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 305 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 203 324) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 135 418) (om-make-point 400 63) (load-buffer-textfile (quote ("(7300 7500 7800 7500 7300 7000 6600)" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 130 182) (om-make-point 393 99) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7500) (7800) (7500) (7300) (7000) (6600))) :lonset (quote (0 258 533 865 1662 2165 2704 2795)) :ldur (quote ((100) (111) (228) (156) (100) (97) (91))) :lvel (quote ((85) (61) (19) (79) (59) (79) (82))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midishare) 1 nil 1000 0 (om-make-point 750 384) (om-make-point 704 335) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 407 55) (quote "Press the button inside voice object below.$Make sure midishare is selected in OM midipreferences.$Make sure that keyboard is input device in OM midipreferences.") "" (om-make-point 128 105) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (4 1 2 0 nil 0) (1 0 3 1 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 673 534)) (quote nil) (om-make-point 247 154) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "midifile 2" (om-load-patch-abs1 "Midifile" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "optional tatum argument$(default 1/16)") "" (om-make-point 275 415) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 223 418) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 135 44) (quote "no. of elements") "" (om-make-point 503 606) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 81 30) (quote "durations") "" (om-make-point 412 601) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 61 29) (quote "rhythms") "" (om-make-point 315 602) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 53 28) (quote "pitches") "" (om-make-point 220 603) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 53 28) (quote "meters") "" (om-make-point 116 600) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 497 540) (om-make-point 70 50) (load-buffer-textfile (quote ("(160)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 407 540) (om-make-point 70 50) (load-buffer-textfile (quote ("(2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 317 540) (om-make-point 70 50) (load-buffer-textfile (quote ("(1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 221 541) (om-make-point 70 50) (load-buffer-textfile (quote ("((5600 5400 6800 6600) (5300 5700 6900 6500) (5400 5600 6800 6600) (5300 5700 6900 6500) (5400 5600 6800 6600) (5300 5700 6500 6900) (5400 5600 6800 6600) (5300 5700 6900 6500) (5400 5600 6800 7000) (5500 5900 6700 7100) (5400 5600 6800 7000) (5500 5900 6700 7100) (5400 5600 7000 6800) (5500 5900 7100 6700) (5400 5600 7000 6800) (5500 5900 6700 7100) (5400 5600 6800 6600) (5300 5700 6900 6500) (5400 5600 6600 6800) (5300 5700 6900 6500) (5400 5600 6800 7000) (5500 5900 6700 7100) (5400 5600 6800 7000) (5500 5900 6700 7100) (5600 5400 6600 6800) (5300 5700 6500 6900) (5800 5600 7000 6800) (5500 5900 6700 7100) (5400 5600 6800 6600) (5300 5700 6500 6900) (5600 5800 7000 6800) (5500 5900 6700 7100) (5800 6100 7300 7000) (5700 6200 7400 6900) (5600 5800 6800 7000) (5900 5500 7100 6700) (5600 5800 7000 6800) (5900 5500 7100 6700) (5600 5800 6800 7000) (5900 5500 7100 6700) (6100 5800 7300 7000) (6200 5700 7400 6900) (6100 6300 7300 7500) (6400 6000 7200 7600) (6100 6300 7300 7500) (6000 6400 7600 7200) (6100 6300 7300 7500) (6000 6400 7200 7600) (5800 6100 7300 7000) (6200 5700 7400 6900) (6100 6300 7300 7500) (6000 6400 7600 7200) (6100 6300 7300 7500) (6000 6400 7600 7200) (6100 6300 7500 7800) (6000 6400 7900 7400) (6100 5800 7300 7500) (5700 6200 7200 7600) (6100 6300 7500 7800) (6000 6400 7900 7400) (5800 6100 7500 7300) (6200 5700 7400 7600) (6100 6300 7800 7500) (6000 6400 7400 7900) (5800 6100 7500 7800) (5700 6200 7400 7900) (7800 7500) (7900 7400) (6600 6100 7800 7500) (6200 6500 7900 7400) (7800 7500) (7900 7400) (6300 6100 7800 7500) (6000 6400 7400 7900) (6100 6300) (6400 6000 7400 7900) (6100 6300 7500 7800) (6000 6400) (6100 6300 7500 7800) (6000 6400 7400 7900) (5800 6100 7300 7500) (6200 5700 7600 7200) (5800 6100) (6200 5700 7400 7900) (5800 6100 7500 7800) (5700 6200) (5800 6100 7800 7500) (5700 6200 7900 7400) (5800 6100 7500 7300) (5700 6200 7600 7200) (5600 5800) (5500 5900 7800 7500) (5600 5800 7400 7900) (5900 5500) (5600 5800 7400 7900) (5500 5900 7800 7500) (5600 5800 7600 7200) (5500 5900 7300 7500) (5600 5800) (5700 5300 7300 7500) (5400 5600 7200 7600) (5700 5300) (5400 5600 7000 6800) (5700 5300 6700 7100) (5400 5600) (5700 5300 7200 7600) (5400 5600 7300 7500) (5700 5300) (5400 5600 6800 7000) (5300 5700 6700 7100) (5600 5400) (5700 5300 7300 7500) (5400 5600 7200 7600) (5300 5700) (5400 5600 7000 7300) (5300 5700 7400 6900) (5400 5600) (5700 5300 6700 7100) (5400 5600 7000 6800) (5300 5700) (5100 5400 6600 6800) (5500 5000 6900 6500) (6800 6600) (5100 5400 6900 6500) (5000 5500 6600 6800) (6900 6500) (4900 5100 6600 6800) (4800 5200 6900 6500) (6600 6800) (4900 4600 6500 6900) (5000 4500 6600 6800) (6900 6500) (4400 4600 6600 6800) (4700 4300 6500 6900) (4400 4600) (4700 4300 5300 5700) (5400 5600) (5700 5300) (6800 7000 5400 5600) (6900 6700 5700 5300) (5600 5400) (5300 5700) (4400 4600 5400 5600) (4300 4700 5700 5300) (5400 5600) (5700 5300) (6800 7000 5400 5600) (6700 6900 5700 5300) (5400 5600) (5300 5700) (5400 5600) (5700 5300) (4400 4600 5600 5400) (4300 4700 5700 5300) (5400 5600) (5700 5300) (5600 5400) (5300 5700) (4400 4200 5400 5600) (4100 4500 5700 5300))" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 121 537) (om-make-point 70 50) (load-buffer-textfile (quote ("((4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4))" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-SCORE-LISTS" (quote cnmat:u-score-lists) (quote ((om-load-inputfun (quote input-funbox) "a poly or a voice" "MY-THING" nil) (om-load-inputfun (quote input-funbox) "an optional tatum" "THIS-TATUM" nil))) (om-make-point 138 420) nil nil nil nil 5))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 108 272) (om-make-point 602 112) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (20 (((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5400 6800 6600)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700 6900 6500)) :ldur (quote (188 188 188 188)) :lvel (quote (127 127 127 127)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 6800 6600)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700 6900 6500)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 6800 6600)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700 6500 6900)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 6800 6600)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700 6900 6500)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 6800 7000)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 6700 7100)) :ldur (quote (188 188 188 188)) :lvel (quote (127 127 127 127)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 6800 7000)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 6700 7100)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 7000 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 7100 6700)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 7000 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 6700 7100)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 6800 6600)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700 6900 6500)) :ldur (quote (188 188 188 188)) :lvel (quote (127 127 127 127)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 6600 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700 6900 6500)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 6800 7000)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 6700 7100)) :ldur (quote (188 188 188 188)) :lvel (quote (126 126 126 126)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 6800 7000)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 6700 7100)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5400 6600 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700 6500 6900)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 5600 7000 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (97 97 97 97)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 6700 7100)) :ldur (quote (188 188 188 188)) :lvel (quote (98 98 98 98)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 6800 6600)) :ldur (quote (188 188 188 188)) :lvel (quote (99 99 99 99)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700 6500 6900)) :ldur (quote (188 188 188 188)) :lvel (quote (101 101 101 101)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5800 7000 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (102 102 102 102)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 6700 7100)) :ldur (quote (188 188 188 188)) :lvel (quote (103 103 103 103)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6100 7300 7000)) :ldur (quote (188 188 188 188)) :lvel (quote (104 104 104 104)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6200 7400 6900)) :ldur (quote (188 188 188 188)) :lvel (quote (105 105 105 105)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5800 6800 7000)) :ldur (quote (188 188 188 188)) :lvel (quote (106 106 106 106)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5500 7100 6700)) :ldur (quote (188 188 188 188)) :lvel (quote (106 106 106 106)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5800 7000 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (106 106 106 106)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5500 7100 6700)) :ldur (quote (188 188 188 188)) :lvel (quote (106 106 106 106)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5800 6800 7000)) :ldur (quote (188 188 188 188)) :lvel (quote (106 106 106 106)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5500 7100 6700)) :ldur (quote (188 188 188 188)) :lvel (quote (106 106 106 106)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5800 7300 7000)) :ldur (quote (188 188 188 188)) :lvel (quote (106 106 106 106)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5700 7400 6900)) :ldur (quote (188 188 188 188)) :lvel (quote (106 106 106 106)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6300 7300 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (107 107 107 107)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6000 7200 7600)) :ldur (quote (188 188 188 188)) :lvel (quote (109 109 109 109)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6300 7300 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (111 111 111 111)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 7600 7200)) :ldur (quote (188 188 188 188)) :lvel (quote (113 113 113 113)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6300 7300 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (114 114 114 114)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 7200 7600)) :ldur (quote (188 188 188 188)) :lvel (quote (115 115 115 115)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6100 7300 7000)) :ldur (quote (188 188 188 188)) :lvel (quote (115 115 115 115)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5700 7400 6900)) :ldur (quote (188 188 188 188)) :lvel (quote (116 116 116 116)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6300 7300 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (117 117 117 117)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 7600 7200)) :ldur (quote (188 188 188 188)) :lvel (quote (117 117 117 117)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6300 7300 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 7600 7200)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6300 7500 7800)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 7900 7400)) :ldur (quote (188 188 188 188)) :lvel (quote (120 120 120 120)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5800 7300 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (121 121 121 121)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6200 7200 7600)) :ldur (quote (188 188 188 188)) :lvel (quote (121 121 121 121)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6300 7500 7800)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 7900 7400)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6100 7500 7300)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5700 7400 7600)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6300 7800 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 7400 7900)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6100 7500 7800)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6200 7400 7900)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7500)) :ldur (quote (188 188)) :lvel (quote (119 119)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 7400)) :ldur (quote (188 188)) :lvel (quote (119 119)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6100 7800 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500 7900 7400)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7500)) :ldur (quote (188 188)) :lvel (quote (119 119)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 7400)) :ldur (quote (188 188)) :lvel (quote (119 119)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 6100 7800 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 7400 7900)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6300)) :ldur (quote (188 188)) :lvel (quote (119 119)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6000 7400 7900)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6300 7500 7800)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400)) :ldur (quote (188 188)) :lvel (quote (119 119)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6300 7500 7800)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 7400 7900)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6100 7300 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5700 7600 7200)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6100)) :ldur (quote (188 188)) :lvel (quote (119 119)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5700 7400 7900)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6100 7500 7800)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6200)) :ldur (quote (188 188)) :lvel (quote (119 119)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6100 7800 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6200 7900 7400)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6100 7500 7300)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6200 7600 7200)) :ldur (quote (188 188 188 188)) :lvel (quote (119 119 119 119)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5800)) :ldur (quote (188 188)) :lvel (quote (118 118)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 7800 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5800 7400 7900)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5500)) :ldur (quote (188 188)) :lvel (quote (118 118)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5800 7400 7900)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 7800 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5800 7600 7200)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 7300 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5800)) :ldur (quote (188 188)) :lvel (quote (118 118)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300 7300 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 7200 7600)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300)) :ldur (quote (188 188)) :lvel (quote (118 118)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 7000 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300 6700 7100)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600)) :ldur (quote (188 188)) :lvel (quote (118 118)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300 7200 7600)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 7300 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300)) :ldur (quote (188 188)) :lvel (quote (118 118)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 6800 7000)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700 6700 7100)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5400)) :ldur (quote (188 188)) :lvel (quote (118 118)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300 7300 7500)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 7200 7600)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700)) :ldur (quote (188 188)) :lvel (quote (118 118)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 7000 7300)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700 7400 6900)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600)) :ldur (quote (188 188)) :lvel (quote (118 118)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300 6700 7100)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600 7000 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700)) :ldur (quote (188 188)) :lvel (quote (118 118)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100 5400 6600 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5000 6900 6500)) :ldur (quote (188 188 188 188)) :lvel (quote (118 118 118 118)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6600)) :ldur (quote (188 188)) :lvel (quote (116 116)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100 5400 6900 6500)) :ldur (quote (188 188 188 188)) :lvel (quote (115 115 115 115)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5500 6600 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (114 114 114 114)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6500)) :ldur (quote (188 188)) :lvel (quote (113 113)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900 5100 6600 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (111 111 111 111)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5200 6900 6500)) :ldur (quote (188 188 188 188)) :lvel (quote (110 110 110 110)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6800)) :ldur (quote (188 188)) :lvel (quote (109 109)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900 4600 6500 6900)) :ldur (quote (188 188 188 188)) :lvel (quote (108 108 108 108)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 4500 6600 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (106 106 106 106)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6500)) :ldur (quote (188 188)) :lvel (quote (105 105)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400 4600 6600 6800)) :ldur (quote (188 188 188 188)) :lvel (quote (104 104 104 104)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4300 6500 6900)) :ldur (quote (188 188 188 188)) :lvel (quote (103 103 103 103)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400 4600)) :ldur (quote (188 188)) :lvel (quote (101 101)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4300 5300 5700)) :ldur (quote (188 188 188 188)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600)) :ldur (quote (188 188)) :lvel (quote (99 99)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300)) :ldur (quote (188 188)) :lvel (quote (98 98)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 7000 5400 5600)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6700 5700 5300)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5400)) :ldur (quote (188 188)) :lvel (quote (96 96)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700)) :ldur (quote (188 188)) :lvel (quote (96 96)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400 4600 5400 5600)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300 4700 5700 5300)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600)) :ldur (quote (188 188)) :lvel (quote (96 96)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300)) :ldur (quote (188 188)) :lvel (quote (96 96)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 7000 5400 5600)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6900 5700 5300)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600)) :ldur (quote (188 188)) :lvel (quote (96 96)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700)) :ldur (quote (188 188)) :lvel (quote (96 96)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600)) :ldur (quote (188 188)) :lvel (quote (96 96)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300)) :ldur (quote (188 188)) :lvel (quote (96 96)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400 4600 5600 5400)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300 4700 5700 5300)) :ldur (quote (188 188 188 188)) :lvel (quote (96 96 96 96)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5600)) :ldur (quote (188 188)) :lvel (quote (99 99)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300)) :ldur (quote (188 188)) :lvel (quote (105 105)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5400)) :ldur (quote (188 188)) :lvel (quote (111 111)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 5700)) :ldur (quote (188 188)) :lvel (quote (117 117)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400 4200 5400 5600)) :ldur (quote (188 188 188 188)) :lvel (quote (120 120 120 120)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100 4500 5700 5300)) :ldur (quote (188 188 188 188)) :lvel (quote (120 120 120 120)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 160) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 903 492) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 149 42) (quote "Load midifile here") "" (om-make-point 106 76) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "bartok.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 107 126) (om-make-point 146 102) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "Users" "mattschumaker" "Documents" "Max" "Packages" "CNMAT-MMJ-Depot-master" "media" "MIDI")) :device nil :host nil :name "bartok" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "bartok.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale player)) (list (quote t) 0 0 (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil (quote :midishare))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 4 7 1 nil 0) (12 3 8 1 nil 0) (12 2 9 1 nil 0) (12 1 10 1 nil 0) (12 0 11 1 nil 0) (13 0 12 0 nil 0) (1 0 12 1 nil 0) (15 0 13 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 914 531)) (quote nil) (om-make-point 17 156) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 432 290)) (quote nil) (om-make-point 93 632) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "s-poly2 modes 3 4 and 2" (om-load-patch-abs1 "s-poly2 modes 3 4 and 5" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 2208 445) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 102 28) (quote "pulse mode") "" (om-make-point 2249 443) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2122 261) (om-make-point 62 106) (load-buffer-textfile (quote ("" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 98 24) (quote "tatums") "" (om-make-point 2125 230) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2 2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 2128 466) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 343 121) (quote "In this mode, sublists in the rhythms are matched with sublists in the pitches. Each voice must contain equal sublists for rhythms and pitches. The resulting pitches rotate through the sublist of pitches provided until the sublist rhythm is exhausted.  Chords are designated as further sublists within.  ") "" (om-make-point 1821 95) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 143 26) (quote "rhythms") "" (om-make-point 1821 232) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2238 261) (om-make-point 407 154) (load-buffer-textfile (quote ("" "((6000) (6500 (6900 6800)) (5800) (6000 6500) (5900))" "((6200 6700) (6000) (6200 6700) (6000) (6200) (5800))" "((6400 6900) (6300) (6400 6900) (6300) (6800) (6500))" "((6600 7100) (6500) (6600 7100) (6500) (6200) (5400))" "((6800 7300) (7700 (7700 7200)) (6800 7300) (7700) (5200) (5100))" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1822 259) (om-make-point 276 139) (load-buffer-textfile (quote ("((1 2 6 10 11) (1 3 6 8 12) (2 3 4 10 11) (2 3 6 7 12) (3 4 6 8 9) (3 5 6 7 9))" "((2 6 10 11 1) (3 6 8 12 1) (3 4 10 11 2) (3 6 7 12 2) (4 6 8 9 3) (5 6 7 9 3))" "((6 10 11 1 2) (6 8 12 1 3) (4 10 11 2 3) (6 7 12 2 3) (6 8 9 3 4) (6 7 9 3 5))" "((10 11 1 2 6) (8 12 1 3 6) (10 11 2 3 4) (7 12 2 3 6) (8 9 3 4 6) (7 9 3 5 6))" "((11 1 2 6 10) (12 1 3 6 8) (11 2 3 4 10) (12 2 3 6 7) (9 3 4 6 8) (9 3 5 6 7))" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1838 586) (om-make-point 639 237) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 544 372) (om-make-point 531 590) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 98 24) (quote "pitches") "" (om-make-point 2235 232) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 160 45) (quote "S-POLY2 (MODE 5) SUBLISTS PULSE") "" (om-make-point 1822 51) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 102 28) (quote "rests mode") "" (om-make-point 1376 438) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 102 28) (quote "sustain mode") "" (om-make-point 520 436) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1249 256) (om-make-point 62 106) (load-buffer-textfile (quote ("" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 98 24) (quote "tatums") "" (om-make-point 1252 225) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1335 440) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 1255 461) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 343 121) (quote "In this mode, sublists in the rhythms are matched with sublists in the pitches. Each voice must contain equal sublists for rhythms and pitches. The resulting pitches rotate through the sublist of pitches provided until the sublist rhythm is exhausted.  Chords are designated as further sublists within.  ") "" (om-make-point 948 90) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 143 26) (quote "rhythms") "" (om-make-point 948 227) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1365 256) (om-make-point 407 154) (load-buffer-textfile (quote ("" "((6000) (6500 (6900 6800)) (5800) (6000 6500) (5900))" "((6200 6700) (6000) (6200 6700) (6000) (6200) (5800))" "((6400 6900) (6300) (6400 6900) (6300) (6800) (6500))" "((6600 7100) (6500) (6600 7100) (6500) (6200) (5400))" "((6800 7300) (7700 (7700 7200)) (6800 7300) (7700) (5200) (5100))" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 949 254) (om-make-point 276 139) (load-buffer-textfile (quote ("((1 2 6 10 11) (1 3 6 8 12) (2 3 4 10 11) (2 3 6 7 12) (3 4 6 8 9) (3 5 6 7 9))" "((2 6 10 11 1) (3 6 8 12 1) (3 4 10 11 2) (3 6 7 12 2) (4 6 8 9 3) (5 6 7 9 3))" "((6 10 11 1 2) (6 8 12 1 3) (4 10 11 2 3) (6 7 12 2 3) (6 8 9 3 4) (6 7 9 3 5))" "((10 11 1 2 6) (8 12 1 3 6) (10 11 2 3 4) (7 12 2 3 6) (8 9 3 4 6) (7 9 3 5 6))" "((11 1 2 6 10) (12 1 3 6 8) (11 2 3 4 10) (12 2 3 6 7) (9 3 4 6 8) (9 3 5 6 7))" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 965 581) (om-make-point 639 237) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 1 -1 1)) (1 (-1 -1 -1 -1)) (1 (-1 1 -1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 1 1)))) ((4 4) ((1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 1 -1)))) ((4 4) ((1 (-1 1 -1 -1)) (1 (-1 1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (1 -1 -1 1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 -1 1)) (1 (-1 -1 -1 1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 1 -1 -1)) (1 (-1 -1 1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)) (1 (-1 -1 -1 1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 1 1 -1)))) ((4 4) ((1 (-1 1 -1 -1)) (1 (-1 -1 -1 1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 1)) (1 (1 -1 -1 1)))) ((4 4) ((1 (-1 -1 -1 1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 1 -1)) (1 (-1 1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (1 -1 -1 -1)) (1 (1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 1 -1 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 1)) (1 (1 -1 1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (1 1 -1 -1)) (1 (1 -1 -1 -1)))) ((4 4) ((1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 1 -1 1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (1 -1 -1 -1)) (1 (-1 -1 -1 1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 1)) (1 (-1 1 -1 -1)) (1 (1 -1 -1 -1)) (1 (-1 -1 1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 1)))) ((4 4) ((1 (-1 -1 1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 -1 1)))) ((4 4) ((1 (-1 -1 -1 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 1 1 -1)) (1 (1 -1 -1 -1)) (1 (-1 -1 1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 1 1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 1 -1 1)) (1 (-1 -1 1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 1 -1 1)))) ((4 4) ((1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 1 -1 -1)) (1 (1 -1 -1 -1)))) ((4 4) ((1 (1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 1 -1 -1)) (1 (-1 -1 1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 1)) (1 (1 -1 1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 1 1)) (1 (-1 -1 1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 -1 1)) (1 (-1 1 -1 -1)) (1 (1 -1 -1 -1)))) ((4 4) ((1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (1 -1 -1 1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 1 -1 -1)) (1 (-1 -1 -1 -1)) (1 (1 -1 -1 -1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 1 -1 -1)) (1 (1 -1 -1 -1)) (1 (1 -1 -1 -1)) (1 (-1 -1 1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 -1 1)))) ((4 4) ((1 (-1 -1 1 -1)) (1 (-1 -1 -1 1)) (1 (-1 -1 -1 -1)) (1 (-1 1 -1 -1)))) ((4 4) ((1 (-1 -1 -1 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 544 372) (om-make-point 531 590) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 98 24) (quote "pitches") "" (om-make-point 1362 227) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 160 45) (quote "S-POLY2 (MODE 4) SUBLISTS RESTS") "" (om-make-point 949 46) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 395 254) (om-make-point 62 106) (load-buffer-textfile (quote ("" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 98 24) (quote "tatums") "" (om-make-point 398 223) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 481 438) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 401 459) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lisp-codebox-versions" (om-load-patch-abs1 "lisp-codebox-versions" (quote ((let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 127 155) (om-make-point 66 30) (list (quote rhythms)) "(rhythms)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 201 154) (om-make-point 59 30) (list (quote pitches)) "(pitches)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 126 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "p-mapcar-ver" (om-load-lisp-abspatch "p-mapcar-ver" 6.110001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (rhythms pitches) $$(let ((current-list '()))$$     (loop for sub-rhythm in rhythms for sub-voice-pitch in pitches do$            (push (first-n (flat (repeat-n sub-voice-pitch (length sub-rhythm)) 1) (length sub-rhythm)) current-list))$$(reverse (flat current-list 1))$$$)$)$$$") (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHMS" nil) (om-load-inputfun (quote input-funbox) "" "PITCHES" nil))) (om-make-point 13 145) nil (list nil) "l" "p-mapcar-ver"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "p-map3" (om-load-lisp-abspatch "p-map3" 6.110001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (rhythms pitches) $$(let ((final-list '())$      (current-list '()))$$(loop for voice-rhythm in rhythms for voice-pitch in pitches do$      (setq current-list '())$      (loop for sub-rhythm in voice-rhythm for sub-voice-pitch in voice-pitch do$            (push (first-n (flat (repeat-n sub-voice-pitch (length sub-rhythm)) 1) (length sub-rhythm)) current-list))$      (push (reverse (flat current-list 1)) final-list))$$(reverse final-list)$$$)$)$$$") (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHMS" nil) (om-load-inputfun (quote input-funbox) "" "PITCHES" nil))) (om-make-point 19 54) nil (list (list (list 6000 6000 6000 6000 6000 6500 (list 6900 6800) 6500 (list 6900 6800) 6500 5800 5800 5800 5800 5800 6000 6500 6000 6500 6000 5900 5900 5900 5900 5900) (list 6200 6700 6200 6700 6200 6000 6000 6000 6000 6000 6200 6700 6200 6700 6200 6000 6000 6000 6000 6000 6200 6200 6200 6200 6200 5800 5800 5800 5800 5800) (list 6400 6900 6400 6900 6400 6300 6300 6300 6300 6300 6400 6900 6400 6900 6400 6300 6300 6300 6300 6300 6800 6800 6800 6800 6800 6500 6500 6500 6500 6500) (list 6600 7100 6600 7100 6600 6500 6500 6500 6500 6500 6600 7100 6600 7100 6600 6500 6500 6500 6500 6500 6200 6200 6200 6200 6200 5400 5400 5400 5400 5400) (list 6800 7300 6800 7300 6800 7700 (list 7700 7200) 7700 (list 7700 7200) 7700 6800 7300 6800 7300 6800 7700 7700 7700 7700 7700 5200 5200 5200 5200 5200 5100 5100 5100 5100 5100))) nil "p-map3"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (0 0 2 1 nil 0) (1 0 2 2 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 787 746) nil nil nil "lisp-codebox-versions"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 160 45) (quote "S-POLY2 (MODE 3) SUBLISTS SUSTAIN") "" (om-make-point 95 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 98 24) (quote "pitches") "" (om-make-point 508 225) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 111 579) (om-make-point 639 237) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 2 1)) 1.0 (1 (1.0 3)) 1.0)) ((4 4) ((1 (3.0 1)) 2.0 (1 (2.0 1 1)))) ((4 4) ((1 (1.0 1)) 1.0 2)) ((4 4) (3 (1 (1 1)))) ((4 4) ((1 (1.0 3)) (1 (1.0 3)) 1.0 (1 (3.0 1)))) ((4 4) (2.0 (1 (1.0 1)) (1 (3 1)))) ((4 4) (1.0 (1 (1.0 3)) 1.0 1)) ((4 4) (2.0 (1 (3 1)) (1 (3.0 1)))) ((4 4) (1.0 (1 (1.0 3)) 1.0 (1 (1.0 3)))) ((4 4) (1.0 (1 (1.0 1)) (1 (1.0 3)) (1 (1.0 1)))) ((4 4) (1.0 1 (1 (3.0 1)) 1.0)) ((4 4) (1.0 -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (1091 1091)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 1)) 1.0 2)) ((4 4) ((1 (1.0 1)) 2.0 (1 (1.0 1 2)))) ((4 4) ((1 (1.0 3)) (1 (3.0 1)) 1.0 (1 (3.0 1)))) ((4 4) (2.0 (1 (3.0 1)) (1 (3 1)))) ((4 4) ((1 (3.0 1)) 2.0 (1 (1.0 3)))) ((4 4) (2.0 (1 (1 1)) (1 (1.0 3)))) ((4 4) ((1 (3.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 1 1)) ((4 4) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((4 4) ((1 (3.0 1)) (1 (1.0 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 3)) 1.0 2)) ((4 4) ((1 (1.0 3)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) (1 (1 (1.0 1)) 2.0)) ((4 4) (2 (1 (3.0 1)) (1 (1 1)))) ((4 4) (1.0 2 1)) ((4 4) (2.0 (1 (1 3)) 1)) ((4 4) (2 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 2 1)) (1 (1.0 1)) 1.0)) ((4 4) (1 (1 (3.0 1)) 2.0)) ((4 4) ((1 (3.0 1)) (1 (1.0 3)) 1 (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 1)) 1.0 (1 (3.0 1)))) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) 1.0 1)) ((4 4) ((1 (3.0 1)) 2.0 (1 (3 1)))) ((4 4) (1.0 -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) (2 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1 2)) 1 (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) ((1 (2.0 1 1)) (1 (1.0 1)) 1.0 1)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) ((1 (1.0 2 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 3)) 2.0 (1 (1.0 2 1)))) ((4 4) ((1 (1.0 1)) 1.0 2)) ((4 4) (2 (1 (1.0 3)) 1)) ((4 4) (1 (1 (1.0 1)) 1.0 (1 (1.0 3)))) ((4 4) (1.0 (1 (1.0 1)) (1 (1.0 3)) (1 (1.0 1)))) ((4 4) (1.0 -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) (2 (1 (3.0 1)) (1 (1 1)))) ((4 4) (1.0 2 (1 (1.0 1)))) ((4 4) (2.0 (1 (2.0 1 1)) (1 (1.0 1)))) ((4 4) (1.0 2 1)) ((4 4) (1.0 (1 (3.0 1)) (1 (1.0 3)) 1)) ((4 4) (2 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) (1 (3 1)) 1.0)) ((4 4) ((1 (1.0 3)) 1.0 2)) ((4 4) ((1 (1.0 3)) 1 1 (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 1)) 1.0 (1 (3.0 1)))) ((4 4) ((1 (1.0 1)) (1 (3.0 1)) 1.0 (1 (1.0 3)))) ((4 4) (1.0 -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (273 273)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 544 372) (om-make-point 531 590) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 95 252) (om-make-point 276 139) (load-buffer-textfile (quote ("((1 2 6 10 11) (1 3 6 8 12) (2 3 4 10 11) (2 3 6 7 12) (3 4 6 8 9) (3 5 6 7 9))" "((2 6 10 11 1) (3 6 8 12 1) (3 4 10 11 2) (3 6 7 12 2) (4 6 8 9 3) (5 6 7 9 3))" "((6 10 11 1 2) (6 8 12 1 3) (4 10 11 2 3) (6 7 12 2 3) (6 8 9 3 4) (6 7 9 3 5))" "((10 11 1 2 6) (8 12 1 3 6) (10 11 2 3 4) (7 12 2 3 6) (8 9 3 4 6) (7 9 3 5 6))" "((11 1 2 6 10) (12 1 3 6 8) (11 2 3 4 10) (12 2 3 6 7) (9 3 4 6 8) (9 3 5 6 7))" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 511 254) (om-make-point 407 154) (load-buffer-textfile (quote ("" "((6000) (6500 (6900 6800)) (5800) (6000 6500) (5900))" "((6200 6700) (6000) (6200 6700) (6000) (6200) (5800))" "((6400 6900) (6300) (6400 6900) (6300) (6800) (6500))" "((6600 7100) (6500) (6600 7100) (6500) (6200) (5400))" "((6800 7300) (7700 (7700 7200)) (6800 7300) (7700) (5200) (5100))" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 143 26) (quote "rhythms") "" (om-make-point 94 225) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 343 121) (quote "In this mode, sublists in the rhythms are matched with sublists in the pitches. Each voice must contain equal sublists for rhythms and pitches. The resulting pitches rotate through the sublist of pitches provided until the sublist rhythm is exhausted.  Chords are designated as further sublists within.  ") "" (om-make-point 94 88) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 1 4 0 nil 0) (2 1 4 2 nil 0) (7 1 4 3 nil 0) (0 0 4 5 nil 0) (4 0 9 1 nil 0) (21 1 17 0 nil 0) (14 1 17 2 nil 0) (20 1 17 3 nil 0) (16 0 17 5 nil 0) (17 0 22 1 nil 0) (33 1 28 0 nil 0) (25 1 28 2 nil 0) (34 1 28 3 nil 0) (27 0 28 5 nil 0) (28 0 32 1 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 1440 837)) (quote nil) (om-make-point 61 226) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "s-poly2-ex 2" (om-load-patch-abs1 "s-poly2-ex" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 67 28) (quote "rhythm") "" (om-make-point 1923 179) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 67 28) (quote "rhythm") "" (om-make-point 1242 181) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 67 28) (quote "rhythm") "" (om-make-point 126 53) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 14" (om-make-point 250 23) (quote "S-POLY: mode=2 (pulse)") "" (om-make-point 1914 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 3" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 2093 468) (om-make-point 432 198) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 -3))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1)) (1 (1 1 1 1)) (1 (1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1)) (1 (1 -3)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1)) (1 (1 1)) (1 (1 1 1)) (1 (1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1)) (1 (1 1 1 1)) (1 (1 1)))) ((4 4) ((1 (1 1 1 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 2376 211) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 1925 221) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 67 28) (quote "meter") "" (om-make-point 2021 176) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 115 28) (quote "tatums") "" (om-make-point 2102 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 6" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2096 211) (om-make-point 109 77) (load-buffer-textfile (quote ("((1(16)) (1(20)))" "((1(8)) (1(16)))" "((1(12)) (1(8)))" "((1(16)) (1(8)))" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 11" (om-make-point 97 26) (quote "pitches") "" (om-make-point 2225 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2222 203) (om-make-point 134 85) (load-buffer-textfile (quote ("(8000 8200 8300)" "(7000 7100 7200)" "( 6500 6600 6700)" "( 6100 6200 6300)" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 228 59) (quote "$THIS IS THE PULSE VERSION") "" (om-make-point 1914 45) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 2021 220) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 97 26) (quote "mode=pulse") "" (om-make-point 2370 176) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS 3" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 1947 400) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2 4" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 2123 348) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 250 23) (quote "S-POLY: mode=1 (rests)") "" (om-make-point 1231 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 250 23) (quote "S-POLY: default (sustain) mode") "" (om-make-point 127 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1409 471) (om-make-point 432 198) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 -1 1 -1)) (1 (-1 1 -1 -1)) (1 (-1 1 -1 -1)) (1 (-1 -1 -1 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 -1)) (1 (-1 1 -1 -1)) (1 (-1 1)) (1 (-1 -1 -1 -1)))) ((4 4) ((1 (-1 1)) (1 (-1 -3)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 -1 -1)) (1 (-1 1)) (1 (-1 -1 -1)) (1 (-1 -1)))) ((4 4) ((1 (1 -1 1)) (1 (-1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 -1 -1 -1)) (1 (-1 -1)) (1 (1 -1 1 -1)) (1 (-1 1)))) ((4 4) ((1 (-1 -1 -1 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1016 505) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1764 216) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 1241 224) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 67 28) (quote "meter") "" (om-make-point 1337 179) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 115 28) (quote "tatums") "" (om-make-point 1418 177) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1412 214) (om-make-point 109 77) (load-buffer-textfile (quote ("((1(16)) (1(16)))" "((1(8)) (1(16)))" "((1(12)) (1(8)))" "((1(16)) (1(8)))" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 97 26) (quote "pitches") "" (om-make-point 1541 177) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1538 206) (om-make-point 134 85) (load-buffer-textfile (quote ("(8000 8200 8300)" "(7000 7100 7200)" "( 6500 6600 6700)" "( 6100 6200 6300)" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 208 51) (quote "$THIS IS THE RESTS VERSION") "" (om-make-point 1231 50) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1337 223) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 97 26) (quote "mode=rests") "" (om-make-point 1761 179) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS 2" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 1240 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2 3" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 1518 360) (om-make-point 125 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1691 213) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 50 26) (quote "tempo") "" (om-make-point 1686 179) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2 2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 149 602) (om-make-point 209 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 676 269) (om-make-point 189 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 126 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 232 26) (quote "also takes rotations directly from rfi") "" (om-make-point 188 421) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 67 28) (quote "meter") "" (om-make-point 192 452) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 60 26) (quote "tempo") "" (om-make-point 566 451) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 115 28) (quote "tatums") "" (om-make-point 273 451) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 272 483) (om-make-point 109 77) (load-buffer-textfile (quote ("((1(16)) (1(20)))" "((1(8)) (1(16)))" "((1(12)) (1(8)))" "((1(16)) (1(8)))" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 26) (quote "pitches") "" (om-make-point 410 453) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 410 485) (om-make-point 134 85) (load-buffer-textfile (quote ("(8000 8200 8300)" "(7000 7100 7200)" "( 6500 6600 6700)" "( 6100 6200 6300)" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 563 493) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 197 499) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 109 687) (om-make-point 401 195) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 4)) 1 (1 (2.0 -3))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (436)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1.0 3)) (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 -3)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1.0 1)) 2.0)) ((4 4) ((1 (2 1)) 1.0 -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (2 (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (3.0 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 775 452) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 67 28) (quote "meter") "" (om-make-point 534 74) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 60 26) (quote "tempo") "" (om-make-point 908 73) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 115 28) (quote "tatums") "" (om-make-point 615 73) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 614 105) (om-make-point 109 77) (load-buffer-textfile (quote ("((1(16)) (1(20)))" "((1(8)) (1(16)))" "((1(12)) (1(8)))" "((1(16)) (1(8)))" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 26) (quote "pitches") "" (om-make-point 756 77) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 752 107) (om-make-point 134 85) (load-buffer-textfile (quote ("(8000 8200 8300)" "(7000 7100 7200)" "( 6500 6600 6700)" "( 6100 6200 6300)" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 397 27) (quote "q-rotations->s-poly2 object, which allows for changing tatums") "" (om-make-point 538 33) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 127 85) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 22 241) (om-make-point 431 151) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 150 100) (om-make-point 250 280))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 905 110) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 539 121) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 735 364) (om-make-point 401 195) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 4)) 1 (1 (2.0 -3))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (436)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1.0 3)) (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 -3)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1.0 1)) 2.0)) ((4 4) ((1 (2 1)) 1.0 -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (2 (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (3.0 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 133 616) (om-make-point 589 461) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 0 4 1 nil 0) (6 0 15 0 nil 0) (15 0 16 0 nil 0) (13 0 16 1 nil 0) (9 1 16 2 nil 0) (11 1 16 3 nil 0) (5 0 16 5 nil 0) (31 0 19 1 nil 0) (21 0 30 0 nil 0) (30 0 31 0 nil 0) (28 0 31 1 nil 0) (24 1 31 2 nil 0) (26 1 31 3 nil 0) (32 0 31 4 nil 0) (20 0 31 5 nil 0) (55 0 34 0 nil 0) (45 0 34 1 nil 0) (41 1 34 2 nil 0) (43 1 34 3 nil 0) (44 0 34 4 ((om-make-point 581 521) (om-make-point 584 591) (om-make-point 321 591) (om-make-point 324 602)) 0) (36 0 35 0 nil 0) (57 0 35 1 nil 0) (50 1 35 2 nil 0) (52 1 35 3 nil 0) (56 0 35 4 nil 0) (54 0 36 0 nil 0) (34 0 46 1 nil 0) (36 0 55 1 nil 0) (35 0 58 1 nil 0))) 6.110001 nil "" (om-make-point 213 184) (om-make-point 1440 830)) (quote nil) (om-make-point 100 147) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 112 32) (quote "SCORE") "" (om-make-point 102 33) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 234 53) (quote "Combine voice scores. Combine poly scores.") "" (om-make-point 209 550) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "s-combine-exs 2" (om-load-patch-abs1 "s-combine-exs" (quote ((let ((box (om-load-boxcall (quote genfun) "S-COMBINE-POLYS" (quote cnmat:s-combine-polys) (quote ((om-load-inputfun (quote input-funbox) "a poly object" "POLY1" (list nil)) (om-load-inputfun (quote input-funbox) "a second poly object" "POLY2" (list nil)))) (om-make-point 516 368) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-COMBINE-VOICES" (quote cnmat:s-combine-voices) (quote ((om-load-inputfun (quote input-funbox) "a voice object" "VOICE1" (list nil)) (om-load-inputfun (quote input-funbox) "a second voice object" "VOICE2" (list nil)))) (om-make-point 45 238) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 241 193) (quote "Combine-voices: Joins one voice to another. Use this when the concat object won't work, i.e. when segments of music dont end tidly at the end of a bar. This object joins voices according to these rules: if the last rhythm is a rest then this last rest is deleted and the new voice is joined snug with the last event. The object takes tempo and legato from the first voice. It ouputs a voice object.") "" (om-make-point 145 252) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 322 151) (quote "Combine-polys: Joins one poly to another. Use this when the concat object won't work, i.e. when segments of music don't end tidly at the end of a bar. Joins voices in the poly according to these rules: if the last rhythm is a rest then this last rest is deleted and the new voice is joined snug with the last pitch. The object takes tempo and legato from the first voice. Outputs a poly object.") "" (om-make-point 842 453) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 3" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 438 448) (om-make-point 377 203) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (3.0 1)))) ((4 4) ((1 (1.0 3)) 1 1 (1 (1.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100 7100 8200)) :ldur (quote (273 273 273)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6700 7600)) :ldur (quote (273 273 273)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6600 7300)) :ldur (quote (409 409 409)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6800 8400 7600)) :ldur (quote (409 409 409 409)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 (1 (1.0 2 1)))) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 1 (1 (1.0 1)) (1 (3 1)))) ((4 4) ((1 (3.0 1)) 1.0 (1 (1.0 2 1)) (1 (1.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1.0 1)) (1 (3 1)) (1 (3.0 1)))) ((4 4) (1.0 (1 (1.0 2 1)) (1 (1.0 1)) (1 (1.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote (((0 0 0 0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0 0 1 0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0 0 0 1) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 204 46) (quote "Use reduce to combine many voices or many polys....") "" (om-make-point 426 651) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 653 42) (quote "Voices or polys that dont end at a barline cannot be easily combined well with the concat object.$In these instances, combine-voices and combine-polys objects may be able to assist.") "" (om-make-point 64 25) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 136 33) (quote "COMBINE POLYS") "" (om-make-point 424 79) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 136 33) (quote "COMBINE VOICES") "" (om-make-point 61 79) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 59 455) (om-make-point 253 85) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (3.0 1)))) ((4 4) ((1 (1.0 3)) 1 1 (1 (1.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100 7100 8200)) :ldur (quote (273 273 273)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6700 7600)) :ldur (quote (273 273 273)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6600 7300)) :ldur (quote (409 409 409)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6800 8400 7600)) :ldur (quote (409 409 409 409)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote (((0 0 0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 835 552) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 63 119) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100 7100 8200)) :ldur (quote (273 273 273)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6700 7600)) :ldur (quote (273 273 273)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6600 7300)) :ldur (quote (409 409 409)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6800 8400 7600)) :ldur (quote (409 409 409 409)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote (((0 0 0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 821 115) (om-make-point 382 217) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 (1 (1.0 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 1)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 1)) (1 (3 1)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 592 425) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 208 119) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 424 117) (om-make-point 382 217) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100 7100 8200)) :ldur (quote (273 273 273)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6700 7600)) :ldur (quote (273 273 273)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6600 7300)) :ldur (quote (409 409 409)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6800 8400 7600)) :ldur (quote (409 409 409 409)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 (1 (1.0 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 1)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 1)) (1 (3 1)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0 0 0 0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0 0 0 1) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 592 425) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 0 0 nil 0) (11 0 0 1 nil 0) (10 0 1 0 nil 0) (12 0 1 1 nil 0) (0 0 4 0 nil 0) (1 0 9 0 nil 0))) 6.110001 nil "" (om-make-point 254 24) (om-make-point 1387 824)) (quote nil) (om-make-point 90 546) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 234 53) (quote "Cuts-style score creation using a changeable tatum list.") "" (om-make-point 203 473) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "s-cuts2-ex 2" (om-load-patch-abs1 "s-cuts2-ex" (quote ((let ((box (om-load-boxcall (quote genfun) "S-CUTS2" (quote cnmat:s-cuts2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "list of lists of tatums for each voice" "TATUM" (list (list (list 1 (list 16))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 1541 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-CUTS2" (quote cnmat:s-cuts2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "list of lists of tatums for each voice" "TATUM" (list (list (list 1 (list 16))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 875 282) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-CUTS2" (quote cnmat:s-cuts2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "list of lists of tatums for each voice" "TATUM" (list (list (list 1 (list 16))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 258 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 220 22) (quote "Mode 2 (default) is \"rests\" mode.") "" (om-make-point 1380 43) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 24) (quote "tempo") "" (om-make-point 1845 148) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 24) (quote "pitches lists") "" (om-make-point 1726 148) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 24) (quote "tatum lists") "" (om-make-point 1586 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 25) (quote "meter") "" (om-make-point 1515 145) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 25) (quote "rhythms") "" (om-make-point 1381 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1384 660) (om-make-point 298 174) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote gf) (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 938 553) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "play evens" (om-load-patch-abs1 "play evens" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 206 466) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 108 421) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 230 325) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 146 76) (quote "build a list of the even voices only and output them to a poly") "" (om-make-point 307 347) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 219 59) (quote "take the total number of voices and divide by 2 because you only want to play the even voices") "" (om-make-point 310 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 174 305) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 183 355) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 254 150) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 215 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 202 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice list" 0 (om-make-point 5 45) "" "voice list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (10 0 1 0 nil 0) (6 0 1 1 nil 0) (5 0 6 0 nil 0) (8 0 6 1 nil 0) (2 0 6 2 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "voice list" nil))) (om-make-point 1384 579) nil (list (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil "play evens"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 225 34) (quote "PLAY ONLY EVEN VOICES") "" (om-make-point 1450 593) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 449 72) (quote "Use poly-player-cuts2 when you want to provide a changing tatum list.  In these cases, a tatum list must be provided for each voice. $Tatum list format = ((no. of measures (beat subdivision)))$For the moment, works only in sustain mode.") "" (om-make-point 1378 66) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 318 30) (quote "S-CUTS2 (Pulse Mode)") "" (om-make-point 1380 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1726 180) (om-make-point 115 66) (load-buffer-textfile (quote ("(6100 6200 6400)" "(5100 5200 5400)" "(4100 4200 4500)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1380 176) (om-make-point 132 63) (load-buffer-textfile (quote ("(1 5 7 9 10 12)" "(5 7 9 10 12 1)" "(7 9 10 12 1 5)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1585 176) (om-make-point 121 70) (load-buffer-textfile (quote ("((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 1847 188) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1516 185) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1384 350) (om-make-point 298 213) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 584 327) (om-make-point 1440 675) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1922 188) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 57 26) (quote "mode") "" (om-make-point 1916 148) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 449 72) (quote "Use poly-player-cuts2 when you want to provide a changing tatum list.  In these cases, a tatum list must be provided for each voice. $Tatum list format = ((no. of measures (beat subdivision)))$Mode 0 (default) is sustain mode.") "" (om-make-point 129 50) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 57 26) (quote "mode") "" (om-make-point 1274 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1280 187) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 742 349) (om-make-point 298 213) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 -1)) (1 (-3 1)) -1 (1 (-1 1 -2)))) ((4 4) (-1 (1 (-3 1)) -2)) ((4 4) ((1 (1 -2)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 -2)) (1 (-2 1 -1)) -1 (1 (1 -3)))) ((4 4) (-1 (1 (-2 1 -1)) -1 (1 (-3 1)))) ((4 4) (-2 (1 (-4 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 -2)) -1 (1 (1 -4)) -1)) ((4 4) ((1 (1 -2)) -1 (1 (-3 1 -1)) -1)) ((4 4) (-1 (1 (-3 1)) (1 (1 -4)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 105 23) (om-make-point 1440 675) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 874 184) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 1205 187) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 943 175) (om-make-point 121 70) (load-buffer-textfile (quote ("((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 738 175) (om-make-point 132 63) (load-buffer-textfile (quote ("(1 5 7 9 10 12)" "(5 7 9 10 12 1)" "(7 9 10 12 1 5)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1084 179) (om-make-point 115 66) (load-buffer-textfile (quote ("(6100 6200 6400)" "(5100 5200 5400)" "(4100 4200 4500)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 318 30) (quote "S-CUTS2 (Rests Mode)") "" (om-make-point 738 20) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 449 72) (quote "Use poly-player-cuts2 when you want to provide a changing tatum list.  In these cases, a tatum list must be provided for each voice. $Tatum list format = ((no. of measures (beat subdivision)))$For the moment, works only in sustain mode.") "" (om-make-point 736 65) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 225 34) (quote "PLAY ONLY EVEN VOICES") "" (om-make-point 808 592) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "play evens" (om-load-patch-abs1 "play evens" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 206 466) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 108 421) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 230 325) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 146 76) (quote "build a list of the even voices only and output them to a poly") "" (om-make-point 307 347) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 219 59) (quote "take the total number of voices and divide by 2 because you only want to play the even voices") "" (om-make-point 310 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 174 305) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 183 355) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 254 150) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 215 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 202 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice list" 0 (om-make-point 5 45) "" "voice list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (10 0 1 0 nil 0) (6 0 1 1 nil 0) (5 0 6 0 nil 0) (8 0 6 1 nil 0) (2 0 6 2 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "voice list" nil))) (om-make-point 742 578) nil (list (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 -1)) (1 (-3 1)) -1 (1 (-1 1 -2)))) ((4 4) (-1 (1 (-3 1)) -2)) ((4 4) ((1 (1 -2)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 -2)) (1 (-2 1 -1)) -1 (1 (1 -3)))) ((4 4) (-1 (1 (-2 1 -1)) -1 (1 (-3 1)))) ((4 4) (-2 (1 (-4 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 -2)) -1 (1 (1 -4)) -1)) ((4 4) ((1 (1 -2)) -1 (1 (-3 1 -1)) -1)) ((4 4) (-1 (1 (-3 1)) (1 (1 -4)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil "play evens"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 742 659) (om-make-point 298 174) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 -1)) (1 (-3 1)) -1 (1 (-1 1 -2)))) ((4 4) (-1 (1 (-3 1)) -2)) ((4 4) ((1 (1 -2)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 -2)) (1 (-2 1 -1)) -1 (1 (1 -3)))) ((4 4) (-1 (1 (-2 1 -1)) -1 (1 (-3 1)))) ((4 4) (-2 (1 (-4 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 -2)) -1 (1 (1 -4)) -1)) ((4 4) ((1 (1 -2)) -1 (1 (-3 1 -1)) -1)) ((4 4) (-1 (1 (-3 1)) (1 (1 -4)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote gf) (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 938 553) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 25) (quote "rhythms") "" (om-make-point 739 146) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 25) (quote "meter") "" (om-make-point 873 144) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 24) (quote "tatum lists") "" (om-make-point 944 146) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 24) (quote "pitches lists") "" (om-make-point 1084 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 24) (quote "tempo") "" (om-make-point 1203 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 24) (quote "tempo") "" (om-make-point 590 150) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 24) (quote "pitches lists") "" (om-make-point 473 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 24) (quote "tatum lists") "" (om-make-point 333 146) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 25) (quote "meter") "" (om-make-point 262 144) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 25) (quote "rhythms") "" (om-make-point 128 146) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 131 659) (om-make-point 298 174) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 2)) (1 (3.0 1)) 1.0 (1 (1.0 3)))) ((4 4) (1.0 (1 (3.0 1)) 2.0)) ((4 4) (3 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) (1 (1 (1.0 1)) 1.0 1)) ((4 4) (1.0 (1 (1.0 1)) 1.0 (1 (3.0 1)))) ((4 4) (2.0 (1 (4.0 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) (2 2)) ((4 4) (2 (1 (3.0 2)) 1.0)) ((4 4) (1.0 (1 (3.0 1)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (218)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote gf) (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 938 553) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "play evens" (om-load-patch-abs1 "play evens" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 206 466) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 108 421) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 230 325) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 146 76) (quote "build a list of the even voices only and output them to a poly") "" (om-make-point 307 347) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 219 59) (quote "take the total number of voices and divide by 2 because you only want to play the even voices") "" (om-make-point 310 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 174 305) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 183 355) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 254 150) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 215 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 202 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice list" 0 (om-make-point 5 45) "" "voice list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (10 0 1 0 nil 0) (6 0 1 1 nil 0) (5 0 6 0 nil 0) (8 0 6 1 nil 0) (2 0 6 2 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "voice list" nil))) (om-make-point 131 578) nil (list (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 2)) (1 (3.0 1)) 1.0 (1 (1.0 3)))) ((4 4) (1.0 (1 (3.0 1)) 2.0)) ((4 4) (3 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) (1 (1 (1.0 1)) 1.0 1)) ((4 4) (1.0 (1 (1.0 1)) 1.0 (1 (3.0 1)))) ((4 4) (2.0 (1 (4.0 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) (2 2)) ((4 4) (2 (1 (3.0 2)) 1.0)) ((4 4) (1.0 (1 (3.0 1)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (218)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil "play evens"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 225 34) (quote "PLAY ONLY EVEN VOICES") "" (om-make-point 197 592) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 220 22) (quote "Mode 1 (default) is \"rests\" mode.") "" (om-make-point 738 42) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 234 34) (quote "S-CUTS2") "" (om-make-point 127 20) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 473 179) (om-make-point 115 66) (load-buffer-textfile (quote ("(6100 6200 6400)" "(5100 5200 5400)" "(4100 4200 4500)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 127 175) (om-make-point 132 63) (load-buffer-textfile (quote ("(1 5 7 9 10 12)" "(5 7 9 10 12 1)" "(7 9 10 12 1 5)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 332 175) (om-make-point 121 70) (load-buffer-textfile (quote ("((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 594 187) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 263 184) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 131 349) (om-make-point 298 213) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 2)) (1 (3.0 1)) 1.0 (1 (1.0 3)))) ((4 4) (1.0 (1 (3.0 1)) 2.0)) ((4 4) (3 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) (1 (1 (1.0 1)) 1.0 1)) ((4 4) (1.0 (1 (1.0 1)) 1.0 (1 (3.0 1)))) ((4 4) (2.0 (1 (4.0 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) (2 2)) ((4 4) (2 (1 (3.0 2)) 1.0)) ((4 4) (1.0 (1 (3.0 1)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (218)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 581 421) (om-make-point 1440 675) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 1 0 0 nil 0) (18 0 0 1 nil 0) (16 1 0 2 nil 0) (14 1 0 3 nil 0) (17 0 0 4 nil 0) (20 0 0 5 nil 0) (29 1 1 0 nil 0) (26 0 1 1 nil 0) (28 1 1 2 nil 0) (30 1 1 3 nil 0) (27 0 1 4 nil 0) (24 0 1 5 nil 0) (52 1 2 0 nil 0) (55 0 2 1 nil 0) (53 1 2 2 nil 0) (51 1 2 3 nil 0) (54 0 2 4 nil 0) (10 0 9 1 nil 0) (19 1 10 0 nil 0) (0 0 19 1 nil 0) (1 0 25 1 nil 0) (25 1 34 0 nil 0) (34 0 35 1 nil 0) (47 0 46 1 nil 0) (56 1 47 0 nil 0) (2 0 56 1 nil 0))) 6.110001 nil "" (om-make-point 0 38) (om-make-point 1440 836)) (quote nil) (om-make-point 101 470) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 234 53) (quote "Cuts-style score creation.") "" (om-make-point 206 398) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "s-cuts-ex 2" (om-load-patch-abs1 "s-cuts-ex" (quote ((let ((box (om-load-boxcall (quote genfun) "S-CUTS 2" (quote cnmat:s-cuts) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 744 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-CUTS" (quote cnmat:s-cuts) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 223 228) (om-make-point 112 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 637 202) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 114 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 52 21) (quote "mode") "" (om-make-point 1006 107) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 52 25) (quote "tempo") "" (om-make-point 945 107) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 85 35) (quote "pitch list") "" (om-make-point 862 106) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 47 23) (quote "tatum") "" (om-make-point 798 106) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 50 27) (quote "meter") "" (om-make-point 751 106) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 75 23) (quote "durations") "" (om-make-point 638 107) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 52 21) (quote "mode") "" (om-make-point 486 110) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 52 25) (quote "tempo") "" (om-make-point 425 110) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 85 35) (quote "pitch list") "" (om-make-point 342 109) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 47 23) (quote "tatum") "" (om-make-point 278 109) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 50 27) (quote "meter") "" (om-make-point 231 109) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 75 23) (quote "durations") "" (om-make-point 118 110) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 225 34) (quote "PLAY ONLY EVEN VOICES") "" (om-make-point 230 533) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "play evens" (om-load-patch-abs1 "play evens" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 206 466) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 108 421) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 230 325) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 146 76) (quote "build a list of the even voices only and output them to a poly") "" (om-make-point 307 347) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 219 59) (quote "take the total number of voices and divide by 2 because you only want to play the even voices") "" (om-make-point 310 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 174 305) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 183 355) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 254 150) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 215 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 202 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice list" 0 (om-make-point 5 45) "" "voice list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (10 0 1 0 nil 0) (6 0 1 1 nil 0) (5 0 6 0 nil 0) (8 0 6 1 nil 0) (2 0 6 2 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "voice list" nil))) (om-make-point 152 521) nil (list (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 2 1)) (1 (1.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil "play evens"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 85 605) (om-make-point 298 174) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 2 1)) (1 (1.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 22) (om-make-point 938 553) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 225 34) (quote "CUT-IN PLAYER (W/ RESTS)") "" (om-make-point 597 64) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 867 135) (om-make-point 70 50) (load-buffer-textfile (quote ("(8000 8300)" "(7500 7700) " "(6500 6200)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1009 143) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 643 144) (om-make-point 59 30) (list 1 2 3) "(1 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 953 142) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 810 143) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 756 144) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 605 321) (om-make-point 289 158) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 -1 1)) (1 (-1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 -1 1 -1)) (1 (-1 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 -2 1)) (1 (1 -1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 614 499) (om-make-point 712 140) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 225 34) (quote "CUT-IN PLAYER (NO RESTS)") "" (om-make-point 74 66) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 344 134) (om-make-point 70 50) (load-buffer-textfile (quote ("(8000 8300)" "(7500 7700) " "(6500 6200)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 486 141) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 120 143) (om-make-point 59 30) (list 1 2 3) "(1 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 430 140) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 287 142) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 233 143) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 85 320) (om-make-point 289 158) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 2 1)) (1 (1.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 614 499) (om-make-point 712 140) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (25 0 0 1 nil 0) (24 0 0 2 nil 0) (20 1 0 3 nil 0) (23 0 0 4 nil 0) (21 0 0 5 nil 0) (3 0 1 0 nil 0) (33 0 1 1 nil 0) (32 0 1 2 nil 0) (28 1 1 3 nil 0) (31 0 1 4 nil 0) (29 0 1 5 nil 0) (22 0 2 0 nil 0) (30 0 3 0 nil 0) (34 1 17 0 nil 0) (17 0 18 1 nil 0) (0 0 26 1 nil 0) (1 0 34 1 nil 0))) 6.110001 nil "" (om-make-point 200 78) (om-make-point 1115 796)) (quote nil) (om-make-point 104 390) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 234 53) (quote "Score conversion from poly to voice.") "" (om-make-point 205 321) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "s-poly-to-voice-ex 2" (om-load-patch-abs1 "s-poly-to-voice-ex" (quote ((let ((box (om-load-boxcall (quote genfun) "S-POLY->VOICE" (quote cnmat:s-poly->voice) (quote ((om-load-inputfun (quote input-funbox) "A poly object--make sure that it is locked." "MYPOLY" (list nil)) (om-load-inputfun (quote input-funbox) "mode:0 = notes truncated on following attacks; mode: 1 = notes sustained for original durations." "MODE" 0))) (om-make-point 602 487) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY->VOICE" (quote cnmat:s-poly->voice) (quote ((om-load-inputfun (quote input-funbox) "A poly object--make sure that it is locked." "MYPOLY" (list nil)))) (om-make-point 183 489) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 55) (quote "Mode=1$is the sustain version") "" (om-make-point 682 452) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 645 459) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 603 582) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 (1 (1 1)))) (1 (1 (3 ((2 (1 1)) 1)))) (1 (1 (3 (1 (2 (1 1)))))) (1 (1 (2 (4 1.0 3))))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100 8100 7400 6700)) :ldur (quote (273 273 273 273)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 8100 7400 6100)) :ldur (quote (136 136 136 136)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100 7400 6100 6700)) :ldur (quote (136 136 136 136)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 8100 7400 6700)) :ldur (quote (136 136 136 136)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100 6700 7400 6100)) :ldur (quote (136 136 136 136)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 8100 7400 6700)) :ldur (quote (136 136 136 136)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100 7400 6100 6700)) :ldur (quote (136 136 136 136)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 8100 7400 6700)) :ldur (quote (136 136 136 136)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 8100 6700 6100)) :ldur (quote (136 136 136 136)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100 7400 6100 6700)) :ldur (quote (136 136 136 136)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100 6700 6100 7400)) :ldur (quote (136 136 136 136)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 8100 7400 6100)) :ldur (quote (182 182 182 182)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 8100 6100 6700)) :ldur (quote (182 182 182 182)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote ((8100 7400 6700) (8100 7400 6100) (8100 6100 6700) (8100 7400 6700) (6700 7400 6100) (6100 8100 7400) (7400 6100 6700) (8100 7400 6700) (8100 6700 6100) (7400 6100 6700) (8100 6700 6100) (8100 7400 6100) (6100) nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 379 143) (quote "An object that makes a simple conversion from a poly to a voice.  $$Takes in a locked poly and returns a voice.$$Sustained pitches in each voice are NOT accounted for and are truncated on the next attack.") "" (om-make-point 96 79) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 122 30) (quote "POLY->VOICE$$") "" (om-make-point 96 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 204 582) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (2 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100 6700 6100 7400)) :ldur (quote (273 273 273 273)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 100 234) (om-make-point 382 217) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 (1 (1.0 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 1)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 1)) (1 (3 1)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 592 425) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (3 0 0 1 nil 0) (8 0 1 0 nil 0) (0 0 4 0 nil 0) (1 0 7 0 nil 0))) 6.110001 nil "" (om-make-point 200 178) (om-make-point 816 696)) (quote nil) (om-make-point 79 306) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 402 58) (quote "Creates scores from input $(for use with a changing tatum).") "" (om-make-point 200 155) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 398 51) (quote "Creates scores from input$(for use with a static tatum).") "" (om-make-point 201 80) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "s-poly-ex 2" (om-load-patch-abs1 "s-poly-ex" (quote ((let ((box (om-load-boxcomment "comment 9" (om-make-point 343 121) (quote "In this mode, sublists in the rhythms are matched with sublists in the pitches. Each voice must contain equal sublists for rhythms and pitches. The resulting pitches rotate through the sublist of pitches provided until the sublist rhythm is exhausted.  Chords are designated as further sublists within.  ") "" (om-make-point 1439 95) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 143 26) (quote "rhythms") "" (om-make-point 1439 232) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1732 255) (om-make-point 407 154) (load-buffer-textfile (quote ("" "((6000) (6500 (6900 6800)) (5800) (6000 6500) (5900))" "((6200 6700) (6000) (6200 6700) (6000) (6200) (5800))" "((6400 6900) (6300) (6400 6900) (6300) (6800) (6500))" "((6600 7100) (6500) (6600 7100) (6500) (6200) (5400))" "((6800 7300) (7700 (7700 7200)) (6800 7300) (7700) (5200) (5100))" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1440 259) (om-make-point 276 139) (load-buffer-textfile (quote ("((1 2 6 10 11) (1 3 6 8 12) (2 3 4 10 11) (2 3 6 7 12) (3 4 6 8 9) (3 5 6 7 9))" "((2 6 10 11 1) (3 6 8 12 1) (3 4 10 11 2) (3 6 7 12 2) (4 6 8 9 3) (5 6 7 9 3))" "((6 10 11 1 2) (6 8 12 1 3) (4 10 11 2 3) (6 7 12 2 3) (6 8 9 3 4) (6 7 9 3 5))" "((10 11 1 2 6) (8 12 1 3 6) (10 11 2 3 4) (7 12 2 3 6) (8 9 3 4 6) (7 9 3 5 6))" "((11 1 2 6 10) (12 1 3 6 8) (11 2 3 4 10) (12 2 3 6 7) (9 3 4 6 8) (9 3 5 6 7))" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 3" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1456 586) (om-make-point 639 237) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 2 1)) 1.0 (1 (1.0 3)) 1.0)) ((4 4) ((1 (3.0 1)) 2.0 (1 (2.0 1 1)))) ((4 4) ((1 (1.0 1)) 1.0 2)) ((4 4) (3 (1 (1 1)))) ((4 4) ((1 (1.0 3)) (1 (1.0 3)) 1.0 (1 (3.0 1)))) ((4 4) (2.0 (1 (1.0 1)) (1 (3 1)))) ((4 4) (1.0 (1 (1.0 3)) 1.0 1)) ((4 4) (2.0 (1 (3 1)) (1 (3.0 1)))) ((4 4) (1.0 (1 (1.0 3)) 1.0 (1 (1.0 3)))) ((4 4) (1.0 (1 (1.0 1)) (1 (1.0 3)) (1 (1.0 1)))) ((4 4) (1.0 1 (1 (3.0 1)) 1.0)) ((4 4) (1.0 -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (1091 1091)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 1)) 1.0 2)) ((4 4) ((1 (1.0 1)) 2.0 (1 (1.0 1 2)))) ((4 4) ((1 (1.0 3)) (1 (3.0 1)) 1.0 (1 (3.0 1)))) ((4 4) (2.0 (1 (3.0 1)) (1 (3 1)))) ((4 4) ((1 (3.0 1)) 2.0 (1 (1.0 3)))) ((4 4) (2.0 (1 (1 1)) (1 (1.0 3)))) ((4 4) ((1 (3.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 1 1)) ((4 4) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((4 4) ((1 (3.0 1)) (1 (1.0 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 3)) 1.0 2)) ((4 4) ((1 (1.0 3)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) (1 (1 (1.0 1)) 2.0)) ((4 4) (2 (1 (3.0 1)) (1 (1 1)))) ((4 4) (1.0 2 1)) ((4 4) (2.0 (1 (1 3)) 1)) ((4 4) (2 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 2 1)) (1 (1.0 1)) 1.0)) ((4 4) (1 (1 (3.0 1)) 2.0)) ((4 4) ((1 (3.0 1)) (1 (1.0 3)) 1 (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 1)) 1.0 (1 (3.0 1)))) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) 1.0 1)) ((4 4) ((1 (3.0 1)) 2.0 (1 (3 1)))) ((4 4) (1.0 -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) (2 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1 2)) 1 (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) ((1 (2.0 1 1)) (1 (1.0 1)) 1.0 1)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) ((1 (1.0 2 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 3)) 2.0 (1 (1.0 2 1)))) ((4 4) ((1 (1.0 1)) 1.0 2)) ((4 4) (2 (1 (1.0 3)) 1)) ((4 4) (1 (1 (1.0 1)) 1.0 (1 (1.0 3)))) ((4 4) (1.0 (1 (1.0 1)) (1 (1.0 3)) (1 (1.0 1)))) ((4 4) (1.0 -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) (2 (1 (3.0 1)) (1 (1 1)))) ((4 4) (1.0 2 (1 (1.0 1)))) ((4 4) (2.0 (1 (2.0 1 1)) (1 (1.0 1)))) ((4 4) (1.0 2 1)) ((4 4) (1.0 (1 (3.0 1)) (1 (1.0 3)) 1)) ((4 4) (2 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) (1 (3 1)) 1.0)) ((4 4) ((1 (1.0 3)) 1.0 2)) ((4 4) ((1 (1.0 3)) 1 1 (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 1)) 1.0 (1 (3.0 1)))) ((4 4) ((1 (1.0 1)) (1 (3.0 1)) 1.0 (1 (1.0 3)))) ((4 4) (1.0 -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (273 273)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 544 372) (om-make-point 531 590) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY 3" (quote cnmat:s-poly) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 1539 474) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 98 24) (quote "pitches") "" (om-make-point 1729 226) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 160 45) (quote "S-POLY (MODE 2) SUBLISTS SUSTAIN") "" (om-make-point 1440 51) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lisp-codebox-versions" (om-load-patch-abs1 "lisp-codebox-versions" (quote ((let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 127 155) (om-make-point 66 30) (list (quote rhythms)) "(rhythms)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 201 154) (om-make-point 59 30) (list (quote pitches)) "(pitches)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 126 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "p-mapcar-ver" (om-load-lisp-abspatch "p-mapcar-ver" 6.110001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (rhythms pitches) $$(let ((current-list '()))$$     (loop for sub-rhythm in rhythms for sub-voice-pitch in pitches do$            (push (first-n (flat (repeat-n sub-voice-pitch (length sub-rhythm)) 1) (length sub-rhythm)) current-list))$$(reverse (flat current-list 1))$$$)$)$$$") (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHMS" nil) (om-load-inputfun (quote input-funbox) "" "PITCHES" nil))) (om-make-point 13 145) nil (list nil) "l" "p-mapcar-ver"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "p-map3" (om-load-lisp-abspatch "p-map3" 6.110001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (rhythms pitches) $$(let ((final-list '())$      (current-list '()))$$(loop for voice-rhythm in rhythms for voice-pitch in pitches do$      (setq current-list '())$      (loop for sub-rhythm in voice-rhythm for sub-voice-pitch in voice-pitch do$            (push (first-n (flat (repeat-n sub-voice-pitch (length sub-rhythm)) 1) (length sub-rhythm)) current-list))$      (push (reverse (flat current-list 1)) final-list))$$(reverse final-list)$$$)$)$$$") (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHMS" nil) (om-load-inputfun (quote input-funbox) "" "PITCHES" nil))) (om-make-point 19 54) nil (list (list (list 6000 6000 6000 6000 6000 6500 (list 6900 6800) 6500 (list 6900 6800) 6500 5800 5800 5800 5800 5800 6000 6500 6000 6500 6000 5900 5900 5900 5900 5900) (list 6200 6700 6200 6700 6200 6000 6000 6000 6000 6000 6200 6700 6200 6700 6200 6000 6000 6000 6000 6000 6200 6200 6200 6200 6200 5800 5800 5800 5800 5800) (list 6400 6900 6400 6900 6400 6300 6300 6300 6300 6300 6400 6900 6400 6900 6400 6300 6300 6300 6300 6300 6800 6800 6800 6800 6800 6500 6500 6500 6500 6500) (list 6600 7100 6600 7100 6600 6500 6500 6500 6500 6500 6600 7100 6600 7100 6600 6500 6500 6500 6500 6500 6200 6200 6200 6200 6200 5400 5400 5400 5400 5400) (list 6800 7300 6800 7300 6800 7700 (list 7700 7200) 7700 (list 7700 7200) 7700 6800 7300 6800 7300 6800 7700 7700 7700 7700 7700 5200 5200 5200 5200 5200 5100 5100 5100 5100 5100))) nil "p-map3"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (0 0 2 1 nil 0) (1 0 2 2 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 2115 755) nil nil nil "lisp-codebox-versions"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1626 450) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 343 121) (quote "In this mode, sublists in the rhythms are matched with sublists in the pitches. Each voice must contain equal sublists for rhythms and pitches. The resulting pitches rotate through the sublist of pitches provided until the sublist rhythm is exhausted.  Chords are designated as further sublists within.  ") "" (om-make-point 2247 89) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 143 26) (quote "rhythms") "" (om-make-point 2247 226) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2540 249) (om-make-point 407 154) (load-buffer-textfile (quote ("" "((6000) (6500 (6900 6800)) (5800) (6000 6500) (5900))" "((6200 6700) (6000) (6200 6700) (6000) (6200) (5800))" "((6400 6900) (6300) (6400 6900) (6300) (6800) (6500))" "((6600 7100) (6500) (6600 7100) (6500) (6200) (5400))" "((6800 7300) (7700 (7700 7200)) (6800 7300) (7700) (5200) (5100))" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2248 253) (om-make-point 276 139) (load-buffer-textfile (quote ("((1 2 6 10 11) (1 3 6 8 12) (2 3 4 10 11) (2 3 6 7 12) (3 4 6 8 9) (3 5 6 7 9))" "((2 6 10 11 1) (3 6 8 12 1) (3 4 10 11 2) (3 6 7 12 2) (4 6 8 9 3) (5 6 7 9 3))" "((6 10 11 1 2) (6 8 12 1 3) (4 10 11 2 3) (6 7 12 2 3) (6 8 9 3 4) (6 7 9 3 5))" "((10 11 1 2 6) (8 12 1 3 6) (10 11 2 3 4) (7 12 2 3 6) (8 9 3 4 6) (7 9 3 5 6))" "((11 1 2 6 10) (12 1 3 6 8) (11 2 3 4 10) (12 2 3 6 7) (9 3 4 6 8) (9 3 5 6 7))" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 2264 580) (om-make-point 639 237) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 1 -1 1)) -1 (1 (-1 1 -2)) -1)) ((4 4) ((1 (-3 1)) -2 (1 (-2 1 1)))) ((4 4) ((1 (-2 1 -1)) -1 (1 (1 -3)) -1)) ((4 4) ((1 (1 -3)) -2 (1 (1 -1 1 -1)))) ((4 4) ((1 (-1 1 -2)) (1 (-1 1 -2)) -1 (1 (-3 1)))) ((4 4) (-2 (1 (-2 1 -1)) (1 (1 -2 1)))) ((4 4) (-1 (1 (-1 1 -2)) -1 (1 (1 -3)))) ((4 4) (-2 (1 (1 -2 1)) (1 (-3 1)))) ((4 4) (-1 (1 (-1 1 -2)) -1 (1 (-1 1 -2)))) ((4 4) (-1 (1 (-2 1 -1)) (1 (-1 1 -2)) (1 (-2 1 -1)))) ((4 4) (-1 (1 (1 -3)) (1 (-3 1)) -1)) ((4 4) (-4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 -1 1 -1)) -1 (1 (1 -3)) -1)) ((4 4) ((1 (-2 1 -1)) -2 (1 (-1 1 1 -1)))) ((4 4) ((1 (-1 1 -2)) (1 (-3 1)) -1 (1 (-3 1)))) ((4 4) (-2 (1 (-3 1)) (1 (1 -2 1)))) ((4 4) ((1 (-3 1)) -2 (1 (-1 1 -2)))) ((4 4) (-2 (1 (1 -1 1 -1)) (1 (-1 1 -2)))) ((4 4) ((1 (-3 1)) -1 (1 (-2 1 -1)) -1)) ((4 4) (-1 (1 (-2 1 -1)) (1 (1 -3)) (1 (1 -3)))) ((4 4) ((1 (-2 1 -1)) -1 (1 (-2 1 -1)) -1)) ((4 4) ((1 (-3 1)) (1 (-2 1 -1)) (1 (-3 1)) -1)) ((4 4) ((1 (-1 1 -2)) -1 (1 (1 -3)) -1)) ((4 4) ((1 (-1 1 -2)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 -3)) (1 (-2 1 -1)) -2)) ((4 4) ((1 (1 -3)) -1 (1 (-3 1)) (1 (1 -1 1 -1)))) ((4 4) (-1 (1 (1 -3)) -1 (1 (1 -3)))) ((4 4) (-2 (1 (1 1 -2)) (1 (1 -3)))) ((4 4) ((1 (1 -3)) -1 (1 (-2 1 -1)) -1)) ((4 4) (-1 (1 (-1 1 -1 1)) (1 (-2 1 -1)) -1)) ((4 4) ((1 (1 -3)) (1 (-3 1)) -2)) ((4 4) ((1 (-3 1)) (1 (-1 1 -2)) (1 (1 -3)) (1 (-2 1 -1)))) ((4 4) (-1 (1 (-2 1 -1)) -1 (1 (-3 1)))) ((4 4) ((1 (-2 1 -1)) (1 (-2 1 -1)) -1 (1 (1 -3)))) ((4 4) ((1 (-3 1)) -2 (1 (1 -2 1)))) ((4 4) (-4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 -3)) -1 (1 (-2 1 -1)) -1)) ((4 4) (-1 (1 (-1 1 1 -1)) (1 (1 -3)) (1 (-2 1 -1)))) ((4 4) (-1 (1 (-2 1 -1)) -2)) ((4 4) ((1 (-2 1 1)) (1 (-2 1 -1)) -1 (1 (1 -3)))) ((4 4) (-1 (1 (-2 1 -1)) -2)) ((4 4) ((1 (-1 1 -1 1)) (1 (-2 1 -1)) (1 (-2 1 -1)) -1)) ((4 4) ((1 (-1 1 -2)) -2 (1 (-1 1 -1 1)))) ((4 4) ((1 (-2 1 -1)) -1 (1 (1 -3)) -1)) ((4 4) ((1 (1 -3)) -1 (1 (-1 1 -2)) (1 (1 -3)))) ((4 4) ((1 (1 -3)) (1 (-2 1 -1)) -1 (1 (-1 1 -2)))) ((4 4) (-1 (1 (-2 1 -1)) (1 (-1 1 -2)) (1 (-2 1 -1)))) ((4 4) (-4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (12 (((4 4) ((1 (1 -3)) -1 (1 (-3 1)) (1 (1 -1 1 -1)))) ((4 4) (-1 (1 (1 -3)) -1 (1 (-2 1 -1)))) ((4 4) (-2 (1 (-2 1 1)) (1 (-2 1 -1)))) ((4 4) (-1 (1 (1 -3)) -1 (1 (1 -3)))) ((4 4) (-1 (1 (-3 1)) (1 (-1 1 -2)) (1 (1 -3)))) ((4 4) ((1 (1 -3)) -1 (1 (-2 1 -1)) -1)) ((4 4) (-1 (1 (-2 1 -1)) (1 (1 -2 1)) -1)) ((4 4) ((1 (-1 1 -2)) -1 (1 (1 -3)) -1)) ((4 4) ((1 (-1 1 -2)) (1 (1 -3)) (1 (1 -3)) (1 (-2 1 -1)))) ((4 4) (-1 (1 (-2 1 -1)) -1 (1 (-3 1)))) ((4 4) ((1 (-2 1 -1)) (1 (-3 1)) -1 (1 (-1 1 -2)))) ((4 4) (-4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 909 23) (om-make-point 531 590) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 98 24) (quote "pitches") "" (om-make-point 2538 226) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 160 45) (quote "S-POLY (MODE 3) SUBLISTS RESTS") "" (om-make-point 2248 45) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY 2" (quote cnmat:s-poly) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 2347 468) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 2434 444) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-VOICE" (quote cnmat:s-voice) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 100))) (om-make-point 1069 694) (om-make-point 123 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY" (quote cnmat:s-poly) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 586 556) (om-make-point 103 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY" (quote cnmat:s-poly) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 997 202) (om-make-point 103 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY" (quote cnmat:s-poly) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 566 118) (om-make-point 103 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS 2" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 975 650) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 148 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 206 54) (quote "Rotations->voice object reduces the output to one voice.") "" (om-make-point 965 535) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 976 605) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1068 606) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1122 607) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1257 605) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1181 566) (om-make-point 63 69) (list (list 6100) (list 6700) (list 7400) (list 8100)) "((6100)$(6700)$(7400)$(8100))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 1048 781) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (2 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100 6700 6100 7400)) :ldur (quote (300 300 300 300)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 150 65) (quote "mode argument set to 1 (\"rests\" output)") "" (om-make-point 1220 63) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1237 131) (om-make-point 28 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 988 295) (om-make-point 382 231) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 -1 1 -1)) (1 (-1 1 -2)) (1 (-1 1 -2)) (1 (-3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 -2 1)) (1 (-3 1)) -1 (1 (-1 1 -1 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 -3)) (1 (1 -3)) (1 (-2 1 -1)) (1 (1 -2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 -3)) (1 (-2 1 -1)) (1 (1 -2 1)) (1 (-3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 592 425) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 981 134) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1035 135) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1094 82) (om-make-point 63 82) (list (list 6100) (list 6700) (list 7400) (list 8100) (list 8800)) "((6100)$(6700)$(7400)$(8100)$(8800))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1170 133) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 154 47) (quote "rotations->poly from get-rotations object") "" (om-make-point 1121 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 199 66) (quote "Use optional mode argument set to 1 to select \"rests\" output") "" (om-make-point 1033 10) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 154 47) (quote "rotations->poly from r-substitute object") "" (om-make-point 702 574) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 675 465) (om-make-point 63 69) (list (list 6100) (list 6700) (list 7400) (list 8100)) "((6100)$(6700)$(7400)$(8100))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 751 505) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 616 507) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 562 506) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 569 667) (om-make-point 382 217) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (1.0 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) (1 (3.0 1)) (1 (1.0 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1 1)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1 1)) (1 (3 1)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 592 425) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 154 47) (quote "rotations->poly from get-rotations object") "" (om-make-point 682 131) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 731 62) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 655 11) (om-make-point 63 82) (list (list 6100) (list 6700) (list 7400) (list 8100) (list 8800)) "((6100)$(6700)$(7400)$(8100)$(8800))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 596 64) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 542 63) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 549 224) (om-make-point 382 217) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 (1 (1.0 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 1)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 1)) (1 (3 1)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 592 425) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 18 480) (om-make-point 447 158) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 4 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 4 2 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 4 2 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 2 2 3 4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 183 391) (om-make-point 48 30) (list 4 2) "(4 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 157 360) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-SUBSTITUTE" (quote cnmat::r-substitute) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "VAL" "VAL" nil) (om-load-inputfun (quote input-funbox) "SUBS" "SUBS" (list 4 2)))) (om-make-point 133 422) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 44 189) (om-make-point 431 151) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 150 100) (om-make-point 250 280))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 149 44) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 4 1 nil 0) (3 1 5 0 nil 0) (2 1 5 3 nil 0) (9 0 5 5 nil 0) (17 0 14 1 nil 0) (13 1 17 0 nil 0) (12 1 17 3 nil 0) (18 0 17 5 nil 0) (23 0 19 0 nil 0) (27 0 19 1 nil 0) (28 0 19 2 nil 0) (30 0 19 3 nil 0) (29 0 19 4 nil 0) (53 0 20 0 nil 0) (45 0 20 1 nil 0) (44 0 20 2 nil 0) (42 0 20 3 nil 0) (43 0 20 4 nil 0) (24 0 21 0 nil 0) (35 0 21 1 nil 0) (36 0 21 2 nil 0) (37 0 21 3 nil 0) (38 0 21 4 nil 0) (33 0 21 5 nil 0) (24 0 22 0 nil 0) (51 0 22 1 nil 0) (50 0 22 2 nil 0) (49 0 22 3 nil 0) (48 0 22 4 nil 0) (26 0 23 0 nil 0) (58 0 24 0 nil 0) (19 0 31 0 nil 0) (21 0 34 1 nil 0) (20 0 46 1 nil 0) (22 0 52 1 nil 0) (56 0 53 0 nil 0) (57 0 56 0 nil 0) (55 0 56 1 nil 0) (54 0 56 2 nil 0) (24 0 57 1 nil 0))) 6.110001 nil "" (om-make-point 0 23) (om-make-point 1440 851)) (quote nil) (om-make-point 104 75) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.110001 nil "" (om-make-point 228 41) (om-make-point 515 829)) (quote nil) (om-make-point 86 326) nil nil nil "SCORE"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "WORKSPACE" (om-load-patch-abs1 "WORKSPACE" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 432 55) (quote "Test version of tatum-mapping.") "" (om-make-point 275 276) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-tatum-mapping-test 2" (om-load-patch-abs1 "r-tatum-mapping-test" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 614 417) (om-make-point 49 30) (list 1/6) "(1/6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 697 519) (om-make-point 431 140) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (2 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 87 115) (om-make-point 384 63) (load-buffer-textfile (quote ("(1 2 3 4 5 6 8 10 12 15 20)" "(1 2 3 4 5 6 8 10 12 15 20)" "(1 2 3 4 5 6 8 10 12 15 20)" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-tatum-mapping-demo" (om-load-patch-abs1 "r-tatum-mapping-demo" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 316 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 293 307) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 260 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 247 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tatum-mapping" (om-load-lisp-abspatch "tatum-mapping" 6.110001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (mylist) $$(let ((final-list '()))$$(loop for elem in mylist do$      (cond ((eql elem 1) (push '(1 (4)) final-list))$            ((eql elem 2) (push '(1 (8)) final-list))$            ((eql elem 3) (push '(1 (12)) final-list))$            ((eql elem 4) (push '(1 (16)) final-list))$            ((eql elem 5) (push '(1 (20)) final-list))$            ((eql elem 6) (push '(1 (24)) final-list))$            ((eql elem 8) (push '(1 (32)) final-list))$            ((eql elem 10) (push '(1 (40)) final-list))$            ((eql elem 12) (push '(2 (6)) final-list))$            ((eql elem 15) (push '(1 (2)) final-list))$            ((eql elem 20) (push '(1 (1)) final-list))$            (t (push 'nil final-list)))$            )$$$(list (reverse final-list))$)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "MYLIST" nil))) (om-make-point 113 181) nil (list nil) "l" "tatum-mapping"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 14 480) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "output-tatums" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "rhythm-list" 0 (om-make-point 5 45) "" "rhythm-list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 3 1 nil 0) (0 0 5 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "list" nil))) (om-make-point 169 225) nil (list (list (list (list 1 (list 4)) (list 1 (list 8)) (list 1 (list 12)) (list 1 (list 16)) (list 1 (list 20)) (list 1 (list 24)) (list 1 (list 32)) (list 1 (list 40)) (list 2 (list 6)) (list 1 (list 2)) (list 1 (list 1)) (list 1 (list 4)) (list 1 (list 8)) (list 1 (list 12)) (list 1 (list 16)) (list 1 (list 20)) (list 1 (list 24)) (list 1 (list 32)) (list 1 (list 40)) (list 2 (list 6)) (list 1 (list 2)) (list 1 (list 1)) (list 1 (list 4)) (list 1 (list 8)) (list 1 (list 12)) (list 1 (list 16)) (list 1 (list 20)) (list 1 (list 24)) (list 1 (list 32)) (list 1 (list 40)) (list 2 (list 6)) (list 1 (list 2)) (list 1 (list 1))))) nil "r-tatum-mapping-demo"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 409 58) (quote "Maps numbers to tatums according to a key.  See the key below.$Resulting list may be input into s-poly objects. N.B. Input to this function must be a list of lists!") "" (om-make-point 82 52) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 242 32) (quote "TATUM MAPPING DRAFT OBJECT") "" (om-make-point 81 27) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 16 313) (om-make-point 831 55) (load-buffer-textfile (quote ("((1 (4)) (1 (8)) (1 (12)) (1 (16)) (1 (20)) (1 (24)) (1 (32)) (1 (40)) (2 (6)) (1 (2)) (1 (1)) (1 (4)) (1 (8)) (1 (12)) (1 (16)) (1 (20)) (1 (24)) (1 (32)) (1 (40)) (2 (6)) (1 (2)) (1 (1)) (1 (4)) (1 (8)) (1 (12)) (1 (16)) (1 (20)) (1 (24)) (1 (32)) (1 (40)) (2 (6)) (1 (2)) (1 (1)))" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 317 218) (quote "Tatum Mapping Key:$1 = 1 beat of a quarter note (1 (4))$2 = 1 beat of eighth notes (1 (8))$3 = 1 beat of triplets (1 (12))$4 = 1 beat of sixteenths (1 (16))$5 = 1 beat of quintuplets (1 (20))$6 = 1 beat of setuplets (1 (24))$8 = 1 beat of thirty-seconds (1 (32))$10 = 1 beat of quintuplet thirty-seconds (1 (40))$//skipping triplet quarters for now$15 = 1 beat of a half note (1 (2))$//skipping dotted half for now...$20 = 1 beat of a whole note (1 (1))$$") "" (om-make-point 545 31) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 1 nil 0) (2 1 3 0 nil 0) (3 0 6 1 nil 0))) 6.110001 nil "" (om-make-point 193 50) (om-make-point 1204 688)) (quote nil) (om-make-point 66 270) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 432 55) (quote "Example workspace that combines rhythm lists to make longer musical phrases and uses the p-map2 tool.") "" (om-make-point 276 210) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "create longer phrases--pitchmap version" (om-load-patch-abs1 "create longer phrases--pitchmap version" (quote ((let ((box (om-load-boxcall (quote abstraction) "r-tatum-mapping-test 2" (om-load-patch-abs1 "r-tatum-mapping-test" (quote ((let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 87 102) (om-make-point 384 63) (load-buffer-textfile (quote ("(1 2 3 4 5 6 8 10 12 15 20)" "(1 2 3 4 5 6 8 10 12 15 20)" "(1 2 3 4 5 6 8 10 12 15 20)" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-tatum-mapping-demo" (om-load-patch-abs1 "r-tatum-mapping-demo" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 261 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 293 307) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 260 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 247 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tatum-mapping" (om-load-lisp-abspatch "tatum-mapping" 6.110001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (mylist) $$(let ((final-list '()))$$(loop for elem in mylist do$      (cond ((eql elem 1) (push '(1 (4)) final-list))$            ((eql elem 2) (push '(1 (8)) final-list))$            ((eql elem 3) (push '(1 (12)) final-list))$            ((eql elem 4) (push '(1 (16)) final-list))$            ((eql elem 5) (push '(1 (20)) final-list))$            ((eql elem 6) (push '(1 (24)) final-list))$            ((eql elem 8) (push '(1 (32)) final-list))$            ((eql elem 10) (push '(1 (40)) final-list))$            ((eql elem 12) (push '(2 (6)) final-list))$            ((eql elem 15) (push '(1 (2)) final-list))$            ((eql elem 20) (push '(1 (1)) final-list))$            (t (push 'nil final-list)))$            )$$$(list (reverse final-list))$)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "MYLIST" nil))) (om-make-point 113 181) nil (list nil) "l" "tatum-mapping"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 14 480) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "output-tatums" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "rhythm-list" 0 (om-make-point 5 45) "" "rhythm-list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 3 1 nil 0) (0 0 5 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "list" nil))) (om-make-point 183 225) nil (list (list (list (list 1 (list 4)) (list 1 (list 8)) (list 1 (list 12)) (list 1 (list 16)) (list 1 (list 20)) (list 1 (list 24)) (list 1 (list 32)) (list 1 (list 40)) (list 2 (list 6)) (list 1 (list 2)) (list 1 (list 1)) (list 1 (list 4)) (list 1 (list 8)) (list 1 (list 12)) (list 1 (list 16)) (list 1 (list 20)) (list 1 (list 24)) (list 1 (list 32)) (list 1 (list 40)) (list 2 (list 6)) (list 1 (list 2)) (list 1 (list 1)) (list 1 (list 4)) (list 1 (list 8)) (list 1 (list 12)) (list 1 (list 16)) (list 1 (list 20)) (list 1 (list 24)) (list 1 (list 32)) (list 1 (list 40)) (list 2 (list 6)) (list 1 (list 2)) (list 1 (list 1))))) nil "r-tatum-mapping-demo"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 409 40) (quote "Maps numbers to tatums according to a key.  See the key below.$Input must be a list of lists!") "" (om-make-point 82 57) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 242 32) (quote "TATUM MAPPING DRAFT OBJECT") "" (om-make-point 81 27) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 16 313) (om-make-point 831 55) (load-buffer-textfile (quote ("((1 (4)) (1 (8)) (1 (12)) (1 (16)) (1 (20)) (1 (24)) (1 (32)) (1 (40)) (2 (6)) (1 (2)) (1 (1)) (1 (4)) (1 (8)) (1 (12)) (1 (16)) (1 (20)) (1 (24)) (1 (32)) (1 (40)) (2 (6)) (1 (2)) (1 (1)) (1 (4)) (1 (8)) (1 (12)) (1 (16)) (1 (20)) (1 (24)) (1 (32)) (1 (40)) (2 (6)) (1 (2)) (1 (1)))" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 317 218) (quote "Tatum Mapping Key:$1 = 1 beat of a quarter note (1 (4))$2 = 1 beat of eighth notes (1 (8))$3 = 1 beat of triplets (1 (12))$4 = 1 beat of sixteenths (1 (16))$5 = 1 beat of quintuplets (1 (20))$6 = 1 beat of setuplets (1 (24))$8 = 1 beat of thirty-seconds (1 (32))$10 = 1 beat of quintuplet thirty-seconds (1 (40))$12 = 2 beats of triplet quarters (2 (6))$15 = 1 beat of a half note (1 (2))$//skipping dotted half for now...$20 = 1 beat of a whole note (1 (1))$$") "" (om-make-point 545 31) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 1 1 0 nil 0) (1 0 4 1 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 886 421)) (quote nil) (om-make-point 1124 118) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 198 54) (quote "LOOK INSIDE HERE FOR TATUM-MAPPING EXAMPLE") "" (om-make-point 1112 69) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 256 78) (quote "P-Map2 Mode 1$Random pitch from pitch collections, this time using probability weights") "" (om-make-point 687 38) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 268 26) (quote "pitch collections designated per voice") "" (om-make-point 688 99) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 684 135) (om-make-point 279 100) (load-buffer-textfile (quote ("((8100 0.5) 8200 8500 8700 ((8800 9200) 0.5))" "((7200 0.9) 7300 7500 7700)" "(6100 6200 6500 6700 ((6800 6200) 0.5))" "((5500 0.9) 5700 5800)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1004 245) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 68 22) (quote "mode=1") "" (om-make-point 1002 216) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAP2" (quote cnmat:p-map2) (quote ((om-load-inputfun (quote input-funbox) "a list of rhythm lists (list of lists)" "DURATIONS-LIST" (list (list 3 4 5) (list 4 5 3) (list 5 3 4))) (om-load-inputfun (quote input-funbox) "a list (or list of lists) for pitch collections" "PITCH-COLLECTION" (list 7200 7300 7500 7700)) (om-load-inputfun (quote input-funbox) "mode: 0 = random choice from a pitch collection; 1 = random choice from a range of pitches" "MODE" 0))) (om-make-point 961 302) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 445 32) (quote "Longer phrases: Paste in a series of rhythmic phrases to be combined.") "" (om-make-point 61 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 30) (quote "tatums") "" (om-make-point 530 64) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 130 32) (quote "rhythms") "" (om-make-point 61 70) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 734 479) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 191 439) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 90 309) (om-make-point 317 114) (load-buffer-textfile (quote ("(1 2 3 4 1 2 3 6 1 2 4 5 1 2 3 4 1 2 3 6 1 2 4 5 1 2 3 4 1 2 3 6 1 2 4 5)" "(2 3 4 1 2 3 6 1 2 4 5 1 2 3 4 1 2 3 6 1 2 4 5 1 2 3 4 1 2 3 6 1 2 4 5 1)" "(3 4 1 2 3 6 1 2 4 5 1 2 3 4 1 2 3 6 1 2 4 5 1 2 3 4 1 2 3 6 1 2 4 5 1 2)" "(4 1 2 3 6 1 2 3 5 1 2 4 4 1 2 3 6 1 2 3 5 1 2 4 4 1 2 3 6 1 2 3 5 1 2 4)" "(elems 4 sum 10 olaps 6 elems 4 sum 12 olaps 6 elems 4 sum 12 olaps 2 elems 4 sum 10 olaps 6 elems 4 sum 12 olaps 6 elems 4 sum 12 olaps 2 elems 4 sum 10 olaps 6 elems 4 sum 12 olaps 6 elems 4 sum 12 olaps 2)" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-COMBINE-LISTS" (quote cnmat:r-combine-lists) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MY-LIST" (list (list 1 2 3 4) (list 5 6 7 8))) (om-load-inputfun (quote input-funbox) "a list of lists" "REST-LIST" (list nil)))) (om-make-point 115 182) (om-make-point 68 75) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 196 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 644 519) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 581 610) (om-make-point 580 223) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7 (((4 4) ((1 (1 2 1)) (1 (1.0 1)) (1 (2.0 1 1)) (1 (1.0 3)))) ((4 4) (1 (1 (2.0 1 1)) (1 (1.0 3)) (1 (1.0 3)))) ((4 4) ((1 (2.0 1 1)) (1 (1.0 3)) 1 (1 (1 2 1)))) ((4 4) ((1 (1.0 1)) 1.0 (1 (1 2 1)) (1 (3.0 1)))) ((4 4) (1.0 (1 (1 2 1)) (1 (1.0 1)) (1 (2.0 1 1)))) ((4 4) ((1 (1.0 3)) 1 (1 (2.0 1 1)) (1 (1.0 3)))) ((4 4) ((1 (1.0 3)) (1 (1.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (450 450)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (450 450)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 1 2)) (1 (3 1)))) ((4 4) (1.0 (1 (1.0 1 2)) 1 1)) ((4 4) ((1 (1.0 1 2)) (1 (3 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1.0 3)) (1 (3.0 1)) (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1.0 3)) (1 (1.0 1 2)))) ((4 4) ((1 (3 1)) 1.0 (1 (1.0 1 2)) 1)) ((4 4) (1 (1 (1.0 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7 (((4 4) ((1 (3 1)) (1 (3.0 1)) (1 (1 1)) (1 (1.0 3)))) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1.0 1)) (1 (3.0 1)))) ((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 1 2)) (1 (3 1)))) ((4 4) (1.0 (1 (1.0 1 2)) 1 1)) ((4 4) ((1 (1.0 1 2)) (1 (3 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1.0 3)) (1 (3.0 1)) (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (3.0 1)) (1 (1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (450 450)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (450 450)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (450 450)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (150 150)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6200)) :ldur (quote (300 300)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7 (((4 4) (1 (1 (1 2 1)) (1 (1.0 1)) 1.0)) ((4 4) ((1 (1 2 1)) (1 (1.0 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1.0 1)) (1 (2.0 1 1)) (1 (1.0 3)) 1)) ((4 4) ((1 (2.0 1 1)) (1 (1.0 3)) 1 (1 (1.0 1 2)))) ((4 4) (1 1 (1 (1 2 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1 2 1)) (1 (1.0 1)) (1 (3.0 1)))) ((4 4) ((1 (1 1)) (1 (1.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (450)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (150)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (300)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 429 327) (om-make-point 903 666) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gg) (quote gg) (quote gg) (quote gg)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 528 97) (om-make-point 100 138) (load-buffer-textfile (quote ("((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 62 97) (om-make-point 414 68) (load-buffer-textfile (quote ("((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 7 0 nil 0) (4 1 7 1 nil 0) (5 0 7 2 nil 0) (13 1 12 0 nil 0) (15 0 13 1 nil 0) (14 0 15 0 nil 0) (19 1 15 1 nil 0) (12 0 16 0 nil 0) (18 1 16 2 nil 0) (7 0 16 3 nil 0) (11 0 16 4 nil 0) (16 0 17 1 nil 0))) 6.110001 nil "" (om-make-point 86 23) (om-make-point 1354 841)) (quote nil) (om-make-point 17 188) nil nil nil "create longer phrases--pitchmap version"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 432 55) (quote "Example workspace that combines rhythm lists to make longer musical phrases") "" (om-make-point 273 114) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "create longer phrases" (om-load-patch-abs1 "create longer phrases" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 445 32) (quote "Longer phrases: Paste in a series of rhythmic phrases to be combined.") "" (om-make-point 61 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 30) (quote "tatums") "" (om-make-point 530 64) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 48) (quote "pitches") "" (om-make-point 652 61) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 130 32) (quote "rhythms") "" (om-make-point 61 70) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 734 479) (om-make-point 41 30) 160 "160" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 191 439) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 90 309) (om-make-point 317 114) (load-buffer-textfile (quote ("(1 2 3 4 1 2 3 6 1 2 4 5 1 2 3 4 1 2 3 6 1 2 4 5 1 2 3 4 1 2 3 6 1 2 4 5)" "(2 3 4 1 2 3 6 1 2 4 5 1 2 3 4 1 2 3 6 1 2 4 5 1 2 3 4 1 2 3 6 1 2 4 5 1)" "(3 4 1 2 3 6 1 2 4 5 1 2 3 4 1 2 3 6 1 2 4 5 1 2 3 4 1 2 3 6 1 2 4 5 1 2)" "(4 1 2 3 6 1 2 3 5 1 2 4 4 1 2 3 6 1 2 3 5 1 2 4 4 1 2 3 6 1 2 3 5 1 2 4)" "(elems 4 sum 10 olaps 6 elems 4 sum 12 olaps 6 elems 4 sum 12 olaps 2 elems 4 sum 10 olaps 6 elems 4 sum 12 olaps 6 elems 4 sum 12 olaps 2 elems 4 sum 10 olaps 6 elems 4 sum 12 olaps 6 elems 4 sum 12 olaps 2)" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-COMBINE-LISTS" (quote cnmat:r-combine-lists) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MY-LIST" (list (list 1 2 3 4) (list 5 6 7 8))) (om-load-inputfun (quote input-funbox) "a list of lists" "REST-LIST" (list nil)))) (om-make-point 115 182) (om-make-point 68 75) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 196 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 644 519) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 581 610) (om-make-point 377 176) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (8 (((4 4) ((1 (1 2 1)) (1 (2.0 1)) (1 (3.0 1)) (1 (2 1)))) ((4 4) ((1 (1.0 1)) 1.0 (1 (1.0 1 2)) 1)) ((4 4) ((1 (1.0 3)) (1 (2.0 1)) (1 (1 1)) (1 (1.0 2)))) ((4 4) ((1 (2.0 1 1)) (1 (1.0 2)) (1 (1.0 3)) 1.0)) ((4 4) ((1 (1 2 1)) 1.0 1 (1 (1.0 1 1)))) ((4 4) ((1 (1.0 3)) 1 (1 (1.0 1 2)) 1)) ((4 4) (1 (1 (2.0 1)) (1 (1 1)) (1 (2.0 1)))) ((4 4) (1.0 -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 160) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 1 2)) (1 (3 1)))) ((4 4) (1.0 (1 (1.0 1 2)) 1 1)) ((4 4) ((1 (1.0 1 2)) (1 (3 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1.0 3)) (1 (3.0 1)) (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1.0 3)) (1 (1.0 1 2)))) ((4 4) ((1 (3 1)) 1.0 (1 (1.0 1 2)) 1)) ((4 4) (1 (1 (1.0 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 160) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7 (((4 4) ((1 (3 1)) (1 (3.0 1)) (1 (1 1)) (1 (1.0 3)))) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1.0 1)) (1 (3.0 1)))) ((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 1 2)) (1 (3 1)))) ((4 4) (1.0 (1 (1.0 1 2)) 1 1)) ((4 4) ((1 (1.0 1 2)) (1 (3 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1.0 3)) (1 (3.0 1)) (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (3.0 1)) (1 (1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 160) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7 (((4 4) (1 (1 (1 2 1)) (1 (1.0 1)) 1.0)) ((4 4) ((1 (1 2 1)) (1 (1.0 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1.0 1)) (1 (2.0 1 1)) (1 (1.0 3)) 1)) ((4 4) ((1 (2.0 1 1)) (1 (1.0 3)) 1 (1 (1.0 1 2)))) ((4 4) (1 1 (1 (1 2 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1 2 1)) (1 (1.0 1)) (1 (3.0 1)))) ((4 4) ((1 (1 1)) (1 (1.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (281)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (94)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (188)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 160) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 903 666) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg) (quote gg)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 654 102) (om-make-point 175 142) (load-buffer-textfile (quote ("(10100)" "(9100)" "(8100)" "(7100)" "(6100)" "(5100)" "(4100)" "(3100)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 528 97) (om-make-point 100 138) (load-buffer-textfile (quote ("((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 62 97) (om-make-point 414 68) (load-buffer-textfile (quote ("((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 1 5 0 nil 0) (8 0 6 1 nil 0) (7 0 8 0 nil 0) (13 1 8 1 nil 0) (5 0 9 0 nil 0) (12 1 9 2 nil 0) (11 1 9 3 nil 0) (4 0 9 4 nil 0) (9 0 10 1 nil 0))) 6.110001 nil "" (om-make-point 91 23) (om-make-point 1349 849)) (quote nil) (om-make-point 73 110) nil nil nil "create longer phrases"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "work-in-progress" (om-load-patch-abs1 "work-in-progress" (quote ((let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 561 518) (om-make-point 318 250) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 7 5 3 6 2 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 1 7 4 6 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 1 6 4 2 7 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 2 7 6 3 1 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 1 4 6 3 5 7) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "quick-player" (om-load-patch-abs1 "quick-player" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 73 635) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR 3" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 178 130) (om-make-point 64 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tempo" 1 (om-make-point 106 42) "" "tempo" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 132 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 83 453) (om-make-point 34 30) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 69 483) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 63 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 32 346) (om-make-point 33 35) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 6 207) (om-make-point 241 30) (list (list 1 2 3 4) (list 2 3 4 1) (list 3 4 1 2) (list 4 1 2 3) 6) "((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 52 282) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 256 398) (om-make-point 382 217) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 (1 (1.0 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 1)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 1)) (1 (3 1)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 592 425) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 279 169) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 412 16) (om-make-point 70 212) (list (list 6200) (list 6500) (list 6900) (list 7200) (list 7600) (list 7900) (list 8300) (list 8600) (list 8900) (list 9300) (list 9600) (list 10000) (list 10300) (list 10700) (list 11000)) "((6200)$(6500)$(6900)$(7200)$(7600)$(7900)$(8300)$(8600)$(8900)$(9300)$(9600)$(10000)$(10300)$(10700)$(11000))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 518 117) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 154 47) (quote "rotations->poly from get-rotations object") "" (om-make-point 498 60) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY" (quote cnmat:s-poly) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 304 248) (om-make-point 103 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "rhythms" 0 (om-make-point 5 45) "" "rhythms" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 1 0 0 nil 0) (2 0 1 0 nil 0) (13 0 1 1 nil 0) (16 0 3 0 nil 0) (8 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (9 0 6 1 nil 0) (3 0 9 0 nil 0) (15 0 10 1 nil 0) (16 0 15 0 nil 0) (5 0 15 1 nil 0) (11 0 15 2 nil 0) (12 0 15 3 nil 0) (1 0 15 4 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "rhythms" nil) (om-load-inputfun (quote input-funbox) "" "tempo" nil))) (om-make-point 982 676) nil (list (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((28 16) (3 4 2 4 1.0 6 1 7))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((28 16) (4 1.0 6 1 3 7 4 2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((28 16) (6 1 2 4 1.0 4 7 3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((28 16) (1 3 4 4 1.0 6 7 2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((28 16) (3 7 4 1.0 1 6 2 4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil "quick-player"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1119 535) (om-make-point 765 223) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((28 16) (3 4 2 4 1.0 6 1 7))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((28 16) (4 1.0 6 1 3 7 4 2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((28 16) (6 1 2 4 1.0 4 7 3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((28 16) (1 3 4 4 1.0 6 7 2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((28 16) (3 7 4 1.0 1 6 2 4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 705 481) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1028 646) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 63 34) (quote "rhythm") "" (om-make-point 945 643) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 198 61) (quote "N.B. this number is misleading because it does not take into account the no rotations rule") "" (om-make-point 436 395) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 440 340) (om-make-point 70 50) (load-buffer-textfile (quote ("5040" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "number-permutations" (om-load-lisp-abspatch "number-permutations" 6.110001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (mylist) $(let ((stuff (arithm-ser 1 (length mylist) 1)))$$(reduce #'* stuff)$)$$)$") (quote ((om-load-inputfun (quote input-funbox) "" "MYLIST" nil))) (om-make-point 406 254) nil (list 5040) nil "number-permutations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 122 179) (om-make-point 102 30) (list 1 2 3 4 5 6 7) "(1 2 3 4 5 6 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 232 31) (quote "Q-N-Permutations-No-Rotations") "" (om-make-point 98 41) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 302 69) (quote "Returns a specified number of permutations from a given list such that none of the returned lists are rotations of one another.") "" (om-make-point 99 70) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 126 27) (quote "original list") "" (om-make-point 114 143) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 150 29) (quote "no. of results desired") "" (om-make-point 271 144) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 275 179) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 105 343) (om-make-point 194 158) (load-buffer-textfile (quote ("(5 6 1 4 3 7 2)" "(4 1 3 7 6 2 5)" "(5 1 7 3 2 4 6)" "(1 7 5 4 3 6 2)" "(6 2 1 7 4 3 5)" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 256 89) (quote "N.B. if the no. of results desired is > the no. of possible results the computer then the computer will keep searching for results and return none.") "" (om-make-point 99 518) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-N-PERMUTATIONS-NO-ROTATIONS" (quote cnmat:q-n-permutations-no-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list for permuting" "MYLIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "the number of permutations desired" "NUM-RESULTS" 4))) (om-make-point 96 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 0 0 1 ((om-make-point 183 329) (om-make-point 313 330) (om-make-point 773 329) (om-make-point 773 518)) 0) (16 0 1 0 nil 0) (3 0 1 1 nil 0) (1 0 2 1 nil 0) (7 0 6 1 nil 0) (8 0 7 0 nil 0) (16 0 14 1 nil 0) (8 0 16 0 nil 0) (13 0 16 1 nil 0))) 6.110001 nil "" (om-make-point 0 53) (om-make-point 1440 807)) (quote nil) (om-make-point 111 353) (om-make-point 32 67) nil nil "work-in-progress"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 101 33) (quote "WORKSPACE") "" (om-make-point 96 74) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.110001 nil "" (om-make-point 204 23) (om-make-point 947 851)) (quote nil) (om-make-point 502 517) nil nil nil "WORKSPACE"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 455 47) (quote "CLICK ON THE PATCHES BELOW TO EXPLORE DIFFERENT AREAS OF THE LIBRARY") "" (om-make-point 76 39) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "DATABASE" (om-load-patch-abs1 "DATABASE" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 438 67) (quote "Create n-number of permutations from a list with no duplicates.") "" (om-make-point 209 686) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "q-random-permutations" (om-load-patch-abs1 "q-random-permutations" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 71 128) (om-make-point 70 30) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 195 133) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 108 264) (om-make-point 170 102) (load-buffer-textfile (quote ("(1 2 3 4)" "(1 3 2 4)" "(2 1 4 3)" "(2 4 3 1)" "(3 2 4 1)" "(1 4 3 2)" "(2 3 1 4)" "(3 1 4 2)" "(4 3 2 1)" "(3 4 1 2)" "(3 2 1 4)" "(4 3 1 2)" "(2 1 3 4)" "(4 2 1 3)" "(2 3 4 1)" "(1 2 4 3)" "(4 2 3 1)" "(3 1 2 4)" "(4 1 3 2)" "(1 3 4 2)" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 312 44) (quote "Generate Random-Permutations From a List$With No Duplicate Lists Ouputted") "" (om-make-point 70 57) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 79 27) (quote "original list") "" (om-make-point 69 96) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 181 28) (quote "no. permutations needed") "" (om-make-point 194 102) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-RANDOM-PERMUTATIONS-NO-DUPS" (quote cnmat:q-random-permutations-no-dups) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "number of permutations to generate" "NO-TIMES" 5))) (om-make-point 82 182) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 2 1 nil 0) (0 0 6 0 nil 0) (1 0 6 1 nil 0))) 6.110001 nil "" (om-make-point 88 30) (om-make-point 437 434)) (quote nil) (om-make-point 37 682) nil nil nil "q-random-permutations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 364 34) (quote "Tests canon-query on a list combined with its retrograde.") "" (om-make-point 216 774) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-retro-canon" (om-load-patch-abs1 "r-retro-canon" (quote ((let ((box (om-load-boxcall (quote genfun) "R-RETRO-CANON?" (quote cnmat::r-retro-canon?) (quote ((om-load-inputfun (quote input-funbox) "Tests canon-query on list combined with its retrograde" "MY-LIST" (list 1 2 3 4 5)))) (om-make-point 93 281) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 211 72) (quote "Tests canon-query on a list combined with its retrograde. If true, returns combined list. If false, returns nil.") "" (om-make-point 90 87) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 97 373) (om-make-point 96 72) (load-buffer-textfile (quote ("(1 2 3 4 5)" "(5 4 3 2 1)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 99 206) (om-make-point 80 30) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 200 35) (quote "RETROGRADE-CANON-TEST") "" (om-make-point 90 52) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 103 27) (quote "rhythms list") "" (om-make-point 102 172) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (0 0 2 1 nil 0))) 6.110001 nil "" (om-make-point 330 32) (om-make-point 358 502)) (quote nil) (om-make-point 67 756) nil nil nil "r-retro-canon"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 430 67) (quote "Filters input lists to return those lists with the elements required as specified for number of elements, allowable sums, and number of overlaps.") "" (om-make-point 201 125) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "q-combi-filter" (om-load-patch-abs1 "q-combi-filter" (quote ((let ((box (om-load-boxcomment "comment 20" (om-make-point 452 120) (quote "$Filter results from q-combi-from-elements. Specify lists for allowable number of elements (elems), list sums (sums), and overlaps (olaps), i.e. shared attacks not counting the first one. Optional argument \"exclude\": specify a list of elements that, when found in a list, will exclude that list from the output.$$$") "" (om-make-point 119 39) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 131 650) (om-make-point 384 155) (load-buffer-textfile (quote ("((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 566 430) (om-make-point 37 30) (list 4) "(4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 615 430) (om-make-point 62 30) (list 10 12) "(10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 687 429) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 19" (om-make-point 372 54) (quote "Q-Combi-filter:$Arguments for elems, sums and olaps must be lists. Optional argument exclude must also be a list.") "" (om-make-point 123 161) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 18" (om-make-point 45 28) (quote "elems") "" (om-make-point 562 396) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 17" (om-make-point 45 28) (quote "sums") "" (om-make-point 615 396) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 16" (om-make-point 45 28) (quote "olaps") "" (om-make-point 683 395) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-COMBI-FROM-ELEMENTS 2" (quote cnmat:q-combi-from-elements) (quote ((om-load-inputfun (quote input-funbox) "a list of elements" "ELEMENTS-LIST" (list 1 2 3 4 5 6 8 10 12)) (om-load-inputfun (quote input-funbox) "ordered variable number" "ORDERED" 1) (om-load-inputfun (quote input-funbox) "mode: 0 or 1" "MODE" 0))) (om-make-point 244 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 133 435) (om-make-point 355 92) (load-buffer-textfile (quote ("((1) (elems 1 sum 1 olaps 0))" "((2) (elems 1 sum 2 olaps 0))" "((3) (elems 1 sum 3 olaps 0))" "((4) (elems 1 sum 4 olaps 0))" "((5) (elems 1 sum 5 olaps 0))" "((6) (elems 1 sum 6 olaps 0))" "((8) (elems 1 sum 8 olaps 0))" "((10) (elems 1 sum 10 olaps 0))" "((12) (elems 1 sum 12 olaps 0))" "((1 2) (2 1) (elems 2 sum 3 olaps 0))" "((1 3) (3 1) (elems 2 sum 4 olaps 0))" "((1 4) (4 1) (elems 2 sum 5 olaps 0))" "((2 3) (3 2) (elems 2 sum 5 olaps 0))" "((1 5) (5 1) (elems 2 sum 6 olaps 0))" "((2 4) (4 2) (elems 2 sum 6 olaps 0))" "((2 6) (6 2) (elems 2 sum 8 olaps 0))" "((3 5) (5 3) (elems 2 sum 8 olaps 0))" "((2 8) (8 2) (elems 2 sum 10 olaps 0))" "((4 6) (6 4) (elems 2 sum 10 olaps 0))" "((2 10) (10 2) (elems 2 sum 12 olaps 0))" "((4 8) (8 4) (elems 2 sum 12 olaps 0))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 5) (2 5 1) (5 1 2) (elems 3 sum 8 olaps 0))" "((1 3 4) (3 4 1) (4 1 3) (elems 3 sum 8 olaps 2))" "((1 3 6) (3 6 1) (6 1 3) (elems 3 sum 10 olaps 0))" "((1 4 5) (4 5 1) (5 1 4) (elems 3 sum 10 olaps 2))" "((2 3 5) (3 5 2) (5 2 3) (elems 3 sum 10 olaps 2))" "((1 3 8) (3 8 1) (8 1 3) (elems 3 sum 12 olaps 0))" "((1 5 6) (5 6 1) (6 1 5) (elems 3 sum 12 olaps 2))" "((2 4 6) (4 6 2) (6 2 4) (elems 3 sum 12 olaps 2))" "((3 4 5) (4 5 3) (5 3 4) (elems 3 sum 12 olaps 0))" "((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 15" (om-make-point 68 25) (quote "mode") "" (om-make-point 370 258) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 378 284) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 14" (om-make-point 259 35) (quote "Q-COMBI-FILTER") "" (om-make-point 118 4) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 68 25) (quote "ordered") "" (om-make-point 296 255) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 68 25) (quote "elements") "" (om-make-point 125 258) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 301 289) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 126 296) (om-make-point 138 30) (list 1 2 3 4 5 6 8 10 12) "(1 2 3 4 5 6 8 10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-COMBI-FILTER 2" (quote cnmat:q-combi-filter) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MAIN-LIST" (list (list 1 2 3) (list 3 4 5))) (om-load-inputfun (quote input-funbox) "a list of elements" "ELEMS" nil) (om-load-inputfun (quote input-funbox) "a list of possible sums" "SUMS" nil) (om-load-inputfun (quote input-funbox) "a list of overlaps" "OLAPS" nil) (om-load-inputfun (quote input-funbox) "excluded elements" "EXCLUDE" nil))) (om-make-point 554 564) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 736 429) (om-make-point 37 30) (list 6) "(6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 11" (om-make-point 61 26) (quote "exclude") "" (om-make-point 732 397) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((18 0 1 1 nil 0) (17 0 9 0 nil 0) (16 0 9 1 nil 0) (12 0 9 2 nil 0) (9 0 10 1 nil 0) (10 1 18 0 nil 0) (2 0 18 1 nil 0) (3 0 18 2 nil 0) (4 0 18 3 nil 0) (19 0 18 4 nil 0))) 6.110001 nil "" (om-make-point 340 23) (om-make-point 855 834)) (quote nil) (om-make-point 63 122) nil nil nil "q-combi-filter"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 430 67) (quote "Removes rotationally-related lists from a lists of lists.") "" (om-make-point 200 290) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "q-remove-rotations" (om-load-patch-abs1 "q-remove-rotations" (quote ((let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 88 319) (om-make-point 70 50) (load-buffer-textfile (quote ("(3 1 2)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 52 134) (om-make-point 137 36) (list (list 1 2 3) (list 2 3 1) (list 3 1 2)) "((1 2 3)(2 3 1)(3 1 2))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 324 48) (quote "Removes rotationally-related lists from a list of lists.") "" (om-make-point 53 104) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 189 30) (quote "Q-REMOVE-ROTATIONS") "" (om-make-point 53 69) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-REMOVE-ROTATIONS" (quote cnmat:q-remove-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3 4 5) (list 2 3 4 5 1) (list 3 4 5 1 2) (list 4 5 1 2 3) (list 5 1 2 3 4))))) (om-make-point 60 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 1 nil 0) (1 0 4 0 nil 0))) 6.110001 nil "" (om-make-point 407 23) (om-make-point 401 482)) (quote nil) (om-make-point 49 276) nil nil nil "q-remove-rotations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 430 67) (quote "Computes and returns the list of all rotations (circular permutations) of a given list <durations>.") "" (om-make-point 199 199) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "q-rotations" (om-load-patch-abs1 "q-rotations" (quote ((let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 108 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 119 31) (quote "Q-ROTATIONS") "" (om-make-point 93 61) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 313 59) (quote "Computes and returns the list of all rotations (circular permutations) of a given list <durations>.") "" (om-make-point 87 88) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 114 152) (om-make-point 59 30) (list 1 2 3) "(1 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 100 268) (om-make-point 99 83) (load-buffer-textfile (quote ("(1 2 3)" "(2 3 1)" "(3 1 2)" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (0 0 4 1 nil 0))) 6.110001 nil "" (om-make-point 23 23) (om-make-point 477 412)) (quote nil) (om-make-point 72 197) nil nil nil "q-rotations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "q-permutations+canon" (om-load-patch-abs1 "q-permutations+canon" (quote ((let ((box (om-load-boxcomment "comment 6" (om-make-point 310 29) (quote "Permutations+Canon-Growth") "" (om-make-point 106 11) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 440 167) (quote "Provided with a group of lists, iteratively builds output lists with no rhythmic overlaps, except for the onset.$$Builds according to this process: take the first list and check it against the second list.  If there are no attack overlaps add both lists to the output list.  Then check the third list agains this output list. If there are no outputs, combine the third list to the output list and continue. Etc...$$Does this process on each rotation of the original lists provided.$$") "" (om-make-point 104 42) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 171 255) (om-make-point 153 107) (load-buffer-textfile (quote ("(4 1 2 3 5)" "(2 1 3 4 5)" "(1 5 4 3 2)" "(4 2 3 1 5)" "(1 5 3 4 2)" "(3 2 5 1 4)" "(4 5 3 2 1)" "(4 2 5 1 3)" "(5 3 1 4 2)" "(4 3 1 5 2)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 113 461) (om-make-point 292 109) (load-buffer-textfile (quote ("((4 1 2 3 5) (1 5 3 4 2) (elems 5 sum 15 olaps 0))" "((2 1 3 4 5) (4 5 3 2 1) (elems 5 sum 15 olaps 0))" "((1 5 4 3 2) (4 5 3 2 1) (elems 5 sum 15 olaps 0))" "((4 2 3 1 5) (elems 5 sum 15 olaps 0))" "((1 5 3 4 2) (3 2 5 1 4) (elems 5 sum 15 olaps 0))" "((3 2 5 1 4) (4 5 3 2 1) (elems 5 sum 15 olaps 0))" "((4 5 3 2 1) (2 1 3 4 5) (elems 5 sum 15 olaps 0))" "((4 2 5 1 3) (5 3 1 4 2) (elems 5 sum 15 olaps 0))" "((5 3 1 4 2) (2 1 3 4 5) (elems 5 sum 15 olaps 0))" "((4 3 1 5 2) (2 1 3 4 5) (elems 5 sum 15 olaps 0))" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 159 28) (quote "starting lists") "" (om-make-point 168 224) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 179 29) (quote "<--function output") "" (om-make-point 417 467) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 153 671) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 5 4 3 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 5 3 2 1) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 202 59) (quote "<--checking elements for onset overlaps in a given list") "" (om-make-point 389 734) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 241 49) (quote "(lists of lists from the original input$that do not have onset overlaps)") "" (om-make-point 419 497) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON" (quote cnmat:q-permutations+canon) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list 1 2 3 4 5)))) (om-make-point 163 368) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "yes" "no")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 114 583) (om-make-point 339 60) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 319 24) "untitled" :range (quote (((4 1 2 3 5) (1 5 3 4 2) (elems 5 sum 15 olaps 0)) ((2 1 3 4 5) (4 5 3 2 1) (elems 5 sum 15 olaps 0)) ((1 5 4 3 2) (4 5 3 2 1) (elems 5 sum 15 olaps 0)) ((4 2 3 1 5) (elems 5 sum 15 olaps 0)) ((1 5 3 4 2) (3 2 5 1 4) (elems 5 sum 15 olaps 0)) ((3 2 5 1 4) (4 5 3 2 1) (elems 5 sum 15 olaps 0)) ((4 5 3 2 1) (2 1 3 4 5) (elems 5 sum 15 olaps 0)) ((4 2 5 1 3) (5 3 1 4 2) (elems 5 sum 15 olaps 0)) ((5 3 1 4 2) (2 1 3 4 5) (elems 5 sum 15 olaps 0)) ((4 3 1 5 2) (2 1 3 4 5) (elems 5 sum 15 olaps 0))))))) (om-set-selected-item-index rep (quote 2)) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 392 652) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 3 1 nil 0) (11 0 6 1 nil 0) (2 1 9 0 nil 0) (3 1 10 0 nil 0) (10 1 11 0 nil 0))) 6.110001 nil "" (om-make-point 174 23) (om-make-point 710 838)) (quote nil) (om-make-point 39 443) nil nil nil "q-permutations+canon"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 438 67) (quote "Finds combinations of <n> elements that sum up to any one of the elements provided and provides all rotations of these combinations. ") "" (om-make-point 212 625) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "q-combi-from-elements" (om-load-patch-abs1 "q-combi-from-elements" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 96 224) (om-make-point 138 30) (list 1 2 3 4 5 6 8 10 12) "(1 2 3 4 5 6 8 10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 371 99) (quote "Q-combi-from-elements MODE 0 (default). $Finds combinations of <n> elements that sum up to any one of the elements provided and provides all rotations of these combinations. (Ordered/unordered and with or without repetitions.)") "" (om-make-point 83 86) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 281 217) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 250 205) (quote "KEY$$elements:$the allowable rhythm list$$ordered:$0= ordered without repetitions$1 = unordered without repetitions$2 = unordered with repetitions$$mode:$0 = default$1 = output meets canon-test") "" (om-make-point 387 184) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 11" (om-make-point 68 25) (quote "elements") "" (om-make-point 93 192) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 68 25) (quote "ordered") "" (om-make-point 262 185) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 310 149) (quote "<--Output calculates all combinations, including rotations. It further lists the number of shared onsets that will occur when rotations are presented in synchronized polyphony (inital onsets not counted).$$$$$") "" (om-make-point 389 390) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 299 104) (quote "<--The output is all combinations with their rotations that pass the q-canon test.$$OUTPUT FORMAT:$((list)(additional lists...))$$$$$$") "" (om-make-point 965 410) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 442 98) (quote "Q-combi-from-elements MODE 1. $Finds combinations of <n> elements which sum up to any one of the elements provided and provides all rotations of these combinations that meet the q-canon test. (Ordered/unordered and with or without repetitions.)") "" (om-make-point 670 75) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 68 25) (quote "ordered") "" (om-make-point 864 175) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 68 25) (quote "elements") "" (om-make-point 673 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 674 209) (om-make-point 138 30) (list 1 2 3 4 5 6 8 10 12) "(1 2 3 4 5 6 8 10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 867 212) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 93 350) (om-make-point 215 139) (load-buffer-textfile (quote ("((1) (elems 1 sum 1 olaps 0))" "((2) (elems 1 sum 2 olaps 0))" "((3) (elems 1 sum 3 olaps 0))" "((4) (elems 1 sum 4 olaps 0))" "((5) (elems 1 sum 5 olaps 0))" "((6) (elems 1 sum 6 olaps 0))" "((8) (elems 1 sum 8 olaps 0))" "((10) (elems 1 sum 10 olaps 0))" "((12) (elems 1 sum 12 olaps 0))" "((1 1) (1 1) (elems 2 sum 2 olaps 2))" "((1 2) (2 1) (elems 2 sum 3 olaps 0))" "((2 1) (1 2) (elems 2 sum 3 olaps 0))" "((1 3) (3 1) (elems 2 sum 4 olaps 0))" "((2 2) (2 2) (elems 2 sum 4 olaps 2))" "((3 1) (1 3) (elems 2 sum 4 olaps 0))" "((1 4) (4 1) (elems 2 sum 5 olaps 0))" "((2 3) (3 2) (elems 2 sum 5 olaps 0))" "((3 2) (2 3) (elems 2 sum 5 olaps 0))" "((4 1) (1 4) (elems 2 sum 5 olaps 0))" "((1 5) (5 1) (elems 2 sum 6 olaps 0))" "((2 4) (4 2) (elems 2 sum 6 olaps 0))" "((3 3) (3 3) (elems 2 sum 6 olaps 2))" "((4 2) (2 4) (elems 2 sum 6 olaps 0))" "((5 1) (1 5) (elems 2 sum 6 olaps 0))" "((2 6) (6 2) (elems 2 sum 8 olaps 0))" "((3 5) (5 3) (elems 2 sum 8 olaps 0))" "((4 4) (4 4) (elems 2 sum 8 olaps 2))" "((5 3) (3 5) (elems 2 sum 8 olaps 0))" "((6 2) (2 6) (elems 2 sum 8 olaps 0))" "((2 8) (8 2) (elems 2 sum 10 olaps 0))" "((4 6) (6 4) (elems 2 sum 10 olaps 0))" "((5 5) (5 5) (elems 2 sum 10 olaps 2))" "((6 4) (4 6) (elems 2 sum 10 olaps 0))" "((8 2) (2 8) (elems 2 sum 10 olaps 0))" "((2 10) (10 2) (elems 2 sum 12 olaps 0))" "((4 8) (8 4) (elems 2 sum 12 olaps 0))" "((6 6) (6 6) (elems 2 sum 12 olaps 2))" "((8 4) (4 8) (elems 2 sum 12 olaps 0))" "((10 2) (2 10) (elems 2 sum 12 olaps 0))" "((1 1 1) (1 1 1) (1 1 1) (elems 3 sum 3 olaps 6))" "((1 1 2) (1 2 1) (2 1 1) (elems 3 sum 4 olaps 6))" "((1 2 1) (2 1 1) (1 1 2) (elems 3 sum 4 olaps 6))" "((2 1 1) (1 1 2) (1 2 1) (elems 3 sum 4 olaps 6))" "((1 1 3) (1 3 1) (3 1 1) (elems 3 sum 5 olaps 4))" "((1 2 2) (2 2 1) (2 1 2) (elems 3 sum 5 olaps 4))" "((1 3 1) (3 1 1) (1 1 3) (elems 3 sum 5 olaps 4))" "((2 1 2) (1 2 2) (2 2 1) (elems 3 sum 5 olaps 4))" "((2 2 1) (2 1 2) (1 2 2) (elems 3 sum 5 olaps 4))" "((3 1 1) (1 1 3) (1 3 1) (elems 3 sum 5 olaps 4))" "((1 1 4) (1 4 1) (4 1 1) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 4 1) (4 1 1) (1 1 4) (elems 3 sum 6 olaps 4))" "((2 1 3) (1 3 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 2 2) (2 2 2) (2 2 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((4 1 1) (1 1 4) (1 4 1) (elems 3 sum 6 olaps 4))" "((1 1 6) (1 6 1) (6 1 1) (elems 3 sum 8 olaps 4))" "((1 2 5) (2 5 1) (5 1 2) (elems 3 sum 8 olaps 0))" "((1 3 4) (3 4 1) (4 1 3) (elems 3 sum 8 olaps 2))" "((1 4 3) (4 3 1) (3 1 4) (elems 3 sum 8 olaps 2))" "((1 5 2) (5 2 1) (2 1 5) (elems 3 sum 8 olaps 0))" "((1 6 1) (6 1 1) (1 1 6) (elems 3 sum 8 olaps 4))" "((2 1 5) (1 5 2) (5 2 1) (elems 3 sum 8 olaps 0))" "((2 2 4) (2 4 2) (4 2 2) (elems 3 sum 8 olaps 6))" "((2 3 3) (3 3 2) (3 2 3) (elems 3 sum 8 olaps 4))" "((2 4 2) (4 2 2) (2 2 4) (elems 3 sum 8 olaps 6))" "((2 5 1) (5 1 2) (1 2 5) (elems 3 sum 8 olaps 0))" "((3 1 4) (1 4 3) (4 3 1) (elems 3 sum 8 olaps 2))" "((3 2 3) (2 3 3) (3 3 2) (elems 3 sum 8 olaps 4))" "((3 3 2) (3 2 3) (2 3 3) (elems 3 sum 8 olaps 4))" "((3 4 1) (4 1 3) (1 3 4) (elems 3 sum 8 olaps 2))" "((4 1 3) (1 3 4) (3 4 1) (elems 3 sum 8 olaps 2))" "((4 2 2) (2 2 4) (2 4 2) (elems 3 sum 8 olaps 6))" "((4 3 1) (3 1 4) (1 4 3) (elems 3 sum 8 olaps 2))" "((5 1 2) (1 2 5) (2 5 1) (elems 3 sum 8 olaps 0))" "((5 2 1) (2 1 5) (1 5 2) (elems 3 sum 8 olaps 0))" "((6 1 1) (1 1 6) (1 6 1) (elems 3 sum 8 olaps 4))" "((1 1 8) (1 8 1) (8 1 1) (elems 3 sum 10 olaps 4))" "((1 3 6) (3 6 1) (6 1 3) (elems 3 sum 10 olaps 0))" "((1 4 5) (4 5 1) (5 1 4) (elems 3 sum 10 olaps 2))" "((1 5 4) (5 4 1) (4 1 5) (elems 3 sum 10 olaps 2))" "((1 6 3) (6 3 1) (3 1 6) (elems 3 sum 10 olaps 0))" "((1 8 1) (8 1 1) (1 1 8) (elems 3 sum 10 olaps 4))" "((2 2 6) (2 6 2) (6 2 2) (elems 3 sum 10 olaps 4))" "((2 3 5) (3 5 2) (5 2 3) (elems 3 sum 10 olaps 2))" "((2 4 4) (4 4 2) (4 2 4) (elems 3 sum 10 olaps 4))" "((2 5 3) (5 3 2) (3 2 5) (elems 3 sum 10 olaps 2))" "((2 6 2) (6 2 2) (2 2 6) (elems 3 sum 10 olaps 4))" "((3 1 6) (1 6 3) (6 3 1) (elems 3 sum 10 olaps 0))" "((3 2 5) (2 5 3) (5 3 2) (elems 3 sum 10 olaps 2))" "((3 3 4) (3 4 3) (4 3 3) (elems 3 sum 10 olaps 4))" "((3 4 3) (4 3 3) (3 3 4) (elems 3 sum 10 olaps 4))" "((3 5 2) (5 2 3) (2 3 5) (elems 3 sum 10 olaps 2))" "((3 6 1) (6 1 3) (1 3 6) (elems 3 sum 10 olaps 0))" "((4 1 5) (1 5 4) (5 4 1) (elems 3 sum 10 olaps 2))" "((4 2 4) (2 4 4) (4 4 2) (elems 3 sum 10 olaps 4))" "((4 3 3) (3 3 4) (3 4 3) (elems 3 sum 10 olaps 4))" "((4 4 2) (4 2 4) (2 4 4) (elems 3 sum 10 olaps 4))" "((4 5 1) (5 1 4) (1 4 5) (elems 3 sum 10 olaps 2))" "((5 1 4) (1 4 5) (4 5 1) (elems 3 sum 10 olaps 2))" "((5 2 3) (2 3 5) (3 5 2) (elems 3 sum 10 olaps 2))" "((5 3 2) (3 2 5) (2 5 3) (elems 3 sum 10 olaps 2))" "((5 4 1) (4 1 5) (1 5 4) (elems 3 sum 10 olaps 2))" "((6 1 3) (1 3 6) (3 6 1) (elems 3 sum 10 olaps 0))" "((6 2 2) (2 2 6) (2 6 2) (elems 3 sum 10 olaps 4))" "((6 3 1) (3 1 6) (1 6 3) (elems 3 sum 10 olaps 0))" "((8 1 1) (1 1 8) (1 8 1) (elems 3 sum 10 olaps 4))" "((1 1 10) (1 10 1) (10 1 1) (elems 3 sum 12 olaps 4))" "((1 3 8) (3 8 1) (8 1 3) (elems 3 sum 12 olaps 0))" "((1 5 6) (5 6 1) (6 1 5) (elems 3 sum 12 olaps 2))" "((1 6 5) (6 5 1) (5 1 6) (elems 3 sum 12 olaps 2))" "((1 8 3) (8 3 1) (3 1 8) (elems 3 sum 12 olaps 0))" "((1 10 1) (10 1 1) (1 1 10) (elems 3 sum 12 olaps 4))" "((2 2 8) (2 8 2) (8 2 2) (elems 3 sum 12 olaps 4))" "((2 4 6) (4 6 2) (6 2 4) (elems 3 sum 12 olaps 2))" "((2 5 5) (5 5 2) (5 2 5) (elems 3 sum 12 olaps 4))" "((2 6 4) (6 4 2) (4 2 6) (elems 3 sum 12 olaps 2))" "((2 8 2) (8 2 2) (2 2 8) (elems 3 sum 12 olaps 4))" "((3 1 8) (1 8 3) (8 3 1) (elems 3 sum 12 olaps 0))" "((3 3 6) (3 6 3) (6 3 3) (elems 3 sum 12 olaps 6))" "((3 4 5) (4 5 3) (5 3 4) (elems 3 sum 12 olaps 0))" "((3 5 4) (5 4 3) (4 3 5) (elems 3 sum 12 olaps 0))" "((3 6 3) (6 3 3) (3 3 6) (elems 3 sum 12 olaps 6))" "((3 8 1) (8 1 3) (1 3 8) (elems 3 sum 12 olaps 0))" "((4 2 6) (2 6 4) (6 4 2) (elems 3 sum 12 olaps 2))" "((4 3 5) (3 5 4) (5 4 3) (elems 3 sum 12 olaps 0))" "((4 4 4) (4 4 4) (4 4 4) (elems 3 sum 12 olaps 6))" "((4 5 3) (5 3 4) (3 4 5) (elems 3 sum 12 olaps 0))" "((4 6 2) (6 2 4) (2 4 6) (elems 3 sum 12 olaps 2))" "((5 1 6) (1 6 5) (6 5 1) (elems 3 sum 12 olaps 2))" "((5 2 5) (2 5 5) (5 5 2) (elems 3 sum 12 olaps 4))" "((5 3 4) (3 4 5) (4 5 3) (elems 3 sum 12 olaps 0))" "((5 4 3) (4 3 5) (3 5 4) (elems 3 sum 12 olaps 0))" "((5 5 2) (5 2 5) (2 5 5) (elems 3 sum 12 olaps 4))" "((5 6 1) (6 1 5) (1 5 6) (elems 3 sum 12 olaps 2))" "((6 1 5) (1 5 6) (5 6 1) (elems 3 sum 12 olaps 2))" "((6 2 4) (2 4 6) (4 6 2) (elems 3 sum 12 olaps 2))" "((6 3 3) (3 3 6) (3 6 3) (elems 3 sum 12 olaps 6))" "((6 4 2) (4 2 6) (2 6 4) (elems 3 sum 12 olaps 2))" "((6 5 1) (5 1 6) (1 6 5) (elems 3 sum 12 olaps 2))" "((8 1 3) (1 3 8) (3 8 1) (elems 3 sum 12 olaps 0))" "((8 2 2) (2 2 8) (2 8 2) (elems 3 sum 12 olaps 4))" "((8 3 1) (3 1 8) (1 8 3) (elems 3 sum 12 olaps 0))" "((10 1 1) (1 1 10) (1 10 1) (elems 3 sum 12 olaps 4))" "((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (elems 4 sum 4 olaps 12))" "((1 1 1 2) (1 1 2 1) (1 2 1 1) (2 1 1 1) (elems 4 sum 5 olaps 12))" "((1 1 2 1) (1 2 1 1) (2 1 1 1) (1 1 1 2) (elems 4 sum 5 olaps 12))" "((1 2 1 1) (2 1 1 1) (1 1 1 2) (1 1 2 1) (elems 4 sum 5 olaps 12))" "((2 1 1 1) (1 1 1 2) (1 1 2 1) (1 2 1 1) (elems 4 sum 5 olaps 12))" "((1 1 1 3) (1 1 3 1) (1 3 1 1) (3 1 1 1) (elems 4 sum 6 olaps 12))" "((1 1 2 2) (1 2 2 1) (2 2 1 1) (2 1 1 2) (elems 4 sum 6 olaps 12))" "((1 1 3 1) (1 3 1 1) (3 1 1 1) (1 1 1 3) (elems 4 sum 6 olaps 12))" "((1 2 1 2) (2 1 2 1) (1 2 1 2) (2 1 2 1) (elems 4 sum 6 olaps 12))" "((1 2 2 1) (2 2 1 1) (2 1 1 2) (1 1 2 2) (elems 4 sum 6 olaps 12))" "((1 3 1 1) (3 1 1 1) (1 1 1 3) (1 1 3 1) (elems 4 sum 6 olaps 12))" "((2 1 1 2) (1 1 2 2) (1 2 2 1) (2 2 1 1) (elems 4 sum 6 olaps 12))" "((2 1 2 1) (1 2 1 2) (2 1 2 1) (1 2 1 2) (elems 4 sum 6 olaps 12))" "((2 2 1 1) (2 1 1 2) (1 1 2 2) (1 2 2 1) (elems 4 sum 6 olaps 12))" "((3 1 1 1) (1 1 1 3) (1 1 3 1) (1 3 1 1) (elems 4 sum 6 olaps 12))" "((1 1 1 5) (1 1 5 1) (1 5 1 1) (5 1 1 1) (elems 4 sum 8 olaps 10))" "((1 1 2 4) (1 2 4 1) (2 4 1 1) (4 1 1 2) (elems 4 sum 8 olaps 10))" "((1 1 3 3) (1 3 3 1) (3 3 1 1) (3 1 1 3) (elems 4 sum 8 olaps 10))" "((1 1 4 2) (1 4 2 1) (4 2 1 1) (2 1 1 4) (elems 4 sum 8 olaps 10))" "((1 1 5 1) (1 5 1 1) (5 1 1 1) (1 1 1 5) (elems 4 sum 8 olaps 10))" "((1 2 1 4) (2 1 4 1) (1 4 1 2) (4 1 2 1) (elems 4 sum 8 olaps 10))" "((1 2 2 3) (2 2 3 1) (2 3 1 2) (3 1 2 2) (elems 4 sum 8 olaps 10))" "((1 2 3 2) (2 3 2 1) (3 2 1 2) (2 1 2 3) (elems 4 sum 8 olaps 10))" "((1 2 4 1) (2 4 1 1) (4 1 1 2) (1 1 2 4) (elems 4 sum 8 olaps 10))" "((1 3 1 3) (3 1 3 1) (1 3 1 3) (3 1 3 1) (elems 4 sum 8 olaps 12))" "((1 3 2 2) (3 2 2 1) (2 2 1 3) (2 1 3 2) (elems 4 sum 8 olaps 10))" "((1 3 3 1) (3 3 1 1) (3 1 1 3) (1 1 3 3) (elems 4 sum 8 olaps 10))" "((1 4 1 2) (4 1 2 1) (1 2 1 4) (2 1 4 1) (elems 4 sum 8 olaps 10))" "((1 4 2 1) (4 2 1 1) (2 1 1 4) (1 1 4 2) (elems 4 sum 8 olaps 10))" "((1 5 1 1) (5 1 1 1) (1 1 1 5) (1 1 5 1) (elems 4 sum 8 olaps 10))" "((2 1 1 4) (1 1 4 2) (1 4 2 1) (4 2 1 1) (elems 4 sum 8 olaps 10))" "((2 1 2 3) (1 2 3 2) (2 3 2 1) (3 2 1 2) (elems 4 sum 8 olaps 10))" "((2 1 3 2) (1 3 2 2) (3 2 2 1) (2 2 1 3) (elems 4 sum 8 olaps 10))" "((2 1 4 1) (1 4 1 2) (4 1 2 1) (1 2 1 4) (elems 4 sum 8 olaps 10))" "((2 2 1 3) (2 1 3 2) (1 3 2 2) (3 2 2 1) (elems 4 sum 8 olaps 10))" "((2 2 2 2) (2 2 2 2) (2 2 2 2) (2 2 2 2) (elems 4 sum 8 olaps 12))" "((2 2 3 1) (2 3 1 2) (3 1 2 2) (1 2 2 3) (elems 4 sum 8 olaps 10))" "((2 3 1 2) (3 1 2 2) (1 2 2 3) (2 2 3 1) (elems 4 sum 8 olaps 10))" "((2 3 2 1) (3 2 1 2) (2 1 2 3) (1 2 3 2) (elems 4 sum 8 olaps 10))" "((2 4 1 1) (4 1 1 2) (1 1 2 4) (1 2 4 1) (elems 4 sum 8 olaps 10))" "((3 1 1 3) (1 1 3 3) (1 3 3 1) (3 3 1 1) (elems 4 sum 8 olaps 10))" "((3 1 2 2) (1 2 2 3) (2 2 3 1) (2 3 1 2) (elems 4 sum 8 olaps 10))" "((3 1 3 1) (1 3 1 3) (3 1 3 1) (1 3 1 3) (elems 4 sum 8 olaps 12))" "((3 2 1 2) (2 1 2 3) (1 2 3 2) (2 3 2 1) (elems 4 sum 8 olaps 10))" "((3 2 2 1) (2 2 1 3) (2 1 3 2) (1 3 2 2) (elems 4 sum 8 olaps 10))" "((3 3 1 1) (3 1 1 3) (1 1 3 3) (1 3 3 1) (elems 4 sum 8 olaps 10))" "((4 1 1 2) (1 1 2 4) (1 2 4 1) (2 4 1 1) (elems 4 sum 8 olaps 10))" "((4 1 2 1) (1 2 1 4) (2 1 4 1) (1 4 1 2) (elems 4 sum 8 olaps 10))" "((4 2 1 1) (2 1 1 4) (1 1 4 2) (1 4 2 1) (elems 4 sum 8 olaps 10))" "((5 1 1 1) (1 1 1 5) (1 1 5 1) (1 5 1 1) (elems 4 sum 8 olaps 10))" "((1 1 2 6) (1 2 6 1) (2 6 1 1) (6 1 1 2) (elems 4 sum 10 olaps 8))" "((1 1 3 5) (1 3 5 1) (3 5 1 1) (5 1 1 3) (elems 4 sum 10 olaps 6))" "((1 1 4 4) (1 4 4 1) (4 4 1 1) (4 1 1 4) (elems 4 sum 10 olaps 10))" "((1 1 5 3) (1 5 3 1) (5 3 1 1) (3 1 1 5) (elems 4 sum 10 olaps 6))" "((1 1 6 2) (1 6 2 1) (6 2 1 1) (2 1 1 6) (elems 4 sum 10 olaps 8))" "((1 2 1 6) (2 1 6 1) (1 6 1 2) (6 1 2 1) (elems 4 sum 10 olaps 8))" "((1 2 2 5) (2 2 5 1) (2 5 1 2) (5 1 2 2) (elems 4 sum 10 olaps 6))" "((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 4 3) (2 4 3 1) (4 3 1 2) (3 1 2 4) (elems 4 sum 10 olaps 8))" "((1 2 5 2) (2 5 2 1) (5 2 1 2) (2 1 2 5) (elems 4 sum 10 olaps 10))" "((1 2 6 1) (2 6 1 1) (6 1 1 2) (1 1 2 6) (elems 4 sum 10 olaps 8))" "((1 3 1 5) (3 1 5 1) (1 5 1 3) (5 1 3 1) (elems 4 sum 10 olaps 10))" "((1 3 2 4) (3 2 4 1) (2 4 1 3) (4 1 3 2) (elems 4 sum 10 olaps 6))" "((1 3 3 3) (3 3 3 1) (3 3 1 3) (3 1 3 3) (elems 4 sum 10 olaps 10))" "((1 3 4 2) (3 4 2 1) (4 2 1 3) (2 1 3 4) (elems 4 sum 10 olaps 8))" "((1 3 5 1) (3 5 1 1) (5 1 1 3) (1 1 3 5) (elems 4 sum 10 olaps 6))" "((1 4 1 4) (4 1 4 1) (1 4 1 4) (4 1 4 1) (elems 4 sum 10 olaps 12))" "((1 4 2 3) (4 2 3 1) (2 3 1 4) (3 1 4 2) (elems 4 sum 10 olaps 6))" "((1 4 3 2) (4 3 2 1) (3 2 1 4) (2 1 4 3) (elems 4 sum 10 olaps 6))" "((1 4 4 1) (4 4 1 1) (4 1 1 4) (1 1 4 4) (elems 4 sum 10 olaps 10))" "((1 5 1 3) (5 1 3 1) (1 3 1 5) (3 1 5 1) (elems 4 sum 10 olaps 10))" "((1 5 2 2) (5 2 2 1) (2 2 1 5) (2 1 5 2) (elems 4 sum 10 olaps 6))" "((1 5 3 1) (5 3 1 1) (3 1 1 5) (1 1 5 3) (elems 4 sum 10 olaps 6))" "((1 6 1 2) (6 1 2 1) (1 2 1 6) (2 1 6 1) (elems 4 sum 10 olaps 8))" "((1 6 2 1) (6 2 1 1) (2 1 1 6) (1 1 6 2) (elems 4 sum 10 olaps 8))" "((2 1 1 6) (1 1 6 2) (1 6 2 1) (6 2 1 1) (elems 4 sum 10 olaps 8))" "((2 1 2 5) (1 2 5 2) (2 5 2 1) (5 2 1 2) (elems 4 sum 10 olaps 10))" "((2 1 3 4) (1 3 4 2) (3 4 2 1) (4 2 1 3) (elems 4 sum 10 olaps 8))" "((2 1 4 3) (1 4 3 2) (4 3 2 1) (3 2 1 4) (elems 4 sum 10 olaps 6))" "((2 1 5 2) (1 5 2 2) (5 2 2 1) (2 2 1 5) (elems 4 sum 10 olaps 6))" "((2 1 6 1) (1 6 1 2) (6 1 2 1) (1 2 1 6) (elems 4 sum 10 olaps 8))" "((2 2 1 5) (2 1 5 2) (1 5 2 2) (5 2 2 1) (elems 4 sum 10 olaps 6))" "((2 2 2 4) (2 2 4 2) (2 4 2 2) (4 2 2 2) (elems 4 sum 10 olaps 12))" "((2 2 3 3) (2 3 3 2) (3 3 2 2) (3 2 2 3) (elems 4 sum 10 olaps 10))" "((2 2 4 2) (2 4 2 2) (4 2 2 2) (2 2 2 4) (elems 4 sum 10 olaps 12))" "((2 2 5 1) (2 5 1 2) (5 1 2 2) (1 2 2 5) (elems 4 sum 10 olaps 6))" "((2 3 1 4) (3 1 4 2) (1 4 2 3) (4 2 3 1) (elems 4 sum 10 olaps 6))" "((2 3 2 3) (3 2 3 2) (2 3 2 3) (3 2 3 2) (elems 4 sum 10 olaps 12))" "((2 3 3 2) (3 3 2 2) (3 2 2 3) (2 2 3 3) (elems 4 sum 10 olaps 10))" "((2 3 4 1) (3 4 1 2) (4 1 2 3) (1 2 3 4) (elems 4 sum 10 olaps 6))" "((2 4 1 3) (4 1 3 2) (1 3 2 4) (3 2 4 1) (elems 4 sum 10 olaps 6))" "((2 4 2 2) (4 2 2 2) (2 2 2 4) (2 2 4 2) (elems 4 sum 10 olaps 12))" "((2 4 3 1) (4 3 1 2) (3 1 2 4) (1 2 4 3) (elems 4 sum 10 olaps 8))" "((2 5 1 2) (5 1 2 2) (1 2 2 5) (2 2 5 1) (elems 4 sum 10 olaps 6))" "((2 5 2 1) (5 2 1 2) (2 1 2 5) (1 2 5 2) (elems 4 sum 10 olaps 10))" "((2 6 1 1) (6 1 1 2) (1 1 2 6) (1 2 6 1) (elems 4 sum 10 olaps 8))" "((3 1 1 5) (1 1 5 3) (1 5 3 1) (5 3 1 1) (elems 4 sum 10 olaps 6))" "((3 1 2 4) (1 2 4 3) (2 4 3 1) (4 3 1 2) (elems 4 sum 10 olaps 8))" "((3 1 3 3) (1 3 3 3) (3 3 3 1) (3 3 1 3) (elems 4 sum 10 olaps 10))" "((3 1 4 2) (1 4 2 3) (4 2 3 1) (2 3 1 4) (elems 4 sum 10 olaps 6))" "((3 1 5 1) (1 5 1 3) (5 1 3 1) (1 3 1 5) (elems 4 sum 10 olaps 10))" "((3 2 1 4) (2 1 4 3) (1 4 3 2) (4 3 2 1) (elems 4 sum 10 olaps 6))" "((3 2 2 3) (2 2 3 3) (2 3 3 2) (3 3 2 2) (elems 4 sum 10 olaps 10))" "((3 2 3 2) (2 3 2 3) (3 2 3 2) (2 3 2 3) (elems 4 sum 10 olaps 12))" "((3 2 4 1) (2 4 1 3) (4 1 3 2) (1 3 2 4) (elems 4 sum 10 olaps 6))" "((3 3 1 3) (3 1 3 3) (1 3 3 3) (3 3 3 1) (elems 4 sum 10 olaps 10))" "((3 3 2 2) (3 2 2 3) (2 2 3 3) (2 3 3 2) (elems 4 sum 10 olaps 10))" "((3 3 3 1) (3 3 1 3) (3 1 3 3) (1 3 3 3) (elems 4 sum 10 olaps 10))" "((3 4 1 2) (4 1 2 3) (1 2 3 4) (2 3 4 1) (elems 4 sum 10 olaps 6))" "((3 4 2 1) (4 2 1 3) (2 1 3 4) (1 3 4 2) (elems 4 sum 10 olaps 8))" "((3 5 1 1) (5 1 1 3) (1 1 3 5) (1 3 5 1) (elems 4 sum 10 olaps 6))" "((4 1 1 4) (1 1 4 4) (1 4 4 1) (4 4 1 1) (elems 4 sum 10 olaps 10))" "((4 1 2 3) (1 2 3 4) (2 3 4 1) (3 4 1 2) (elems 4 sum 10 olaps 6))" "((4 1 3 2) (1 3 2 4) (3 2 4 1) (2 4 1 3) (elems 4 sum 10 olaps 6))" "((4 1 4 1) (1 4 1 4) (4 1 4 1) (1 4 1 4) (elems 4 sum 10 olaps 12))" "((4 2 1 3) (2 1 3 4) (1 3 4 2) (3 4 2 1) (elems 4 sum 10 olaps 8))" "((4 2 2 2) (2 2 2 4) (2 2 4 2) (2 4 2 2) (elems 4 sum 10 olaps 12))" "((4 2 3 1) (2 3 1 4) (3 1 4 2) (1 4 2 3) (elems 4 sum 10 olaps 6))" "((4 3 1 2) (3 1 2 4) (1 2 4 3) (2 4 3 1) (elems 4 sum 10 olaps 8))" "((4 3 2 1) (3 2 1 4) (2 1 4 3) (1 4 3 2) (elems 4 sum 10 olaps 6))" "((4 4 1 1) (4 1 1 4) (1 1 4 4) (1 4 4 1) (elems 4 sum 10 olaps 10))" "((5 1 1 3) (1 1 3 5) (1 3 5 1) (3 5 1 1) (elems 4 sum 10 olaps 6))" "((5 1 2 2) (1 2 2 5) (2 2 5 1) (2 5 1 2) (elems 4 sum 10 olaps 6))" "((5 1 3 1) (1 3 1 5) (3 1 5 1) (1 5 1 3) (elems 4 sum 10 olaps 10))" "((5 2 1 2) (2 1 2 5) (1 2 5 2) (2 5 2 1) (elems 4 sum 10 olaps 10))" "((5 2 2 1) (2 2 1 5) (2 1 5 2) (1 5 2 2) (elems 4 sum 10 olaps 6))" "((5 3 1 1) (3 1 1 5) (1 1 5 3) (1 5 3 1) (elems 4 sum 10 olaps 6))" "((6 1 1 2) (1 1 2 6) (1 2 6 1) (2 6 1 1) (elems 4 sum 10 olaps 8))" "((6 1 2 1) (1 2 1 6) (2 1 6 1) (1 6 1 2) (elems 4 sum 10 olaps 8))" "((6 2 1 1) (2 1 1 6) (1 1 6 2) (1 6 2 1) (elems 4 sum 10 olaps 8))" "((1 1 2 8) (1 2 8 1) (2 8 1 1) (8 1 1 2) (elems 4 sum 12 olaps 8))" "((1 1 4 6) (1 4 6 1) (4 6 1 1) (6 1 1 4) (elems 4 sum 12 olaps 6))" "((1 1 5 5) (1 5 5 1) (5 5 1 1) (5 1 1 5) (elems 4 sum 12 olaps 10))" "((1 1 6 4) (1 6 4 1) (6 4 1 1) (4 1 1 6) (elems 4 sum 12 olaps 6))" "((1 1 8 2) (1 8 2 1) (8 2 1 1) (2 1 1 8) (elems 4 sum 12 olaps 8))" "((1 2 1 8) (2 1 8 1) (1 8 1 2) (8 1 2 1) (elems 4 sum 12 olaps 8))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "((1 2 5 4) (2 5 4 1) (5 4 1 2) (4 1 2 5) (elems 4 sum 12 olaps 4))" "((1 2 6 3) (2 6 3 1) (6 3 1 2) (3 1 2 6) (elems 4 sum 12 olaps 6))" "((1 2 8 1) (2 8 1 1) (8 1 1 2) (1 1 2 8) (elems 4 sum 12 olaps 8))" "((1 3 2 6) (3 2 6 1) (2 6 1 3) (6 1 3 2) (elems 4 sum 12 olaps 2))" "((1 3 3 5) (3 3 5 1) (3 5 1 3) (5 1 3 3) (elems 4 sum 12 olaps 6))" "((1 3 4 4) (3 4 4 1) (4 4 1 3) (4 1 3 4) (elems 4 sum 12 olaps 6))" "((1 3 5 3) (3 5 3 1) (5 3 1 3) (3 1 3 5) (elems 4 sum 12 olaps 8))" "((1 3 6 2) (3 6 2 1) (6 2 1 3) (2 1 3 6) (elems 4 sum 12 olaps 6))" "((1 4 1 6) (4 1 6 1) (1 6 1 4) (6 1 4 1) (elems 4 sum 12 olaps 10))" "((1 4 2 5) (4 2 5 1) (2 5 1 4) (5 1 4 2) (elems 4 sum 12 olaps 6))" "((1 4 3 4) (4 3 4 1) (3 4 1 4) (4 1 4 3) (elems 4 sum 12 olaps 8))" "((1 4 4 3) (4 4 3 1) (4 3 1 4) (3 1 4 4) (elems 4 sum 12 olaps 6))" "((1 4 5 2) (4 5 2 1) (5 2 1 4) (2 1 4 5) (elems 4 sum 12 olaps 4))" "((1 4 6 1) (4 6 1 1) (6 1 1 4) (1 1 4 6) (elems 4 sum 12 olaps 6))" "((1 5 1 5) (5 1 5 1) (1 5 1 5) (5 1 5 1) (elems 4 sum 12 olaps 12))" "((1 5 2 4) (5 2 4 1) (2 4 1 5) (4 1 5 2) (elems 4 sum 12 olaps 6))" "((1 5 3 3) (5 3 3 1) (3 3 1 5) (3 1 5 3) (elems 4 sum 12 olaps 6))" "((1 5 4 2) (5 4 2 1) (4 2 1 5) (2 1 5 4) (elems 4 sum 12 olaps 2))" "((1 5 5 1) (5 5 1 1) (5 1 1 5) (1 1 5 5) (elems 4 sum 12 olaps 10))" "((1 6 1 4) (6 1 4 1) (1 4 1 6) (4 1 6 1) (elems 4 sum 12 olaps 10))" "((1 6 2 3) (6 2 3 1) (2 3 1 6) (3 1 6 2) (elems 4 sum 12 olaps 2))" "((1 6 3 2) (6 3 2 1) (3 2 1 6) (2 1 6 3) (elems 4 sum 12 olaps 6))" "((1 6 4 1) (6 4 1 1) (4 1 1 6) (1 1 6 4) (elems 4 sum 12 olaps 6))" "((1 8 1 2) (8 1 2 1) (1 2 1 8) (2 1 8 1) (elems 4 sum 12 olaps 8))" "((1 8 2 1) (8 2 1 1) (2 1 1 8) (1 1 8 2) (elems 4 sum 12 olaps 8))" "((2 1 1 8) (1 1 8 2) (1 8 2 1) (8 2 1 1) (elems 4 sum 12 olaps 8))" "((2 1 3 6) (1 3 6 2) (3 6 2 1) (6 2 1 3) (elems 4 sum 12 olaps 6))" "((2 1 4 5) (1 4 5 2) (4 5 2 1) (5 2 1 4) (elems 4 sum 12 olaps 4))" "((2 1 5 4) (1 5 4 2) (5 4 2 1) (4 2 1 5) (elems 4 sum 12 olaps 2))" "((2 1 6 3) (1 6 3 2) (6 3 2 1) (3 2 1 6) (elems 4 sum 12 olaps 6))" "((2 1 8 1) (1 8 1 2) (8 1 2 1) (1 2 1 8) (elems 4 sum 12 olaps 8))" "((2 2 2 6) (2 2 6 2) (2 6 2 2) (6 2 2 2) (elems 4 sum 12 olaps 12))" "((2 2 3 5) (2 3 5 2) (3 5 2 2) (5 2 2 3) (elems 4 sum 12 olaps 8))" "((2 2 4 4) (2 4 4 2) (4 4 2 2) (4 2 2 4) (elems 4 sum 12 olaps 12))" "((2 2 5 3) (2 5 3 2) (5 3 2 2) (3 2 2 5) (elems 4 sum 12 olaps 8))" "((2 2 6 2) (2 6 2 2) (6 2 2 2) (2 2 2 6) (elems 4 sum 12 olaps 12))" "((2 3 1 6) (3 1 6 2) (1 6 2 3) (6 2 3 1) (elems 4 sum 12 olaps 2))" "((2 3 2 5) (3 2 5 2) (2 5 2 3) (5 2 3 2) (elems 4 sum 12 olaps 10))" "((2 3 3 4) (3 3 4 2) (3 4 2 3) (4 2 3 3) (elems 4 sum 12 olaps 6))" "((2 3 4 3) (3 4 3 2) (4 3 2 3) (3 2 3 4) (elems 4 sum 12 olaps 8))" "((2 3 5 2) (3 5 2 2) (5 2 2 3) (2 2 3 5) (elems 4 sum 12 olaps 8))" "((2 3 6 1) (3 6 1 2) (6 1 2 3) (1 2 3 6) (elems 4 sum 12 olaps 6))" "((2 4 1 5) (4 1 5 2) (1 5 2 4) (5 2 4 1) (elems 4 sum 12 olaps 6))" "((2 4 2 4) (4 2 4 2) (2 4 2 4) (4 2 4 2) (elems 4 sum 12 olaps 12))" "((2 4 3 3) (4 3 3 2) (3 3 2 4) (3 2 4 3) (elems 4 sum 12 olaps 6))" "((2 4 4 2) (4 4 2 2) (4 2 2 4) (2 2 4 4) (elems 4 sum 12 olaps 12))" "((2 4 5 1) (4 5 1 2) (5 1 2 4) (1 2 4 5) (elems 4 sum 12 olaps 2))" "((2 5 1 4) (5 1 4 2) (1 4 2 5) (4 2 5 1) (elems 4 sum 12 olaps 6))" "((2 5 2 3) (5 2 3 2) (2 3 2 5) (3 2 5 2) (elems 4 sum 12 olaps 10))" "((2 5 3 2) (5 3 2 2) (3 2 2 5) (2 2 5 3) (elems 4 sum 12 olaps 8))" "((2 5 4 1) (5 4 1 2) (4 1 2 5) (1 2 5 4) (elems 4 sum 12 olaps 4))" "((2 6 1 3) (6 1 3 2) (1 3 2 6) (3 2 6 1) (elems 4 sum 12 olaps 2))" "((2 6 2 2) (6 2 2 2) (2 2 2 6) (2 2 6 2) (elems 4 sum 12 olaps 12))" "((2 6 3 1) (6 3 1 2) (3 1 2 6) (1 2 6 3) (elems 4 sum 12 olaps 6))" "((2 8 1 1) (8 1 1 2) (1 1 2 8) (1 2 8 1) (elems 4 sum 12 olaps 8))" "((3 1 2 6) (1 2 6 3) (2 6 3 1) (6 3 1 2) (elems 4 sum 12 olaps 6))" "((3 1 3 5) (1 3 5 3) (3 5 3 1) (5 3 1 3) (elems 4 sum 12 olaps 8))" "((3 1 4 4) (1 4 4 3) (4 4 3 1) (4 3 1 4) (elems 4 sum 12 olaps 6))" "((3 1 5 3) (1 5 3 3) (5 3 3 1) (3 3 1 5) (elems 4 sum 12 olaps 6))" "((3 1 6 2) (1 6 2 3) (6 2 3 1) (2 3 1 6) (elems 4 sum 12 olaps 2))" "((3 2 1 6) (2 1 6 3) (1 6 3 2) (6 3 2 1) (elems 4 sum 12 olaps 6))" "((3 2 2 5) (2 2 5 3) (2 5 3 2) (5 3 2 2) (elems 4 sum 12 olaps 8))" "((3 2 3 4) (2 3 4 3) (3 4 3 2) (4 3 2 3) (elems 4 sum 12 olaps 8))" "((3 2 4 3) (2 4 3 3) (4 3 3 2) (3 3 2 4) (elems 4 sum 12 olaps 6))" "((3 2 5 2) (2 5 2 3) (5 2 3 2) (2 3 2 5) (elems 4 sum 12 olaps 10))" "((3 2 6 1) (2 6 1 3) (6 1 3 2) (1 3 2 6) (elems 4 sum 12 olaps 2))" "((3 3 1 5) (3 1 5 3) (1 5 3 3) (5 3 3 1) (elems 4 sum 12 olaps 6))" "((3 3 2 4) (3 2 4 3) (2 4 3 3) (4 3 3 2) (elems 4 sum 12 olaps 6))" "((3 3 3 3) (3 3 3 3) (3 3 3 3) (3 3 3 3) (elems 4 sum 12 olaps 12))" "((3 3 4 2) (3 4 2 3) (4 2 3 3) (2 3 3 4) (elems 4 sum 12 olaps 6))" "((3 3 5 1) (3 5 1 3) (5 1 3 3) (1 3 3 5) (elems 4 sum 12 olaps 6))" "((3 4 1 4) (4 1 4 3) (1 4 3 4) (4 3 4 1) (elems 4 sum 12 olaps 8))" "((3 4 2 3) (4 2 3 3) (2 3 3 4) (3 3 4 2) (elems 4 sum 12 olaps 6))" "((3 4 3 2) (4 3 2 3) (3 2 3 4) (2 3 4 3) (elems 4 sum 12 olaps 8))" "((3 4 4 1) (4 4 1 3) (4 1 3 4) (1 3 4 4) (elems 4 sum 12 olaps 6))" "((3 5 1 3) (5 1 3 3) (1 3 3 5) (3 3 5 1) (elems 4 sum 12 olaps 6))" "((3 5 2 2) (5 2 2 3) (2 2 3 5) (2 3 5 2) (elems 4 sum 12 olaps 8))" "((3 5 3 1) (5 3 1 3) (3 1 3 5) (1 3 5 3) (elems 4 sum 12 olaps 8))" "((3 6 1 2) (6 1 2 3) (1 2 3 6) (2 3 6 1) (elems 4 sum 12 olaps 6))" "((3 6 2 1) (6 2 1 3) (2 1 3 6) (1 3 6 2) (elems 4 sum 12 olaps 6))" "((4 1 1 6) (1 1 6 4) (1 6 4 1) (6 4 1 1) (elems 4 sum 12 olaps 6))" "((4 1 2 5) (1 2 5 4) (2 5 4 1) (5 4 1 2) (elems 4 sum 12 olaps 4))" "((4 1 3 4) (1 3 4 4) (3 4 4 1) (4 4 1 3) (elems 4 sum 12 olaps 6))" "((4 1 4 3) (1 4 3 4) (4 3 4 1) (3 4 1 4) (elems 4 sum 12 olaps 8))" "((4 1 5 2) (1 5 2 4) (5 2 4 1) (2 4 1 5) (elems 4 sum 12 olaps 6))" "((4 1 6 1) (1 6 1 4) (6 1 4 1) (1 4 1 6) (elems 4 sum 12 olaps 10))" "((4 2 1 5) (2 1 5 4) (1 5 4 2) (5 4 2 1) (elems 4 sum 12 olaps 2))" "((4 2 2 4) (2 2 4 4) (2 4 4 2) (4 4 2 2) (elems 4 sum 12 olaps 12))" "((4 2 3 3) (2 3 3 4) (3 3 4 2) (3 4 2 3) (elems 4 sum 12 olaps 6))" "((4 2 4 2) (2 4 2 4) (4 2 4 2) (2 4 2 4) (elems 4 sum 12 olaps 12))" "((4 2 5 1) (2 5 1 4) (5 1 4 2) (1 4 2 5) (elems 4 sum 12 olaps 6))" "((4 3 1 4) (3 1 4 4) (1 4 4 3) (4 4 3 1) (elems 4 sum 12 olaps 6))" "((4 3 2 3) (3 2 3 4) (2 3 4 3) (3 4 3 2) (elems 4 sum 12 olaps 8))" "((4 3 3 2) (3 3 2 4) (3 2 4 3) (2 4 3 3) (elems 4 sum 12 olaps 6))" "((4 3 4 1) (3 4 1 4) (4 1 4 3) (1 4 3 4) (elems 4 sum 12 olaps 8))" "((4 4 1 3) (4 1 3 4) (1 3 4 4) (3 4 4 1) (elems 4 sum 12 olaps 6))" "((4 4 2 2) (4 2 2 4) (2 2 4 4) (2 4 4 2) (elems 4 sum 12 olaps 12))" "((4 4 3 1) (4 3 1 4) (3 1 4 4) (1 4 4 3) (elems 4 sum 12 olaps 6))" "((4 5 1 2) (5 1 2 4) (1 2 4 5) (2 4 5 1) (elems 4 sum 12 olaps 2))" "((4 5 2 1) (5 2 1 4) (2 1 4 5) (1 4 5 2) (elems 4 sum 12 olaps 4))" "((4 6 1 1) (6 1 1 4) (1 1 4 6) (1 4 6 1) (elems 4 sum 12 olaps 6))" "((5 1 1 5) (1 1 5 5) (1 5 5 1) (5 5 1 1) (elems 4 sum 12 olaps 10))" "((5 1 2 4) (1 2 4 5) (2 4 5 1) (4 5 1 2) (elems 4 sum 12 olaps 2))" "((5 1 3 3) (1 3 3 5) (3 3 5 1) (3 5 1 3) (elems 4 sum 12 olaps 6))" "((5 1 4 2) (1 4 2 5) (4 2 5 1) (2 5 1 4) (elems 4 sum 12 olaps 6))" "((5 1 5 1) (1 5 1 5) (5 1 5 1) (1 5 1 5) (elems 4 sum 12 olaps 12))" "((5 2 1 4) (2 1 4 5) (1 4 5 2) (4 5 2 1) (elems 4 sum 12 olaps 4))" "((5 2 2 3) (2 2 3 5) (2 3 5 2) (3 5 2 2) (elems 4 sum 12 olaps 8))" "((5 2 3 2) (2 3 2 5) (3 2 5 2) (2 5 2 3) (elems 4 sum 12 olaps 10))" "((5 2 4 1) (2 4 1 5) (4 1 5 2) (1 5 2 4) (elems 4 sum 12 olaps 6))" "((5 3 1 3) (3 1 3 5) (1 3 5 3) (3 5 3 1) (elems 4 sum 12 olaps 8))" "((5 3 2 2) (3 2 2 5) (2 2 5 3) (2 5 3 2) (elems 4 sum 12 olaps 8))" "((5 3 3 1) (3 3 1 5) (3 1 5 3) (1 5 3 3) (elems 4 sum 12 olaps 6))" "((5 4 1 2) (4 1 2 5) (1 2 5 4) (2 5 4 1) (elems 4 sum 12 olaps 4))" "((5 4 2 1) (4 2 1 5) (2 1 5 4) (1 5 4 2) (elems 4 sum 12 olaps 2))" "((5 5 1 1) (5 1 1 5) (1 1 5 5) (1 5 5 1) (elems 4 sum 12 olaps 10))" "((6 1 1 4) (1 1 4 6) (1 4 6 1) (4 6 1 1) (elems 4 sum 12 olaps 6))" "((6 1 2 3) (1 2 3 6) (2 3 6 1) (3 6 1 2) (elems 4 sum 12 olaps 6))" "((6 1 3 2) (1 3 2 6) (3 2 6 1) (2 6 1 3) (elems 4 sum 12 olaps 2))" "((6 1 4 1) (1 4 1 6) (4 1 6 1) (1 6 1 4) (elems 4 sum 12 olaps 10))" "((6 2 1 3) (2 1 3 6) (1 3 6 2) (3 6 2 1) (elems 4 sum 12 olaps 6))" "((6 2 2 2) (2 2 2 6) (2 2 6 2) (2 6 2 2) (elems 4 sum 12 olaps 12))" "((6 2 3 1) (2 3 1 6) (3 1 6 2) (1 6 2 3) (elems 4 sum 12 olaps 2))" "((6 3 1 2) (3 1 2 6) (1 2 6 3) (2 6 3 1) (elems 4 sum 12 olaps 6))" "((6 3 2 1) (3 2 1 6) (2 1 6 3) (1 6 3 2) (elems 4 sum 12 olaps 6))" "((6 4 1 1) (4 1 1 6) (1 1 6 4) (1 6 4 1) (elems 4 sum 12 olaps 6))" "((8 1 1 2) (1 1 2 8) (1 2 8 1) (2 8 1 1) (elems 4 sum 12 olaps 8))" "((8 1 2 1) (1 2 1 8) (2 1 8 1) (1 8 1 2) (elems 4 sum 12 olaps 8))" "((8 2 1 1) (2 1 1 8) (1 1 8 2) (1 8 2 1) (elems 4 sum 12 olaps 8))" "((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (elems 5 sum 5 olaps 20))" "((1 1 1 1 2) (1 1 1 2 1) (1 1 2 1 1) (1 2 1 1 1) (2 1 1 1 1) (elems 5 sum 6 olaps 20))" "((1 1 1 2 1) (1 1 2 1 1) (1 2 1 1 1) (2 1 1 1 1) (1 1 1 1 2) (elems 5 sum 6 olaps 20))" "((1 1 2 1 1) (1 2 1 1 1) (2 1 1 1 1) (1 1 1 1 2) (1 1 1 2 1) (elems 5 sum 6 olaps 20))" "((1 2 1 1 1) (2 1 1 1 1) (1 1 1 1 2) (1 1 1 2 1) (1 1 2 1 1) (elems 5 sum 6 olaps 20))" "((2 1 1 1 1) (1 1 1 1 2) (1 1 1 2 1) (1 1 2 1 1) (1 2 1 1 1) (elems 5 sum 6 olaps 20))" "((1 1 1 1 4) (1 1 1 4 1) (1 1 4 1 1) (1 4 1 1 1) (4 1 1 1 1) (elems 5 sum 8 olaps 20))" "((1 1 1 2 3) (1 1 2 3 1) (1 2 3 1 1) (2 3 1 1 1) (3 1 1 1 2) (elems 5 sum 8 olaps 20))" "((1 1 1 3 2) (1 1 3 2 1) (1 3 2 1 1) (3 2 1 1 1) (2 1 1 1 3) (elems 5 sum 8 olaps 20))" "((1 1 1 4 1) (1 1 4 1 1) (1 4 1 1 1) (4 1 1 1 1) (1 1 1 1 4) (elems 5 sum 8 olaps 20))" "((1 1 2 1 3) (1 2 1 3 1) (2 1 3 1 1) (1 3 1 1 2) (3 1 1 2 1) (elems 5 sum 8 olaps 20))" "((1 1 2 2 2) (1 2 2 2 1) (2 2 2 1 1) (2 2 1 1 2) (2 1 1 2 2) (elems 5 sum 8 olaps 20))" "((1 1 2 3 1) (1 2 3 1 1) (2 3 1 1 1) (3 1 1 1 2) (1 1 1 2 3) (elems 5 sum 8 olaps 20))" "((1 1 3 1 2) (1 3 1 2 1) (3 1 2 1 1) (1 2 1 1 3) (2 1 1 3 1) (elems 5 sum 8 olaps 20))" "((1 1 3 2 1) (1 3 2 1 1) (3 2 1 1 1) (2 1 1 1 3) (1 1 1 3 2) (elems 5 sum 8 olaps 20))" "((1 1 4 1 1) (1 4 1 1 1) (4 1 1 1 1) (1 1 1 1 4) (1 1 1 4 1) (elems 5 sum 8 olaps 20))" "((1 2 1 1 3) (2 1 1 3 1) (1 1 3 1 2) (1 3 1 2 1) (3 1 2 1 1) (elems 5 sum 8 olaps 20))" "((1 2 1 2 2) (2 1 2 2 1) (1 2 2 1 2) (2 2 1 2 1) (2 1 2 1 2) (elems 5 sum 8 olaps 20))" "((1 2 1 3 1) (2 1 3 1 1) (1 3 1 1 2) (3 1 1 2 1) (1 1 2 1 3) (elems 5 sum 8 olaps 20))" "((1 2 2 1 2) (2 2 1 2 1) (2 1 2 1 2) (1 2 1 2 2) (2 1 2 2 1) (elems 5 sum 8 olaps 20))" "((1 2 2 2 1) (2 2 2 1 1) (2 2 1 1 2) (2 1 1 2 2) (1 1 2 2 2) (elems 5 sum 8 olaps 20))" "((1 2 3 1 1) (2 3 1 1 1) (3 1 1 1 2) (1 1 1 2 3) (1 1 2 3 1) (elems 5 sum 8 olaps 20))" "((1 3 1 1 2) (3 1 1 2 1) (1 1 2 1 3) (1 2 1 3 1) (2 1 3 1 1) (elems 5 sum 8 olaps 20))" "((1 3 1 2 1) (3 1 2 1 1) (1 2 1 1 3) (2 1 1 3 1) (1 1 3 1 2) (elems 5 sum 8 olaps 20))" "((1 3 2 1 1) (3 2 1 1 1) (2 1 1 1 3) (1 1 1 3 2) (1 1 3 2 1) (elems 5 sum 8 olaps 20))" "((1 4 1 1 1) (4 1 1 1 1) (1 1 1 1 4) (1 1 1 4 1) (1 1 4 1 1) (elems 5 sum 8 olaps 20))" "((2 1 1 1 3) (1 1 1 3 2) (1 1 3 2 1) (1 3 2 1 1) (3 2 1 1 1) (elems 5 sum 8 olaps 20))" "((2 1 1 2 2) (1 1 2 2 2) (1 2 2 2 1) (2 2 2 1 1) (2 2 1 1 2) (elems 5 sum 8 olaps 20))" "((2 1 1 3 1) (1 1 3 1 2) (1 3 1 2 1) (3 1 2 1 1) (1 2 1 1 3) (elems 5 sum 8 olaps 20))" "((2 1 2 1 2) (1 2 1 2 2) (2 1 2 2 1) (1 2 2 1 2) (2 2 1 2 1) (elems 5 sum 8 olaps 20))" "((2 1 2 2 1) (1 2 2 1 2) (2 2 1 2 1) (2 1 2 1 2) (1 2 1 2 2) (elems 5 sum 8 olaps 20))" "((2 1 3 1 1) (1 3 1 1 2) (3 1 1 2 1) (1 1 2 1 3) (1 2 1 3 1) (elems 5 sum 8 olaps 20))" "((2 2 1 1 2) (2 1 1 2 2) (1 1 2 2 2) (1 2 2 2 1) (2 2 2 1 1) (elems 5 sum 8 olaps 20))" "((2 2 1 2 1) (2 1 2 1 2) (1 2 1 2 2) (2 1 2 2 1) (1 2 2 1 2) (elems 5 sum 8 olaps 20))" "((2 2 2 1 1) (2 2 1 1 2) (2 1 1 2 2) (1 1 2 2 2) (1 2 2 2 1) (elems 5 sum 8 olaps 20))" "((2 3 1 1 1) (3 1 1 1 2) (1 1 1 2 3) (1 1 2 3 1) (1 2 3 1 1) (elems 5 sum 8 olaps 20))" "((3 1 1 1 2) (1 1 1 2 3) (1 1 2 3 1) (1 2 3 1 1) (2 3 1 1 1) (elems 5 sum 8 olaps 20))" "((3 1 1 2 1) (1 1 2 1 3) (1 2 1 3 1) (2 1 3 1 1) (1 3 1 1 2) (elems 5 sum 8 olaps 20))" "((3 1 2 1 1) (1 2 1 1 3) (2 1 1 3 1) (1 1 3 1 2) (1 3 1 2 1) (elems 5 sum 8 olaps 20))" "((3 2 1 1 1) (2 1 1 1 3) (1 1 1 3 2) (1 1 3 2 1) (1 3 2 1 1) (elems 5 sum 8 olaps 20))" "((4 1 1 1 1) (1 1 1 1 4) (1 1 1 4 1) (1 1 4 1 1) (1 4 1 1 1) (elems 5 sum 8 olaps 20))" "((1 1 1 1 6) (1 1 1 6 1) (1 1 6 1 1) (1 6 1 1 1) (6 1 1 1 1) (elems 5 sum 10 olaps 18))" "((1 1 1 2 5) (1 1 2 5 1) (1 2 5 1 1) (2 5 1 1 1) (5 1 1 1 2) (elems 5 sum 10 olaps 18))" "((1 1 1 3 4) (1 1 3 4 1) (1 3 4 1 1) (3 4 1 1 1) (4 1 1 1 3) (elems 5 sum 10 olaps 20))" "((1 1 1 4 3) (1 1 4 3 1) (1 4 3 1 1) (4 3 1 1 1) (3 1 1 1 4) (elems 5 sum 10 olaps 20))" "((1 1 1 5 2) (1 1 5 2 1) (1 5 2 1 1) (5 2 1 1 1) (2 1 1 1 5) (elems 5 sum 10 olaps 18))" "((1 1 1 6 1) (1 1 6 1 1) (1 6 1 1 1) (6 1 1 1 1) (1 1 1 1 6) (elems 5 sum 10 olaps 18))" "((1 1 2 1 5) (1 2 1 5 1) (2 1 5 1 1) (1 5 1 1 2) (5 1 1 2 1) (elems 5 sum 10 olaps 20))" "((1 1 2 2 4) (1 2 2 4 1) (2 2 4 1 1) (2 4 1 1 2) (4 1 1 2 2) (elems 5 sum 10 olaps 18))" "((1 1 2 3 3) (1 2 3 3 1) (2 3 3 1 1) (3 3 1 1 2) (3 1 1 2 3) (elems 5 sum 10 olaps 20))" "((1 1 2 4 2) (1 2 4 2 1) (2 4 2 1 1) (4 2 1 1 2) (2 1 1 2 4) (elems 5 sum 10 olaps 20))" "((1 1 2 5 1) (1 2 5 1 1) (2 5 1 1 1) (5 1 1 1 2) (1 1 1 2 5) (elems 5 sum 10 olaps 18))" "((1 1 3 1 4) (1 3 1 4 1) (3 1 4 1 1) (1 4 1 1 3) (4 1 1 3 1) (elems 5 sum 10 olaps 16))" "((1 1 3 2 3) (1 3 2 3 1) (3 2 3 1 1) (2 3 1 1 3) (3 1 1 3 2) (elems 5 sum 10 olaps 20))" "((1 1 3 3 2) (1 3 3 2 1) (3 3 2 1 1) (3 2 1 1 3) (2 1 1 3 3) (elems 5 sum 10 olaps 20))" "((1 1 3 4 1) (1 3 4 1 1) (3 4 1 1 1) (4 1 1 1 3) (1 1 1 3 4) (elems 5 sum 10 olaps 20))" "((1 1 4 1 3) (1 4 1 3 1) (4 1 3 1 1) (1 3 1 1 4) (3 1 1 4 1) (elems 5 sum 10 olaps 16))" "((1 1 4 2 2) (1 4 2 2 1) (4 2 2 1 1) (2 2 1 1 4) (2 1 1 4 2) (elems 5 sum 10 olaps 18))" "((1 1 4 3 1) (1 4 3 1 1) (4 3 1 1 1) (3 1 1 1 4) (1 1 1 4 3) (elems 5 sum 10 olaps 20))" "((1 1 5 1 2) (1 5 1 2 1) (5 1 2 1 1) (1 2 1 1 5) (2 1 1 5 1) (elems 5 sum 10 olaps 20))" "((1 1 5 2 1) (1 5 2 1 1) (5 2 1 1 1) (2 1 1 1 5) (1 1 1 5 2) (elems 5 sum 10 olaps 18))" "((1 1 6 1 1) (1 6 1 1 1) (6 1 1 1 1) (1 1 1 1 6) (1 1 1 6 1) (elems 5 sum 10 olaps 18))" "((1 2 1 1 5) (2 1 1 5 1) (1 1 5 1 2) (1 5 1 2 1) (5 1 2 1 1) (elems 5 sum 10 olaps 20))" "((1 2 1 2 4) (2 1 2 4 1) (1 2 4 1 2) (2 4 1 2 1) (4 1 2 1 2) (elems 5 sum 10 olaps 20))" "((1 2 1 3 3) (2 1 3 3 1) (1 3 3 1 2) (3 3 1 2 1) (3 1 2 1 3) (elems 5 sum 10 olaps 18))" "((1 2 1 4 2) (2 1 4 2 1) (1 4 2 1 2) (4 2 1 2 1) (2 1 2 1 4) (elems 5 sum 10 olaps 20))" "((1 2 1 5 1) (2 1 5 1 1) (1 5 1 1 2) (5 1 1 2 1) (1 1 2 1 5) (elems 5 sum 10 olaps 20))" "((1 2 2 1 4) (2 2 1 4 1) (2 1 4 1 2) (1 4 1 2 2) (4 1 2 2 1) (elems 5 sum 10 olaps 20))" "((1 2 2 2 3) (2 2 2 3 1) (2 2 3 1 2) (2 3 1 2 2) (3 1 2 2 2) (elems 5 sum 10 olaps 18))" "((1 2 2 3 2) (2 2 3 2 1) (2 3 2 1 2) (3 2 1 2 2) (2 1 2 2 3) (elems 5 sum 10 olaps 16))" "((1 2 2 4 1) (2 2 4 1 1) (2 4 1 1 2) (4 1 1 2 2) (1 1 2 2 4) (elems 5 sum 10 olaps 18))" "((1 2 3 1 3) (2 3 1 3 1) (3 1 3 1 2) (1 3 1 2 3) (3 1 2 3 1) (elems 5 sum 10 olaps 18))" "((1 2 3 2 2) (2 3 2 2 1) (3 2 2 1 2) (2 2 1 2 3) (2 1 2 3 2) (elems 5 sum 10 olaps 16))" "((1 2 3 3 1) (2 3 3 1 1) (3 3 1 1 2) (3 1 1 2 3) (1 1 2 3 3) (elems 5 sum 10 olaps 20))" "((1 2 4 1 2) (2 4 1 2 1) (4 1 2 1 2) (1 2 1 2 4) (2 1 2 4 1) (elems 5 sum 10 olaps 20))" "((1 2 4 2 1) (2 4 2 1 1) (4 2 1 1 2) (2 1 1 2 4) (1 1 2 4 2) (elems 5 sum 10 olaps 20))" "((1 2 5 1 1) (2 5 1 1 1) (5 1 1 1 2) (1 1 1 2 5) (1 1 2 5 1) (elems 5 sum 10 olaps 18))" "((1 3 1 1 4) (3 1 1 4 1) (1 1 4 1 3) (1 4 1 3 1) (4 1 3 1 1) (elems 5 sum 10 olaps 16))" "((1 3 1 2 3) (3 1 2 3 1) (1 2 3 1 3) (2 3 1 3 1) (3 1 3 1 2) (elems 5 sum 10 olaps 18))" "((1 3 1 3 2) (3 1 3 2 1) (1 3 2 1 3) (3 2 1 3 1) (2 1 3 1 3) (elems 5 sum 10 olaps 18))" "((1 3 1 4 1) (3 1 4 1 1) (1 4 1 1 3) (4 1 1 3 1) (1 1 3 1 4) (elems 5 sum 10 olaps 16))" "((1 3 2 1 3) (3 2 1 3 1) (2 1 3 1 3) (1 3 1 3 2) (3 1 3 2 1) (elems 5 sum 10 olaps 18))" "((1 3 2 2 2) (3 2 2 2 1) (2 2 2 1 3) (2 2 1 3 2) (2 1 3 2 2) (elems 5 sum 10 olaps 18))" "((1 3 2 3 1) (3 2 3 1 1) (2 3 1 1 3) (3 1 1 3 2) (1 1 3 2 3) (elems 5 sum 10 olaps 20))" "((1 3 3 1 2) (3 3 1 2 1) (3 1 2 1 3) (1 2 1 3 3) (2 1 3 3 1) (elems 5 sum 10 olaps 18))" "((1 3 3 2 1) (3 3 2 1 1) (3 2 1 1 3) (2 1 1 3 3) (1 1 3 3 2) (elems 5 sum 10 olaps 20))" "((1 3 4 1 1) (3 4 1 1 1) (4 1 1 1 3) (1 1 1 3 4) (1 1 3 4 1) (elems 5 sum 10 olaps 20))" "((1 4 1 1 3) (4 1 1 3 1) (1 1 3 1 4) (1 3 1 4 1) (3 1 4 1 1) (elems 5 sum 10 olaps 16))" "((1 4 1 2 2) (4 1 2 2 1) (1 2 2 1 4) (2 2 1 4 1) (2 1 4 1 2) (elems 5 sum 10 olaps 20))" "((1 4 1 3 1) (4 1 3 1 1) (1 3 1 1 4) (3 1 1 4 1) (1 1 4 1 3) (elems 5 sum 10 olaps 16))" "((1 4 2 1 2) (4 2 1 2 1) (2 1 2 1 4) (1 2 1 4 2) (2 1 4 2 1) (elems 5 sum 10 olaps 20))" "((1 4 2 2 1) (4 2 2 1 1) (2 2 1 1 4) (2 1 1 4 2) (1 1 4 2 2) (elems 5 sum 10 olaps 18))" "((1 4 3 1 1) (4 3 1 1 1) (3 1 1 1 4) (1 1 1 4 3) (1 1 4 3 1) (elems 5 sum 10 olaps 20))" "((1 5 1 1 2) (5 1 1 2 1) (1 1 2 1 5) (1 2 1 5 1) (2 1 5 1 1) (elems 5 sum 10 olaps 20))" "((1 5 1 2 1) (5 1 2 1 1) (1 2 1 1 5) (2 1 1 5 1) (1 1 5 1 2) (elems 5 sum 10 olaps 20))" "((1 5 2 1 1) (5 2 1 1 1) (2 1 1 1 5) (1 1 1 5 2) (1 1 5 2 1) (elems 5 sum 10 olaps 18))" "((1 6 1 1 1) (6 1 1 1 1) (1 1 1 1 6) (1 1 1 6 1) (1 1 6 1 1) (elems 5 sum 10 olaps 18))" "((2 1 1 1 5) (1 1 1 5 2) (1 1 5 2 1) (1 5 2 1 1) (5 2 1 1 1) (elems 5 sum 10 olaps 18))" "((2 1 1 2 4) (1 1 2 4 2) (1 2 4 2 1) (2 4 2 1 1) (4 2 1 1 2) (elems 5 sum 10 olaps 20))" "((2 1 1 3 3) (1 1 3 3 2) (1 3 3 2 1) (3 3 2 1 1) (3 2 1 1 3) (elems 5 sum 10 olaps 20))" "((2 1 1 4 2) (1 1 4 2 2) (1 4 2 2 1) (4 2 2 1 1) (2 2 1 1 4) (elems 5 sum 10 olaps 18))" "((2 1 1 5 1) (1 1 5 1 2) (1 5 1 2 1) (5 1 2 1 1) (1 2 1 1 5) (elems 5 sum 10 olaps 20))" "((2 1 2 1 4) (1 2 1 4 2) (2 1 4 2 1) (1 4 2 1 2) (4 2 1 2 1) (elems 5 sum 10 olaps 20))" "((2 1 2 2 3) (1 2 2 3 2) (2 2 3 2 1) (2 3 2 1 2) (3 2 1 2 2) (elems 5 sum 10 olaps 16))" "((2 1 2 3 2) (1 2 3 2 2) (2 3 2 2 1) (3 2 2 1 2) (2 2 1 2 3) (elems 5 sum 10 olaps 16))" "((2 1 2 4 1) (1 2 4 1 2) (2 4 1 2 1) (4 1 2 1 2) (1 2 1 2 4) (elems 5 sum 10 olaps 20))" "((2 1 3 1 3) (1 3 1 3 2) (3 1 3 2 1) (1 3 2 1 3) (3 2 1 3 1) (elems 5 sum 10 olaps 18))" "((2 1 3 2 2) (1 3 2 2 2) (3 2 2 2 1) (2 2 2 1 3) (2 2 1 3 2) (elems 5 sum 10 olaps 18))" "((2 1 3 3 1) (1 3 3 1 2) (3 3 1 2 1) (3 1 2 1 3) (1 2 1 3 3) (elems 5 sum 10 olaps 18))" "((2 1 4 1 2) (1 4 1 2 2) (4 1 2 2 1) (1 2 2 1 4) (2 2 1 4 1) (elems 5 sum 10 olaps 20))" "((2 1 4 2 1) (1 4 2 1 2) (4 2 1 2 1) (2 1 2 1 4) (1 2 1 4 2) (elems 5 sum 10 olaps 20))" "((2 1 5 1 1) (1 5 1 1 2) (5 1 1 2 1) (1 1 2 1 5) (1 2 1 5 1) (elems 5 sum 10 olaps 20))" "((2 2 1 1 4) (2 1 1 4 2) (1 1 4 2 2) (1 4 2 2 1) (4 2 2 1 1) (elems 5 sum 10 olaps 18))" "((2 2 1 2 3) (2 1 2 3 2) (1 2 3 2 2) (2 3 2 2 1) (3 2 2 1 2) (elems 5 sum 10 olaps 16))" "((2 2 1 3 2) (2 1 3 2 2) (1 3 2 2 2) (3 2 2 2 1) (2 2 2 1 3) (elems 5 sum 10 olaps 18))" "((2 2 1 4 1) (2 1 4 1 2) (1 4 1 2 2) (4 1 2 2 1) (1 2 2 1 4) (elems 5 sum 10 olaps 20))" "((2 2 2 1 3) (2 2 1 3 2) (2 1 3 2 2) (1 3 2 2 2) (3 2 2 2 1) (elems 5 sum 10 olaps 18))" "((2 2 2 2 2) (2 2 2 2 2) (2 2 2 2 2) (2 2 2 2 2) (2 2 2 2 2) (elems 5 sum 10 olaps 20))" "((2 2 2 3 1) (2 2 3 1 2) (2 3 1 2 2) (3 1 2 2 2) (1 2 2 2 3) (elems 5 sum 10 olaps 18))" "((2 2 3 1 2) (2 3 1 2 2) (3 1 2 2 2) (1 2 2 2 3) (2 2 2 3 1) (elems 5 sum 10 olaps 18))" "((2 2 3 2 1) (2 3 2 1 2) (3 2 1 2 2) (2 1 2 2 3) (1 2 2 3 2) (elems 5 sum 10 olaps 16))" "((2 2 4 1 1) (2 4 1 1 2) (4 1 1 2 2) (1 1 2 2 4) (1 2 2 4 1) (elems 5 sum 10 olaps 18))" "((2 3 1 1 3) (3 1 1 3 2) (1 1 3 2 3) (1 3 2 3 1) (3 2 3 1 1) (elems 5 sum 10 olaps 20))" "((2 3 1 2 2) (3 1 2 2 2) (1 2 2 2 3) (2 2 2 3 1) (2 2 3 1 2) (elems 5 sum 10 olaps 18))" "((2 3 1 3 1) (3 1 3 1 2) (1 3 1 2 3) (3 1 2 3 1) (1 2 3 1 3) (elems 5 sum 10 olaps 18))" "((2 3 2 1 2) (3 2 1 2 2) (2 1 2 2 3) (1 2 2 3 2) (2 2 3 2 1) (elems 5 sum 10 olaps 16))" "((2 3 2 2 1) (3 2 2 1 2) (2 2 1 2 3) (2 1 2 3 2) (1 2 3 2 2) (elems 5 sum 10 olaps 16))" "((2 3 3 1 1) (3 3 1 1 2) (3 1 1 2 3) (1 1 2 3 3) (1 2 3 3 1) (elems 5 sum 10 olaps 20))" "((2 4 1 1 2) (4 1 1 2 2) (1 1 2 2 4) (1 2 2 4 1) (2 2 4 1 1) (elems 5 sum 10 olaps 18))" "((2 4 1 2 1) (4 1 2 1 2) (1 2 1 2 4) (2 1 2 4 1) (1 2 4 1 2) (elems 5 sum 10 olaps 20))" "((2 4 2 1 1) (4 2 1 1 2) (2 1 1 2 4) (1 1 2 4 2) (1 2 4 2 1) (elems 5 sum 10 olaps 20))" "((2 5 1 1 1) (5 1 1 1 2) (1 1 1 2 5) (1 1 2 5 1) (1 2 5 1 1) (elems 5 sum 10 olaps 18))" "((3 1 1 1 4) (1 1 1 4 3) (1 1 4 3 1) (1 4 3 1 1) (4 3 1 1 1) (elems 5 sum 10 olaps 20))" "((3 1 1 2 3) (1 1 2 3 3) (1 2 3 3 1) (2 3 3 1 1) (3 3 1 1 2) (elems 5 sum 10 olaps 20))" "((3 1 1 3 2) (1 1 3 2 3) (1 3 2 3 1) (3 2 3 1 1) (2 3 1 1 3) (elems 5 sum 10 olaps 20))" "((3 1 1 4 1) (1 1 4 1 3) (1 4 1 3 1) (4 1 3 1 1) (1 3 1 1 4) (elems 5 sum 10 olaps 16))" "((3 1 2 1 3) (1 2 1 3 3) (2 1 3 3 1) (1 3 3 1 2) (3 3 1 2 1) (elems 5 sum 10 olaps 18))" "((3 1 2 2 2) (1 2 2 2 3) (2 2 2 3 1) (2 2 3 1 2) (2 3 1 2 2) (elems 5 sum 10 olaps 18))" "((3 1 2 3 1) (1 2 3 1 3) (2 3 1 3 1) (3 1 3 1 2) (1 3 1 2 3) (elems 5 sum 10 olaps 18))" "((3 1 3 1 2) (1 3 1 2 3) (3 1 2 3 1) (1 2 3 1 3) (2 3 1 3 1) (elems 5 sum 10 olaps 18))" "((3 1 3 2 1) (1 3 2 1 3) (3 2 1 3 1) (2 1 3 1 3) (1 3 1 3 2) (elems 5 sum 10 olaps 18))" "((3 1 4 1 1) (1 4 1 1 3) (4 1 1 3 1) (1 1 3 1 4) (1 3 1 4 1) (elems 5 sum 10 olaps 16))" "((3 2 1 1 3) (2 1 1 3 3) (1 1 3 3 2) (1 3 3 2 1) (3 3 2 1 1) (elems 5 sum 10 olaps 20))" "((3 2 1 2 2) (2 1 2 2 3) (1 2 2 3 2) (2 2 3 2 1) (2 3 2 1 2) (elems 5 sum 10 olaps 16))" "((3 2 1 3 1) (2 1 3 1 3) (1 3 1 3 2) (3 1 3 2 1) (1 3 2 1 3) (elems 5 sum 10 olaps 18))" "((3 2 2 1 2) (2 2 1 2 3) (2 1 2 3 2) (1 2 3 2 2) (2 3 2 2 1) (elems 5 sum 10 olaps 16))" "((3 2 2 2 1) (2 2 2 1 3) (2 2 1 3 2) (2 1 3 2 2) (1 3 2 2 2) (elems 5 sum 10 olaps 18))" "((3 2 3 1 1) (2 3 1 1 3) (3 1 1 3 2) (1 1 3 2 3) (1 3 2 3 1) (elems 5 sum 10 olaps 20))" "((3 3 1 1 2) (3 1 1 2 3) (1 1 2 3 3) (1 2 3 3 1) (2 3 3 1 1) (elems 5 sum 10 olaps 20))" "((3 3 1 2 1) (3 1 2 1 3) (1 2 1 3 3) (2 1 3 3 1) (1 3 3 1 2) (elems 5 sum 10 olaps 18))" "((3 3 2 1 1) (3 2 1 1 3) (2 1 1 3 3) (1 1 3 3 2) (1 3 3 2 1) (elems 5 sum 10 olaps 20))" "((3 4 1 1 1) (4 1 1 1 3) (1 1 1 3 4) (1 1 3 4 1) (1 3 4 1 1) (elems 5 sum 10 olaps 20))" "((4 1 1 1 3) (1 1 1 3 4) (1 1 3 4 1) (1 3 4 1 1) (3 4 1 1 1) (elems 5 sum 10 olaps 20))" "((4 1 1 2 2) (1 1 2 2 4) (1 2 2 4 1) (2 2 4 1 1) (2 4 1 1 2) (elems 5 sum 10 olaps 18))" "((4 1 1 3 1) (1 1 3 1 4) (1 3 1 4 1) (3 1 4 1 1) (1 4 1 1 3) (elems 5 sum 10 olaps 16))" "((4 1 2 1 2) (1 2 1 2 4) (2 1 2 4 1) (1 2 4 1 2) (2 4 1 2 1) (elems 5 sum 10 olaps 20))" "((4 1 2 2 1) (1 2 2 1 4) (2 2 1 4 1) (2 1 4 1 2) (1 4 1 2 2) (elems 5 sum 10 olaps 20))" "((4 1 3 1 1) (1 3 1 1 4) (3 1 1 4 1) (1 1 4 1 3) (1 4 1 3 1) (elems 5 sum 10 olaps 16))" "((4 2 1 1 2) (2 1 1 2 4) (1 1 2 4 2) (1 2 4 2 1) (2 4 2 1 1) (elems 5 sum 10 olaps 20))" "((4 2 1 2 1) (2 1 2 1 4) (1 2 1 4 2) (2 1 4 2 1) (1 4 2 1 2) (elems 5 sum 10 olaps 20))" "((4 2 2 1 1) (2 2 1 1 4) (2 1 1 4 2) (1 1 4 2 2) (1 4 2 2 1) (elems 5 sum 10 olaps 18))" "((4 3 1 1 1) (3 1 1 1 4) (1 1 1 4 3) (1 1 4 3 1) (1 4 3 1 1) (elems 5 sum 10 olaps 20))" "((5 1 1 1 2) (1 1 1 2 5) (1 1 2 5 1) (1 2 5 1 1) (2 5 1 1 1) (elems 5 sum 10 olaps 18))" "((5 1 1 2 1) (1 1 2 1 5) (1 2 1 5 1) (2 1 5 1 1) (1 5 1 1 2) (elems 5 sum 10 olaps 20))" "((5 1 2 1 1) (1 2 1 1 5) (2 1 1 5 1) (1 1 5 1 2) (1 5 1 2 1) (elems 5 sum 10 olaps 20))" "((5 2 1 1 1) (2 1 1 1 5) (1 1 1 5 2) (1 1 5 2 1) (1 5 2 1 1) (elems 5 sum 10 olaps 18))" "((6 1 1 1 1) (1 1 1 1 6) (1 1 1 6 1) (1 1 6 1 1) (1 6 1 1 1) (elems 5 sum 10 olaps 18))" "((1 1 1 1 8) (1 1 1 8 1) (1 1 8 1 1) (1 8 1 1 1) (8 1 1 1 1) (elems 5 sum 12 olaps 18))" "((1 1 1 3 6) (1 1 3 6 1) (1 3 6 1 1) (3 6 1 1 1) (6 1 1 1 3) (elems 5 sum 12 olaps 16))" "((1 1 1 4 5) (1 1 4 5 1) (1 4 5 1 1) (4 5 1 1 1) (5 1 1 1 4) (elems 5 sum 12 olaps 16))" "((1 1 1 5 4) (1 1 5 4 1) (1 5 4 1 1) (5 4 1 1 1) (4 1 1 1 5) (elems 5 sum 12 olaps 16))" "((1 1 1 6 3) (1 1 6 3 1) (1 6 3 1 1) (6 3 1 1 1) (3 1 1 1 6) (elems 5 sum 12 olaps 16))" "((1 1 1 8 1) (1 1 8 1 1) (1 8 1 1 1) (8 1 1 1 1) (1 1 1 1 8) (elems 5 sum 12 olaps 18))" "((1 1 2 2 6) (1 2 2 6 1) (2 2 6 1 1) (2 6 1 1 2) (6 1 1 2 2) (elems 5 sum 12 olaps 16))" "((1 1 2 3 5) (1 2 3 5 1) (2 3 5 1 1) (3 5 1 1 2) (5 1 1 2 3) (elems 5 sum 12 olaps 18))" "((1 1 2 4 4) (1 2 4 4 1) (2 4 4 1 1) (4 4 1 1 2) (4 1 1 2 4) (elems 5 sum 12 olaps 16))" "((1 1 2 5 3) (1 2 5 3 1) (2 5 3 1 1) (5 3 1 1 2) (3 1 1 2 5) (elems 5 sum 12 olaps 20))" "((1 1 2 6 2) (1 2 6 2 1) (2 6 2 1 1) (6 2 1 1 2) (2 1 1 2 6) (elems 5 sum 12 olaps 20))" "((1 1 3 1 6) (1 3 1 6 1) (3 1 6 1 1) (1 6 1 1 3) (6 1 1 3 1) (elems 5 sum 12 olaps 16))" "((1 1 3 2 5) (1 3 2 5 1) (3 2 5 1 1) (2 5 1 1 3) (5 1 1 3 2) (elems 5 sum 12 olaps 16))" "((1 1 3 3 4) (1 3 3 4 1) (3 3 4 1 1) (3 4 1 1 3) (4 1 1 3 3) (elems 5 sum 12 olaps 18))" "((1 1 3 4 3) (1 3 4 3 1) (3 4 3 1 1) (4 3 1 1 3) (3 1 1 3 4) (elems 5 sum 12 olaps 18))" "((1 1 3 5 2) (1 3 5 2 1) (3 5 2 1 1) (5 2 1 1 3) (2 1 1 3 5) (elems 5 sum 12 olaps 20))" "((1 1 3 6 1) (1 3 6 1 1) (3 6 1 1 1) (6 1 1 1 3) (1 1 1 3 6) (elems 5 sum 12 olaps 16))" "((1 1 4 1 5) (1 4 1 5 1) (4 1 5 1 1) (1 5 1 1 4) (5 1 1 4 1) (elems 5 sum 12 olaps 16))" "((1 1 4 2 4) (1 4 2 4 1) (4 2 4 1 1) (2 4 1 1 4) (4 1 1 4 2) (elems 5 sum 12 olaps 20))" "((1 1 4 3 3) (1 4 3 3 1) (4 3 3 1 1) (3 3 1 1 4) (3 1 1 4 3) (elems 5 sum 12 olaps 18))" "((1 1 4 4 2) (1 4 4 2 1) (4 4 2 1 1) (4 2 1 1 4) (2 1 1 4 4) (elems 5 sum 12 olaps 16))" "((1 1 4 5 1) (1 4 5 1 1) (4 5 1 1 1) (5 1 1 1 4) (1 1 1 4 5) (elems 5 sum 12 olaps 16))" "((1 1 5 1 4) (1 5 1 4 1) (5 1 4 1 1) (1 4 1 1 5) (4 1 1 5 1) (elems 5 sum 12 olaps 16))" "((1 1 5 2 3) (1 5 2 3 1) (5 2 3 1 1) (2 3 1 1 5) (3 1 1 5 2) (elems 5 sum 12 olaps 16))" "((1 1 5 3 2) (1 5 3 2 1) (5 3 2 1 1) (3 2 1 1 5) (2 1 1 5 3) (elems 5 sum 12 olaps 18))" "((1 1 5 4 1) (1 5 4 1 1) (5 4 1 1 1) (4 1 1 1 5) (1 1 1 5 4) (elems 5 sum 12 olaps 16))" "((1 1 6 1 3) (1 6 1 3 1) (6 1 3 1 1) (1 3 1 1 6) (3 1 1 6 1) (elems 5 sum 12 olaps 16))" "((1 1 6 2 2) (1 6 2 2 1) (6 2 2 1 1) (2 2 1 1 6) (2 1 1 6 2) (elems 5 sum 12 olaps 16))" "((1 1 6 3 1) (1 6 3 1 1) (6 3 1 1 1) (3 1 1 1 6) (1 1 1 6 3) (elems 5 sum 12 olaps 16))" "((1 1 8 1 1) (1 8 1 1 1) (8 1 1 1 1) (1 1 1 1 8) (1 1 1 8 1) (elems 5 sum 12 olaps 18))" "((1 2 1 2 6) (2 1 2 6 1) (1 2 6 1 2) (2 6 1 2 1) (6 1 2 1 2) (elems 5 sum 12 olaps 16))" "((1 2 1 3 5) (2 1 3 5 1) (1 3 5 1 2) (3 5 1 2 1) (5 1 2 1 3) (elems 5 sum 12 olaps 16))" "((1 2 1 4 4) (2 1 4 4 1) (1 4 4 1 2) (4 4 1 2 1) (4 1 2 1 4) (elems 5 sum 12 olaps 18))" "((1 2 1 5 3) (2 1 5 3 1) (1 5 3 1 2) (5 3 1 2 1) (3 1 2 1 5) (elems 5 sum 12 olaps 16))" "((1 2 1 6 2) (2 1 6 2 1) (1 6 2 1 2) (6 2 1 2 1) (2 1 2 1 6) (elems 5 sum 12 olaps 16))" "((1 2 2 1 6) (2 2 1 6 1) (2 1 6 1 2) (1 6 1 2 2) (6 1 2 2 1) (elems 5 sum 12 olaps 18))" "((1 2 2 2 5) (2 2 2 5 1) (2 2 5 1 2) (2 5 1 2 2) (5 1 2 2 2) (elems 5 sum 12 olaps 16))" "((1 2 2 3 4) (2 2 3 4 1) (2 3 4 1 2) (3 4 1 2 2) (4 1 2 2 3) (elems 5 sum 12 olaps 18))" "((1 2 2 4 3) (2 2 4 3 1) (2 4 3 1 2) (4 3 1 2 2) (3 1 2 2 4) (elems 5 sum 12 olaps 16))" "((1 2 2 5 2) (2 2 5 2 1) (2 5 2 1 2) (5 2 1 2 2) (2 1 2 2 5) (elems 5 sum 12 olaps 16))" "((1 2 2 6 1) (2 2 6 1 1) (2 6 1 1 2) (6 1 1 2 2) (1 1 2 2 6) (elems 5 sum 12 olaps 16))" "((1 2 3 1 5) (2 3 1 5 1) (3 1 5 1 2) (1 5 1 2 3) (5 1 2 3 1) (elems 5 sum 12 olaps 16))" "((1 2 3 2 4) (2 3 2 4 1) (3 2 4 1 2) (2 4 1 2 3) (4 1 2 3 2) (elems 5 sum 12 olaps 16))" "((1 2 3 3 3) (2 3 3 3 1) (3 3 3 1 2) (3 3 1 2 3) (3 1 2 3 3) (elems 5 sum 12 olaps 12))" "((1 2 3 4 2) (2 3 4 2 1) (3 4 2 1 2) (4 2 1 2 3) (2 1 2 3 4) (elems 5 sum 12 olaps 16))" "((1 2 3 5 1) (2 3 5 1 1) (3 5 1 1 2) (5 1 1 2 3) (1 1 2 3 5) (elems 5 sum 12 olaps 18))" "((1 2 4 1 4) (2 4 1 4 1) (4 1 4 1 2) (1 4 1 2 4) (4 1 2 4 1) (elems 5 sum 12 olaps 16))" "((1 2 4 2 3) (2 4 2 3 1) (4 2 3 1 2) (2 3 1 2 4) (3 1 2 4 2) (elems 5 sum 12 olaps 16))" "((1 2 4 3 2) (2 4 3 2 1) (4 3 2 1 2) (3 2 1 2 4) (2 1 2 4 3) (elems 5 sum 12 olaps 16))" "((1 2 4 4 1) (2 4 4 1 1) (4 4 1 1 2) (4 1 1 2 4) (1 1 2 4 4) (elems 5 sum 12 olaps 16))" "((1 2 5 1 3) (2 5 1 3 1) (5 1 3 1 2) (1 3 1 2 5) (3 1 2 5 1) (elems 5 sum 12 olaps 18))" "((1 2 5 2 2) (2 5 2 2 1) (5 2 2 1 2) (2 2 1 2 5) (2 1 2 5 2) (elems 5 sum 12 olaps 16))" "((1 2 5 3 1) (2 5 3 1 1) (5 3 1 1 2) (3 1 1 2 5) (1 1 2 5 3) (elems 5 sum 12 olaps 20))" "((1 2 6 1 2) (2 6 1 2 1) (6 1 2 1 2) (1 2 1 2 6) (2 1 2 6 1) (elems 5 sum 12 olaps 16))" "((1 2 6 2 1) (2 6 2 1 1) (6 2 1 1 2) (2 1 1 2 6) (1 1 2 6 2) (elems 5 sum 12 olaps 20))" "((1 3 1 1 6) (3 1 1 6 1) (1 1 6 1 3) (1 6 1 3 1) (6 1 3 1 1) (elems 5 sum 12 olaps 16))" "((1 3 1 2 5) (3 1 2 5 1) (1 2 5 1 3) (2 5 1 3 1) (5 1 3 1 2) (elems 5 sum 12 olaps 18))" "((1 3 1 3 4) (3 1 3 4 1) (1 3 4 1 3) (3 4 1 3 1) (4 1 3 1 3) (elems 5 sum 12 olaps 20))" "((1 3 1 4 3) (3 1 4 3 1) (1 4 3 1 3) (4 3 1 3 1) (3 1 3 1 4) (elems 5 sum 12 olaps 20))" "((1 3 1 5 2) (3 1 5 2 1) (1 5 2 1 3) (5 2 1 3 1) (2 1 3 1 5) (elems 5 sum 12 olaps 18))" "((1 3 1 6 1) (3 1 6 1 1) (1 6 1 1 3) (6 1 1 3 1) (1 1 3 1 6) (elems 5 sum 12 olaps 16))" "((1 3 2 1 5) (3 2 1 5 1) (2 1 5 1 3) (1 5 1 3 2) (5 1 3 2 1) (elems 5 sum 12 olaps 16))" "((1 3 2 2 4) (3 2 2 4 1) (2 2 4 1 3) (2 4 1 3 2) (4 1 3 2 2) (elems 5 sum 12 olaps 16))" "((1 3 2 3 3) (3 2 3 3 1) (2 3 3 1 3) (3 3 1 3 2) (3 1 3 2 3) (elems 5 sum 12 olaps 16))" "((1 3 2 4 2) (3 2 4 2 1) (2 4 2 1 3) (4 2 1 3 2) (2 1 3 2 4) (elems 5 sum 12 olaps 16))" "((1 3 2 5 1) (3 2 5 1 1) (2 5 1 1 3) (5 1 1 3 2) (1 1 3 2 5) (elems 5 sum 12 olaps 16))" "((1 3 3 1 4) (3 3 1 4 1) (3 1 4 1 3) (1 4 1 3 3) (4 1 3 3 1) (elems 5 sum 12 olaps 20))" "((1 3 3 2 3) (3 3 2 3 1) (3 2 3 1 3) (2 3 1 3 3) (3 1 3 3 2) (elems 5 sum 12 olaps 16))" "((1 3 3 3 2) (3 3 3 2 1) (3 3 2 1 3) (3 2 1 3 3) (2 1 3 3 3) (elems 5 sum 12 olaps 12))" "((1 3 3 4 1) (3 3 4 1 1) (3 4 1 1 3) (4 1 1 3 3) (1 1 3 3 4) (elems 5 sum 12 olaps 18))" "((1 3 4 1 3) (3 4 1 3 1) (4 1 3 1 3) (1 3 1 3 4) (3 1 3 4 1) (elems 5 sum 12 olaps 20))" "((1 3 4 2 2) (3 4 2 2 1) (4 2 2 1 3) (2 2 1 3 4) (2 1 3 4 2) (elems 5 sum 12 olaps 16))" "((1 3 4 3 1) (3 4 3 1 1) (4 3 1 1 3) (3 1 1 3 4) (1 1 3 4 3) (elems 5 sum 12 olaps 18))" "((1 3 5 1 2) (3 5 1 2 1) (5 1 2 1 3) (1 2 1 3 5) (2 1 3 5 1) (elems 5 sum 12 olaps 16))" "((1 3 5 2 1) (3 5 2 1 1) (5 2 1 1 3) (2 1 1 3 5) (1 1 3 5 2) (elems 5 sum 12 olaps 20))" "((1 3 6 1 1) (3 6 1 1 1) (6 1 1 1 3) (1 1 1 3 6) (1 1 3 6 1) (elems 5 sum 12 olaps 16))" "((1 4 1 1 5) (4 1 1 5 1) (1 1 5 1 4) (1 5 1 4 1) (5 1 4 1 1) (elems 5 sum 12 olaps 16))" "((1 4 1 2 4) (4 1 2 4 1) (1 2 4 1 4) (2 4 1 4 1) (4 1 4 1 2) (elems 5 sum 12 olaps 16))" "((1 4 1 3 3) (4 1 3 3 1) (1 3 3 1 4) (3 3 1 4 1) (3 1 4 1 3) (elems 5 sum 12 olaps 20))" "((1 4 1 4 2) (4 1 4 2 1) (1 4 2 1 4) (4 2 1 4 1) (2 1 4 1 4) (elems 5 sum 12 olaps 16))" "((1 4 1 5 1) (4 1 5 1 1) (1 5 1 1 4) (5 1 1 4 1) (1 1 4 1 5) (elems 5 sum 12 olaps 16))" "((1 4 2 1 4) (4 2 1 4 1) (2 1 4 1 4) (1 4 1 4 2) (4 1 4 2 1) (elems 5 sum 12 olaps 16))" "((1 4 2 2 3) (4 2 2 3 1) (2 2 3 1 4) (2 3 1 4 2) (3 1 4 2 2) (elems 5 sum 12 olaps 16))" "((1 4 2 3 2) (4 2 3 2 1) (2 3 2 1 4) (3 2 1 4 2) (2 1 4 2 3) (elems 5 sum 12 olaps 16))" "((1 4 2 4 1) (4 2 4 1 1) (2 4 1 1 4) (4 1 1 4 2) (1 1 4 2 4) (elems 5 sum 12 olaps 20))" "((1 4 3 1 3) (4 3 1 3 1) (3 1 3 1 4) (1 3 1 4 3) (3 1 4 3 1) (elems 5 sum 12 olaps 20))" "((1 4 3 2 2) (4 3 2 2 1) (3 2 2 1 4) (2 2 1 4 3) (2 1 4 3 2) (elems 5 sum 12 olaps 18))" "((1 4 3 3 1) (4 3 3 1 1) (3 3 1 1 4) (3 1 1 4 3) (1 1 4 3 3) (elems 5 sum 12 olaps 18))" "((1 4 4 1 2) (4 4 1 2 1) (4 1 2 1 4) (1 2 1 4 4) (2 1 4 4 1) (elems 5 sum 12 olaps 18))" "((1 4 4 2 1) (4 4 2 1 1) (4 2 1 1 4) (2 1 1 4 4) (1 1 4 4 2) (elems 5 sum 12 olaps 16))" "((1 4 5 1 1) (4 5 1 1 1) (5 1 1 1 4) (1 1 1 4 5) (1 1 4 5 1) (elems 5 sum 12 olaps 16))" "((1 5 1 1 4) (5 1 1 4 1) (1 1 4 1 5) (1 4 1 5 1) (4 1 5 1 1) (elems 5 sum 12 olaps 16))" "((1 5 1 2 3) (5 1 2 3 1) (1 2 3 1 5) (2 3 1 5 1) (3 1 5 1 2) (elems 5 sum 12 olaps 16))" "((1 5 1 3 2) (5 1 3 2 1) (1 3 2 1 5) (3 2 1 5 1) (2 1 5 1 3) (elems 5 sum 12 olaps 16))" "((1 5 1 4 1) (5 1 4 1 1) (1 4 1 1 5) (4 1 1 5 1) (1 1 5 1 4) (elems 5 sum 12 olaps 16))" "((1 5 2 1 3) (5 2 1 3 1) (2 1 3 1 5) (1 3 1 5 2) (3 1 5 2 1) (elems 5 sum 12 olaps 18))" "((1 5 2 2 2) (5 2 2 2 1) (2 2 2 1 5) (2 2 1 5 2) (2 1 5 2 2) (elems 5 sum 12 olaps 16))" "((1 5 2 3 1) (5 2 3 1 1) (2 3 1 1 5) (3 1 1 5 2) (1 1 5 2 3) (elems 5 sum 12 olaps 16))" "((1 5 3 1 2) (5 3 1 2 1) (3 1 2 1 5) (1 2 1 5 3) (2 1 5 3 1) (elems 5 sum 12 olaps 16))" "((1 5 3 2 1) (5 3 2 1 1) (3 2 1 1 5) (2 1 1 5 3) (1 1 5 3 2) (elems 5 sum 12 olaps 18))" "((1 5 4 1 1) (5 4 1 1 1) (4 1 1 1 5) (1 1 1 5 4) (1 1 5 4 1) (elems 5 sum 12 olaps 16))" "((1 6 1 1 3) (6 1 1 3 1) (1 1 3 1 6) (1 3 1 6 1) (3 1 6 1 1) (elems 5 sum 12 olaps 16))" "((1 6 1 2 2) (6 1 2 2 1) (1 2 2 1 6) (2 2 1 6 1) (2 1 6 1 2) (elems 5 sum 12 olaps 18))" "((1 6 1 3 1) (6 1 3 1 1) (1 3 1 1 6) (3 1 1 6 1) (1 1 6 1 3) (elems 5 sum 12 olaps 16))" "((1 6 2 1 2) (6 2 1 2 1) (2 1 2 1 6) (1 2 1 6 2) (2 1 6 2 1) (elems 5 sum 12 olaps 16))" "((1 6 2 2 1) (6 2 2 1 1) (2 2 1 1 6) (2 1 1 6 2) (1 1 6 2 2) (elems 5 sum 12 olaps 16))" "((1 6 3 1 1) (6 3 1 1 1) (3 1 1 1 6) (1 1 1 6 3) (1 1 6 3 1) (elems 5 sum 12 olaps 16))" "((1 8 1 1 1) (8 1 1 1 1) (1 1 1 1 8) (1 1 1 8 1) (1 1 8 1 1) (elems 5 sum 12 olaps 18))" "((2 1 1 2 6) (1 1 2 6 2) (1 2 6 2 1) (2 6 2 1 1) (6 2 1 1 2) (elems 5 sum 12 olaps 20))" "((2 1 1 3 5) (1 1 3 5 2) (1 3 5 2 1) (3 5 2 1 1) (5 2 1 1 3) (elems 5 sum 12 olaps 20))" "((2 1 1 4 4) (1 1 4 4 2) (1 4 4 2 1) (4 4 2 1 1) (4 2 1 1 4) (elems 5 sum 12 olaps 16))" "((2 1 1 5 3) (1 1 5 3 2) (1 5 3 2 1) (5 3 2 1 1) (3 2 1 1 5) (elems 5 sum 12 olaps 18))" "((2 1 1 6 2) (1 1 6 2 2) (1 6 2 2 1) (6 2 2 1 1) (2 2 1 1 6) (elems 5 sum 12 olaps 16))" "((2 1 2 1 6) (1 2 1 6 2) (2 1 6 2 1) (1 6 2 1 2) (6 2 1 2 1) (elems 5 sum 12 olaps 16))" "((2 1 2 2 5) (1 2 2 5 2) (2 2 5 2 1) (2 5 2 1 2) (5 2 1 2 2) (elems 5 sum 12 olaps 16))" "((2 1 2 3 4) (1 2 3 4 2) (2 3 4 2 1) (3 4 2 1 2) (4 2 1 2 3) (elems 5 sum 12 olaps 16))" "((2 1 2 4 3) (1 2 4 3 2) (2 4 3 2 1) (4 3 2 1 2) (3 2 1 2 4) (elems 5 sum 12 olaps 16))" "((2 1 2 5 2) (1 2 5 2 2) (2 5 2 2 1) (5 2 2 1 2) (2 2 1 2 5) (elems 5 sum 12 olaps 16))" "((2 1 2 6 1) (1 2 6 1 2) (2 6 1 2 1) (6 1 2 1 2) (1 2 1 2 6) (elems 5 sum 12 olaps 16))" "((2 1 3 1 5) (1 3 1 5 2) (3 1 5 2 1) (1 5 2 1 3) (5 2 1 3 1) (elems 5 sum 12 olaps 18))" "((2 1 3 2 4) (1 3 2 4 2) (3 2 4 2 1) (2 4 2 1 3) (4 2 1 3 2) (elems 5 sum 12 olaps 16))" "((2 1 3 3 3) (1 3 3 3 2) (3 3 3 2 1) (3 3 2 1 3) (3 2 1 3 3) (elems 5 sum 12 olaps 12))" "((2 1 3 4 2) (1 3 4 2 2) (3 4 2 2 1) (4 2 2 1 3) (2 2 1 3 4) (elems 5 sum 12 olaps 16))" "((2 1 3 5 1) (1 3 5 1 2) (3 5 1 2 1) (5 1 2 1 3) (1 2 1 3 5) (elems 5 sum 12 olaps 16))" "((2 1 4 1 4) (1 4 1 4 2) (4 1 4 2 1) (1 4 2 1 4) (4 2 1 4 1) (elems 5 sum 12 olaps 16))" "((2 1 4 2 3) (1 4 2 3 2) (4 2 3 2 1) (2 3 2 1 4) (3 2 1 4 2) (elems 5 sum 12 olaps 16))" "((2 1 4 3 2) (1 4 3 2 2) (4 3 2 2 1) (3 2 2 1 4) (2 2 1 4 3) (elems 5 sum 12 olaps 18))" "((2 1 4 4 1) (1 4 4 1 2) (4 4 1 2 1) (4 1 2 1 4) (1 2 1 4 4) (elems 5 sum 12 olaps 18))" "((2 1 5 1 3) (1 5 1 3 2) (5 1 3 2 1) (1 3 2 1 5) (3 2 1 5 1) (elems 5 sum 12 olaps 16))" "((2 1 5 2 2) (1 5 2 2 2) (5 2 2 2 1) (2 2 2 1 5) (2 2 1 5 2) (elems 5 sum 12 olaps 16))" "((2 1 5 3 1) (1 5 3 1 2) (5 3 1 2 1) (3 1 2 1 5) (1 2 1 5 3) (elems 5 sum 12 olaps 16))" "((2 1 6 1 2) (1 6 1 2 2) (6 1 2 2 1) (1 2 2 1 6) (2 2 1 6 1) (elems 5 sum 12 olaps 18))" "((2 1 6 2 1) (1 6 2 1 2) (6 2 1 2 1) (2 1 2 1 6) (1 2 1 6 2) (elems 5 sum 12 olaps 16))" "((2 2 1 1 6) (2 1 1 6 2) (1 1 6 2 2) (1 6 2 2 1) (6 2 2 1 1) (elems 5 sum 12 olaps 16))" "((2 2 1 2 5) (2 1 2 5 2) (1 2 5 2 2) (2 5 2 2 1) (5 2 2 1 2) (elems 5 sum 12 olaps 16))" "((2 2 1 3 4) (2 1 3 4 2) (1 3 4 2 2) (3 4 2 2 1) (4 2 2 1 3) (elems 5 sum 12 olaps 16))" "((2 2 1 4 3) (2 1 4 3 2) (1 4 3 2 2) (4 3 2 2 1) (3 2 2 1 4) (elems 5 sum 12 olaps 18))" "((2 2 1 5 2) (2 1 5 2 2) (1 5 2 2 2) (5 2 2 2 1) (2 2 2 1 5) (elems 5 sum 12 olaps 16))" "((2 2 1 6 1) (2 1 6 1 2) (1 6 1 2 2) (6 1 2 2 1) (1 2 2 1 6) (elems 5 sum 12 olaps 18))" "((2 2 2 1 5) (2 2 1 5 2) (2 1 5 2 2) (1 5 2 2 2) (5 2 2 2 1) (elems 5 sum 12 olaps 16))" "((2 2 2 2 4) (2 2 2 4 2) (2 2 4 2 2) (2 4 2 2 2) (4 2 2 2 2) (elems 5 sum 12 olaps 20))" "((2 2 2 3 3) (2 2 3 3 2) (2 3 3 2 2) (3 3 2 2 2) (3 2 2 2 3) (elems 5 sum 12 olaps 20))" "((2 2 2 4 2) (2 2 4 2 2) (2 4 2 2 2) (4 2 2 2 2) (2 2 2 2 4) (elems 5 sum 12 olaps 20))" "((2 2 2 5 1) (2 2 5 1 2) (2 5 1 2 2) (5 1 2 2 2) (1 2 2 2 5) (elems 5 sum 12 olaps 16))" "((2 2 3 1 4) (2 3 1 4 2) (3 1 4 2 2) (1 4 2 2 3) (4 2 2 3 1) (elems 5 sum 12 olaps 16))" "((2 2 3 2 3) (2 3 2 3 2) (3 2 3 2 2) (2 3 2 2 3) (3 2 2 3 2) (elems 5 sum 12 olaps 18))" "((2 2 3 3 2) (2 3 3 2 2) (3 3 2 2 2) (3 2 2 2 3) (2 2 2 3 3) (elems 5 sum 12 olaps 20))" "((2 2 3 4 1) (2 3 4 1 2) (3 4 1 2 2) (4 1 2 2 3) (1 2 2 3 4) (elems 5 sum 12 olaps 18))" "((2 2 4 1 3) (2 4 1 3 2) (4 1 3 2 2) (1 3 2 2 4) (3 2 2 4 1) (elems 5 sum 12 olaps 16))" "((2 2 4 2 2) (2 4 2 2 2) (4 2 2 2 2) (2 2 2 2 4) (2 2 2 4 2) (elems 5 sum 12 olaps 20))" "((2 2 4 3 1) (2 4 3 1 2) (4 3 1 2 2) (3 1 2 2 4) (1 2 2 4 3) (elems 5 sum 12 olaps 16))" "((2 2 5 1 2) (2 5 1 2 2) (5 1 2 2 2) (1 2 2 2 5) (2 2 2 5 1) (elems 5 sum 12 olaps 16))" "((2 2 5 2 1) (2 5 2 1 2) (5 2 1 2 2) (2 1 2 2 5) (1 2 2 5 2) (elems 5 sum 12 olaps 16))" "((2 2 6 1 1) (2 6 1 1 2) (6 1 1 2 2) (1 1 2 2 6) (1 2 2 6 1) (elems 5 sum 12 olaps 16))" "((2 3 1 1 5) (3 1 1 5 2) (1 1 5 2 3) (1 5 2 3 1) (5 2 3 1 1) (elems 5 sum 12 olaps 16))" "((2 3 1 2 4) (3 1 2 4 2) (1 2 4 2 3) (2 4 2 3 1) (4 2 3 1 2) (elems 5 sum 12 olaps 16))" "((2 3 1 3 3) (3 1 3 3 2) (1 3 3 2 3) (3 3 2 3 1) (3 2 3 1 3) (elems 5 sum 12 olaps 16))" "((2 3 1 4 2) (3 1 4 2 2) (1 4 2 2 3) (4 2 2 3 1) (2 2 3 1 4) (elems 5 sum 12 olaps 16))" "((2 3 1 5 1) (3 1 5 1 2) (1 5 1 2 3) (5 1 2 3 1) (1 2 3 1 5) (elems 5 sum 12 olaps 16))" "((2 3 2 1 4) (3 2 1 4 2) (2 1 4 2 3) (1 4 2 3 2) (4 2 3 2 1) (elems 5 sum 12 olaps 16))" "((2 3 2 2 3) (3 2 2 3 2) (2 2 3 2 3) (2 3 2 3 2) (3 2 3 2 2) (elems 5 sum 12 olaps 18))" "((2 3 2 3 2) (3 2 3 2 2) (2 3 2 2 3) (3 2 2 3 2) (2 2 3 2 3) (elems 5 sum 12 olaps 18))" "((2 3 2 4 1) (3 2 4 1 2) (2 4 1 2 3) (4 1 2 3 2) (1 2 3 2 4) (elems 5 sum 12 olaps 16))" "((2 3 3 1 3) (3 3 1 3 2) (3 1 3 2 3) (1 3 2 3 3) (3 2 3 3 1) (elems 5 sum 12 olaps 16))" "((2 3 3 2 2) (3 3 2 2 2) (3 2 2 2 3) (2 2 2 3 3) (2 2 3 3 2) (elems 5 sum 12 olaps 20))" "((2 3 3 3 1) (3 3 3 1 2) (3 3 1 2 3) (3 1 2 3 3) (1 2 3 3 3) (elems 5 sum 12 olaps 12))" "((2 3 4 1 2) (3 4 1 2 2) (4 1 2 2 3) (1 2 2 3 4) (2 2 3 4 1) (elems 5 sum 12 olaps 18))" "((2 3 4 2 1) (3 4 2 1 2) (4 2 1 2 3) (2 1 2 3 4) (1 2 3 4 2) (elems 5 sum 12 olaps 16))" "((2 3 5 1 1) (3 5 1 1 2) (5 1 1 2 3) (1 1 2 3 5) (1 2 3 5 1) (elems 5 sum 12 olaps 18))" "((2 4 1 1 4) (4 1 1 4 2) (1 1 4 2 4) (1 4 2 4 1) (4 2 4 1 1) (elems 5 sum 12 olaps 20))" "((2 4 1 2 3) (4 1 2 3 2) (1 2 3 2 4) (2 3 2 4 1) (3 2 4 1 2) (elems 5 sum 12 olaps 16))" "((2 4 1 3 2) (4 1 3 2 2) (1 3 2 2 4) (3 2 2 4 1) (2 2 4 1 3) (elems 5 sum 12 olaps 16))" "((2 4 1 4 1) (4 1 4 1 2) (1 4 1 2 4) (4 1 2 4 1) (1 2 4 1 4) (elems 5 sum 12 olaps 16))" "((2 4 2 1 3) (4 2 1 3 2) (2 1 3 2 4) (1 3 2 4 2) (3 2 4 2 1) (elems 5 sum 12 olaps 16))" "((2 4 2 2 2) (4 2 2 2 2) (2 2 2 2 4) (2 2 2 4 2) (2 2 4 2 2) (elems 5 sum 12 olaps 20))" "((2 4 2 3 1) (4 2 3 1 2) (2 3 1 2 4) (3 1 2 4 2) (1 2 4 2 3) (elems 5 sum 12 olaps 16))" "((2 4 3 1 2) (4 3 1 2 2) (3 1 2 2 4) (1 2 2 4 3) (2 2 4 3 1) (elems 5 sum 12 olaps 16))" "((2 4 3 2 1) (4 3 2 1 2) (3 2 1 2 4) (2 1 2 4 3) (1 2 4 3 2) (elems 5 sum 12 olaps 16))" "((2 4 4 1 1) (4 4 1 1 2) (4 1 1 2 4) (1 1 2 4 4) (1 2 4 4 1) (elems 5 sum 12 olaps 16))" "((2 5 1 1 3) (5 1 1 3 2) (1 1 3 2 5) (1 3 2 5 1) (3 2 5 1 1) (elems 5 sum 12 olaps 16))" "((2 5 1 2 2) (5 1 2 2 2) (1 2 2 2 5) (2 2 2 5 1) (2 2 5 1 2) (elems 5 sum 12 olaps 16))" "((2 5 1 3 1) (5 1 3 1 2) (1 3 1 2 5) (3 1 2 5 1) (1 2 5 1 3) (elems 5 sum 12 olaps 18))" "((2 5 2 1 2) (5 2 1 2 2) (2 1 2 2 5) (1 2 2 5 2) (2 2 5 2 1) (elems 5 sum 12 olaps 16))" "((2 5 2 2 1) (5 2 2 1 2) (2 2 1 2 5) (2 1 2 5 2) (1 2 5 2 2) (elems 5 sum 12 olaps 16))" "((2 5 3 1 1) (5 3 1 1 2) (3 1 1 2 5) (1 1 2 5 3) (1 2 5 3 1) (elems 5 sum 12 olaps 20))" "((2 6 1 1 2) (6 1 1 2 2) (1 1 2 2 6) (1 2 2 6 1) (2 2 6 1 1) (elems 5 sum 12 olaps 16))" "((2 6 1 2 1) (6 1 2 1 2) (1 2 1 2 6) (2 1 2 6 1) (1 2 6 1 2) (elems 5 sum 12 olaps 16))" "((2 6 2 1 1) (6 2 1 1 2) (2 1 1 2 6) (1 1 2 6 2) (1 2 6 2 1) (elems 5 sum 12 olaps 20))" "((3 1 1 1 6) (1 1 1 6 3) (1 1 6 3 1) (1 6 3 1 1) (6 3 1 1 1) (elems 5 sum 12 olaps 16))" "((3 1 1 2 5) (1 1 2 5 3) (1 2 5 3 1) (2 5 3 1 1) (5 3 1 1 2) (elems 5 sum 12 olaps 20))" "((3 1 1 3 4) (1 1 3 4 3) (1 3 4 3 1) (3 4 3 1 1) (4 3 1 1 3) (elems 5 sum 12 olaps 18))" "((3 1 1 4 3) (1 1 4 3 3) (1 4 3 3 1) (4 3 3 1 1) (3 3 1 1 4) (elems 5 sum 12 olaps 18))" "((3 1 1 5 2) (1 1 5 2 3) (1 5 2 3 1) (5 2 3 1 1) (2 3 1 1 5) (elems 5 sum 12 olaps 16))" "((3 1 1 6 1) (1 1 6 1 3) (1 6 1 3 1) (6 1 3 1 1) (1 3 1 1 6) (elems 5 sum 12 olaps 16))" "((3 1 2 1 5) (1 2 1 5 3) (2 1 5 3 1) (1 5 3 1 2) (5 3 1 2 1) (elems 5 sum 12 olaps 16))" "((3 1 2 2 4) (1 2 2 4 3) (2 2 4 3 1) (2 4 3 1 2) (4 3 1 2 2) (elems 5 sum 12 olaps 16))" "((3 1 2 3 3) (1 2 3 3 3) (2 3 3 3 1) (3 3 3 1 2) (3 3 1 2 3) (elems 5 sum 12 olaps 12))" "((3 1 2 4 2) (1 2 4 2 3) (2 4 2 3 1) (4 2 3 1 2) (2 3 1 2 4) (elems 5 sum 12 olaps 16))" "((3 1 2 5 1) (1 2 5 1 3) (2 5 1 3 1) (5 1 3 1 2) (1 3 1 2 5) (elems 5 sum 12 olaps 18))" "((3 1 3 1 4) (1 3 1 4 3) (3 1 4 3 1) (1 4 3 1 3) (4 3 1 3 1) (elems 5 sum 12 olaps 20))" "((3 1 3 2 3) (1 3 2 3 3) (3 2 3 3 1) (2 3 3 1 3) (3 3 1 3 2) (elems 5 sum 12 olaps 16))" "((3 1 3 3 2) (1 3 3 2 3) (3 3 2 3 1) (3 2 3 1 3) (2 3 1 3 3) (elems 5 sum 12 olaps 16))" "((3 1 3 4 1) (1 3 4 1 3) (3 4 1 3 1) (4 1 3 1 3) (1 3 1 3 4) (elems 5 sum 12 olaps 20))" "((3 1 4 1 3) (1 4 1 3 3) (4 1 3 3 1) (1 3 3 1 4) (3 3 1 4 1) (elems 5 sum 12 olaps 20))" "((3 1 4 2 2) (1 4 2 2 3) (4 2 2 3 1) (2 2 3 1 4) (2 3 1 4 2) (elems 5 sum 12 olaps 16))" "((3 1 4 3 1) (1 4 3 1 3) (4 3 1 3 1) (3 1 3 1 4) (1 3 1 4 3) (elems 5 sum 12 olaps 20))" "((3 1 5 1 2) (1 5 1 2 3) (5 1 2 3 1) (1 2 3 1 5) (2 3 1 5 1) (elems 5 sum 12 olaps 16))" "((3 1 5 2 1) (1 5 2 1 3) (5 2 1 3 1) (2 1 3 1 5) (1 3 1 5 2) (elems 5 sum 12 olaps 18))" "((3 1 6 1 1) (1 6 1 1 3) (6 1 1 3 1) (1 1 3 1 6) (1 3 1 6 1) (elems 5 sum 12 olaps 16))" "((3 2 1 1 5) (2 1 1 5 3) (1 1 5 3 2) (1 5 3 2 1) (5 3 2 1 1) (elems 5 sum 12 olaps 18))" "((3 2 1 2 4) (2 1 2 4 3) (1 2 4 3 2) (2 4 3 2 1) (4 3 2 1 2) (elems 5 sum 12 olaps 16))" "((3 2 1 3 3) (2 1 3 3 3) (1 3 3 3 2) (3 3 3 2 1) (3 3 2 1 3) (elems 5 sum 12 olaps 12))" "((3 2 1 4 2) (2 1 4 2 3) (1 4 2 3 2) (4 2 3 2 1) (2 3 2 1 4) (elems 5 sum 12 olaps 16))" "((3 2 1 5 1) (2 1 5 1 3) (1 5 1 3 2) (5 1 3 2 1) (1 3 2 1 5) (elems 5 sum 12 olaps 16))" "((3 2 2 1 4) (2 2 1 4 3) (2 1 4 3 2) (1 4 3 2 2) (4 3 2 2 1) (elems 5 sum 12 olaps 18))" "((3 2 2 2 3) (2 2 2 3 3) (2 2 3 3 2) (2 3 3 2 2) (3 3 2 2 2) (elems 5 sum 12 olaps 20))" "((3 2 2 3 2) (2 2 3 2 3) (2 3 2 3 2) (3 2 3 2 2) (2 3 2 2 3) (elems 5 sum 12 olaps 18))" "((3 2 2 4 1) (2 2 4 1 3) (2 4 1 3 2) (4 1 3 2 2) (1 3 2 2 4) (elems 5 sum 12 olaps 16))" "((3 2 3 1 3) (2 3 1 3 3) (3 1 3 3 2) (1 3 3 2 3) (3 3 2 3 1) (elems 5 sum 12 olaps 16))" "((3 2 3 2 2) (2 3 2 2 3) (3 2 2 3 2) (2 2 3 2 3) (2 3 2 3 2) (elems 5 sum 12 olaps 18))" "((3 2 3 3 1) (2 3 3 1 3) (3 3 1 3 2) (3 1 3 2 3) (1 3 2 3 3) (elems 5 sum 12 olaps 16))" "((3 2 4 1 2) (2 4 1 2 3) (4 1 2 3 2) (1 2 3 2 4) (2 3 2 4 1) (elems 5 sum 12 olaps 16))" "((3 2 4 2 1) (2 4 2 1 3) (4 2 1 3 2) (2 1 3 2 4) (1 3 2 4 2) (elems 5 sum 12 olaps 16))" "((3 2 5 1 1) (2 5 1 1 3) (5 1 1 3 2) (1 1 3 2 5) (1 3 2 5 1) (elems 5 sum 12 olaps 16))" "((3 3 1 1 4) (3 1 1 4 3) (1 1 4 3 3) (1 4 3 3 1) (4 3 3 1 1) (elems 5 sum 12 olaps 18))" "((3 3 1 2 3) (3 1 2 3 3) (1 2 3 3 3) (2 3 3 3 1) (3 3 3 1 2) (elems 5 sum 12 olaps 12))" "((3 3 1 3 2) (3 1 3 2 3) (1 3 2 3 3) (3 2 3 3 1) (2 3 3 1 3) (elems 5 sum 12 olaps 16))" "((3 3 1 4 1) (3 1 4 1 3) (1 4 1 3 3) (4 1 3 3 1) (1 3 3 1 4) (elems 5 sum 12 olaps 20))" "((3 3 2 1 3) (3 2 1 3 3) (2 1 3 3 3) (1 3 3 3 2) (3 3 3 2 1) (elems 5 sum 12 olaps 12))" "((3 3 2 2 2) (3 2 2 2 3) (2 2 2 3 3) (2 2 3 3 2) (2 3 3 2 2) (elems 5 sum 12 olaps 20))" "((3 3 2 3 1) (3 2 3 1 3) (2 3 1 3 3) (3 1 3 3 2) (1 3 3 2 3) (elems 5 sum 12 olaps 16))" "((3 3 3 1 2) (3 3 1 2 3) (3 1 2 3 3) (1 2 3 3 3) (2 3 3 3 1) (elems 5 sum 12 olaps 12))" "((3 3 3 2 1) (3 3 2 1 3) (3 2 1 3 3) (2 1 3 3 3) (1 3 3 3 2) (elems 5 sum 12 olaps 12))" "((3 3 4 1 1) (3 4 1 1 3) (4 1 1 3 3) (1 1 3 3 4) (1 3 3 4 1) (elems 5 sum 12 olaps 18))" "((3 4 1 1 3) (4 1 1 3 3) (1 1 3 3 4) (1 3 3 4 1) (3 3 4 1 1) (elems 5 sum 12 olaps 18))" "((3 4 1 2 2) (4 1 2 2 3) (1 2 2 3 4) (2 2 3 4 1) (2 3 4 1 2) (elems 5 sum 12 olaps 18))" "((3 4 1 3 1) (4 1 3 1 3) (1 3 1 3 4) (3 1 3 4 1) (1 3 4 1 3) (elems 5 sum 12 olaps 20))" "((3 4 2 1 2) (4 2 1 2 3) (2 1 2 3 4) (1 2 3 4 2) (2 3 4 2 1) (elems 5 sum 12 olaps 16))" "((3 4 2 2 1) (4 2 2 1 3) (2 2 1 3 4) (2 1 3 4 2) (1 3 4 2 2) (elems 5 sum 12 olaps 16))" "((3 4 3 1 1) (4 3 1 1 3) (3 1 1 3 4) (1 1 3 4 3) (1 3 4 3 1) (elems 5 sum 12 olaps 18))" "((3 5 1 1 2) (5 1 1 2 3) (1 1 2 3 5) (1 2 3 5 1) (2 3 5 1 1) (elems 5 sum 12 olaps 18))" "((3 5 1 2 1) (5 1 2 1 3) (1 2 1 3 5) (2 1 3 5 1) (1 3 5 1 2) (elems 5 sum 12 olaps 16))" "((3 5 2 1 1) (5 2 1 1 3) (2 1 1 3 5) (1 1 3 5 2) (1 3 5 2 1) (elems 5 sum 12 olaps 20))" "((3 6 1 1 1) (6 1 1 1 3) (1 1 1 3 6) (1 1 3 6 1) (1 3 6 1 1) (elems 5 sum 12 olaps 16))" "((4 1 1 1 5) (1 1 1 5 4) (1 1 5 4 1) (1 5 4 1 1) (5 4 1 1 1) (elems 5 sum 12 olaps 16))" "((4 1 1 2 4) (1 1 2 4 4) (1 2 4 4 1) (2 4 4 1 1) (4 4 1 1 2) (elems 5 sum 12 olaps 16))" "((4 1 1 3 3) (1 1 3 3 4) (1 3 3 4 1) (3 3 4 1 1) (3 4 1 1 3) (elems 5 sum 12 olaps 18))" "((4 1 1 4 2) (1 1 4 2 4) (1 4 2 4 1) (4 2 4 1 1) (2 4 1 1 4) (elems 5 sum 12 olaps 20))" "((4 1 1 5 1) (1 1 5 1 4) (1 5 1 4 1) (5 1 4 1 1) (1 4 1 1 5) (elems 5 sum 12 olaps 16))" "((4 1 2 1 4) (1 2 1 4 4) (2 1 4 4 1) (1 4 4 1 2) (4 4 1 2 1) (elems 5 sum 12 olaps 18))" "((4 1 2 2 3) (1 2 2 3 4) (2 2 3 4 1) (2 3 4 1 2) (3 4 1 2 2) (elems 5 sum 12 olaps 18))" "((4 1 2 3 2) (1 2 3 2 4) (2 3 2 4 1) (3 2 4 1 2) (2 4 1 2 3) (elems 5 sum 12 olaps 16))" "((4 1 2 4 1) (1 2 4 1 4) (2 4 1 4 1) (4 1 4 1 2) (1 4 1 2 4) (elems 5 sum 12 olaps 16))" "((4 1 3 1 3) (1 3 1 3 4) (3 1 3 4 1) (1 3 4 1 3) (3 4 1 3 1) (elems 5 sum 12 olaps 20))" "((4 1 3 2 2) (1 3 2 2 4) (3 2 2 4 1) (2 2 4 1 3) (2 4 1 3 2) (elems 5 sum 12 olaps 16))" "((4 1 3 3 1) (1 3 3 1 4) (3 3 1 4 1) (3 1 4 1 3) (1 4 1 3 3) (elems 5 sum 12 olaps 20))" "((4 1 4 1 2) (1 4 1 2 4) (4 1 2 4 1) (1 2 4 1 4) (2 4 1 4 1) (elems 5 sum 12 olaps 16))" "((4 1 4 2 1) (1 4 2 1 4) (4 2 1 4 1) (2 1 4 1 4) (1 4 1 4 2) (elems 5 sum 12 olaps 16))" "((4 1 5 1 1) (1 5 1 1 4) (5 1 1 4 1) (1 1 4 1 5) (1 4 1 5 1) (elems 5 sum 12 olaps 16))" "((4 2 1 1 4) (2 1 1 4 4) (1 1 4 4 2) (1 4 4 2 1) (4 4 2 1 1) (elems 5 sum 12 olaps 16))" "((4 2 1 2 3) (2 1 2 3 4) (1 2 3 4 2) (2 3 4 2 1) (3 4 2 1 2) (elems 5 sum 12 olaps 16))" "((4 2 1 3 2) (2 1 3 2 4) (1 3 2 4 2) (3 2 4 2 1) (2 4 2 1 3) (elems 5 sum 12 olaps 16))" "((4 2 1 4 1) (2 1 4 1 4) (1 4 1 4 2) (4 1 4 2 1) (1 4 2 1 4) (elems 5 sum 12 olaps 16))" "((4 2 2 1 3) (2 2 1 3 4) (2 1 3 4 2) (1 3 4 2 2) (3 4 2 2 1) (elems 5 sum 12 olaps 16))" "((4 2 2 2 2) (2 2 2 2 4) (2 2 2 4 2) (2 2 4 2 2) (2 4 2 2 2) (elems 5 sum 12 olaps 20))" "((4 2 2 3 1) (2 2 3 1 4) (2 3 1 4 2) (3 1 4 2 2) (1 4 2 2 3) (elems 5 sum 12 olaps 16))" "((4 2 3 1 2) (2 3 1 2 4) (3 1 2 4 2) (1 2 4 2 3) (2 4 2 3 1) (elems 5 sum 12 olaps 16))" "((4 2 3 2 1) (2 3 2 1 4) (3 2 1 4 2) (2 1 4 2 3) (1 4 2 3 2) (elems 5 sum 12 olaps 16))" "((4 2 4 1 1) (2 4 1 1 4) (4 1 1 4 2) (1 1 4 2 4) (1 4 2 4 1) (elems 5 sum 12 olaps 20))" "((4 3 1 1 3) (3 1 1 3 4) (1 1 3 4 3) (1 3 4 3 1) (3 4 3 1 1) (elems 5 sum 12 olaps 18))" "((4 3 1 2 2) (3 1 2 2 4) (1 2 2 4 3) (2 2 4 3 1) (2 4 3 1 2) (elems 5 sum 12 olaps 16))" "((4 3 1 3 1) (3 1 3 1 4) (1 3 1 4 3) (3 1 4 3 1) (1 4 3 1 3) (elems 5 sum 12 olaps 20))" "((4 3 2 1 2) (3 2 1 2 4) (2 1 2 4 3) (1 2 4 3 2) (2 4 3 2 1) (elems 5 sum 12 olaps 16))" "((4 3 2 2 1) (3 2 2 1 4) (2 2 1 4 3) (2 1 4 3 2) (1 4 3 2 2) (elems 5 sum 12 olaps 18))" "((4 3 3 1 1) (3 3 1 1 4) (3 1 1 4 3) (1 1 4 3 3) (1 4 3 3 1) (elems 5 sum 12 olaps 18))" "((4 4 1 1 2) (4 1 1 2 4) (1 1 2 4 4) (1 2 4 4 1) (2 4 4 1 1) (elems 5 sum 12 olaps 16))" "((4 4 1 2 1) (4 1 2 1 4) (1 2 1 4 4) (2 1 4 4 1) (1 4 4 1 2) (elems 5 sum 12 olaps 18))" "((4 4 2 1 1) (4 2 1 1 4) (2 1 1 4 4) (1 1 4 4 2) (1 4 4 2 1) (elems 5 sum 12 olaps 16))" "((4 5 1 1 1) (5 1 1 1 4) (1 1 1 4 5) (1 1 4 5 1) (1 4 5 1 1) (elems 5 sum 12 olaps 16))" "((5 1 1 1 4) (1 1 1 4 5) (1 1 4 5 1) (1 4 5 1 1) (4 5 1 1 1) (elems 5 sum 12 olaps 16))" "((5 1 1 2 3) (1 1 2 3 5) (1 2 3 5 1) (2 3 5 1 1) (3 5 1 1 2) (elems 5 sum 12 olaps 18))" "((5 1 1 3 2) (1 1 3 2 5) (1 3 2 5 1) (3 2 5 1 1) (2 5 1 1 3) (elems 5 sum 12 olaps 16))" "((5 1 1 4 1) (1 1 4 1 5) (1 4 1 5 1) (4 1 5 1 1) (1 5 1 1 4) (elems 5 sum 12 olaps 16))" "((5 1 2 1 3) (1 2 1 3 5) (2 1 3 5 1) (1 3 5 1 2) (3 5 1 2 1) (elems 5 sum 12 olaps 16))" "((5 1 2 2 2) (1 2 2 2 5) (2 2 2 5 1) (2 2 5 1 2) (2 5 1 2 2) (elems 5 sum 12 olaps 16))" "((5 1 2 3 1) (1 2 3 1 5) (2 3 1 5 1) (3 1 5 1 2) (1 5 1 2 3) (elems 5 sum 12 olaps 16))" "((5 1 3 1 2) (1 3 1 2 5) (3 1 2 5 1) (1 2 5 1 3) (2 5 1 3 1) (elems 5 sum 12 olaps 18))" "((5 1 3 2 1) (1 3 2 1 5) (3 2 1 5 1) (2 1 5 1 3) (1 5 1 3 2) (elems 5 sum 12 olaps 16))" "((5 1 4 1 1) (1 4 1 1 5) (4 1 1 5 1) (1 1 5 1 4) (1 5 1 4 1) (elems 5 sum 12 olaps 16))" "((5 2 1 1 3) (2 1 1 3 5) (1 1 3 5 2) (1 3 5 2 1) (3 5 2 1 1) (elems 5 sum 12 olaps 20))" "((5 2 1 2 2) (2 1 2 2 5) (1 2 2 5 2) (2 2 5 2 1) (2 5 2 1 2) (elems 5 sum 12 olaps 16))" "((5 2 1 3 1) (2 1 3 1 5) (1 3 1 5 2) (3 1 5 2 1) (1 5 2 1 3) (elems 5 sum 12 olaps 18))" "((5 2 2 1 2) (2 2 1 2 5) (2 1 2 5 2) (1 2 5 2 2) (2 5 2 2 1) (elems 5 sum 12 olaps 16))" "((5 2 2 2 1) (2 2 2 1 5) (2 2 1 5 2) (2 1 5 2 2) (1 5 2 2 2) (elems 5 sum 12 olaps 16))" "((5 2 3 1 1) (2 3 1 1 5) (3 1 1 5 2) (1 1 5 2 3) (1 5 2 3 1) (elems 5 sum 12 olaps 16))" "((5 3 1 1 2) (3 1 1 2 5) (1 1 2 5 3) (1 2 5 3 1) (2 5 3 1 1) (elems 5 sum 12 olaps 20))" "((5 3 1 2 1) (3 1 2 1 5) (1 2 1 5 3) (2 1 5 3 1) (1 5 3 1 2) (elems 5 sum 12 olaps 16))" "((5 3 2 1 1) (3 2 1 1 5) (2 1 1 5 3) (1 1 5 3 2) (1 5 3 2 1) (elems 5 sum 12 olaps 18))" "((5 4 1 1 1) (4 1 1 1 5) (1 1 1 5 4) (1 1 5 4 1) (1 5 4 1 1) (elems 5 sum 12 olaps 16))" "((6 1 1 1 3) (1 1 1 3 6) (1 1 3 6 1) (1 3 6 1 1) (3 6 1 1 1) (elems 5 sum 12 olaps 16))" "((6 1 1 2 2) (1 1 2 2 6) (1 2 2 6 1) (2 2 6 1 1) (2 6 1 1 2) (elems 5 sum 12 olaps 16))" "((6 1 1 3 1) (1 1 3 1 6) (1 3 1 6 1) (3 1 6 1 1) (1 6 1 1 3) (elems 5 sum 12 olaps 16))" "((6 1 2 1 2) (1 2 1 2 6) (2 1 2 6 1) (1 2 6 1 2) (2 6 1 2 1) (elems 5 sum 12 olaps 16))" "((6 1 2 2 1) (1 2 2 1 6) (2 2 1 6 1) (2 1 6 1 2) (1 6 1 2 2) (elems 5 sum 12 olaps 18))" "((6 1 3 1 1) (1 3 1 1 6) (3 1 1 6 1) (1 1 6 1 3) (1 6 1 3 1) (elems 5 sum 12 olaps 16))" "((6 2 1 1 2) (2 1 1 2 6) (1 1 2 6 2) (1 2 6 2 1) (2 6 2 1 1) (elems 5 sum 12 olaps 20))" "((6 2 1 2 1) (2 1 2 1 6) (1 2 1 6 2) (2 1 6 2 1) (1 6 2 1 2) (elems 5 sum 12 olaps 16))" "((6 2 2 1 1) (2 2 1 1 6) (2 1 1 6 2) (1 1 6 2 2) (1 6 2 2 1) (elems 5 sum 12 olaps 16))" "((6 3 1 1 1) (3 1 1 1 6) (1 1 1 6 3) (1 1 6 3 1) (1 6 3 1 1) (elems 5 sum 12 olaps 16))" "((8 1 1 1 1) (1 1 1 1 8) (1 1 1 8 1) (1 1 8 1 1) (1 8 1 1 1) (elems 5 sum 12 olaps 18))" "((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (elems 6 sum 6 olaps 30))" "((1 1 1 1 1 3) (1 1 1 1 3 1) (1 1 1 3 1 1) (1 1 3 1 1 1) (1 3 1 1 1 1) (3 1 1 1 1 1) (elems 6 sum 8 olaps 30))" "((1 1 1 1 2 2) (1 1 1 2 2 1) (1 1 2 2 1 1) (1 2 2 1 1 1) (2 2 1 1 1 1) (2 1 1 1 1 2) (elems 6 sum 8 olaps 30))" "((1 1 1 1 3 1) (1 1 1 3 1 1) (1 1 3 1 1 1) (1 3 1 1 1 1) (3 1 1 1 1 1) (1 1 1 1 1 3) (elems 6 sum 8 olaps 30))" "((1 1 1 2 1 2) (1 1 2 1 2 1) (1 2 1 2 1 1) (2 1 2 1 1 1) (1 2 1 1 1 2) (2 1 1 1 2 1) (elems 6 sum 8 olaps 30))" "((1 1 1 2 2 1) (1 1 2 2 1 1) (1 2 2 1 1 1) (2 2 1 1 1 1) (2 1 1 1 1 2) (1 1 1 1 2 2) (elems 6 sum 8 olaps 30))" "((1 1 1 3 1 1) (1 1 3 1 1 1) (1 3 1 1 1 1) (3 1 1 1 1 1) (1 1 1 1 1 3) (1 1 1 1 3 1) (elems 6 sum 8 olaps 30))" "((1 1 2 1 1 2) (1 2 1 1 2 1) (2 1 1 2 1 1) (1 1 2 1 1 2) (1 2 1 1 2 1) (2 1 1 2 1 1) (elems 6 sum 8 olaps 30))" "((1 1 2 1 2 1) (1 2 1 2 1 1) (2 1 2 1 1 1) (1 2 1 1 1 2) (2 1 1 1 2 1) (1 1 1 2 1 2) (elems 6 sum 8 olaps 30))" "((1 1 2 2 1 1) (1 2 2 1 1 1) (2 2 1 1 1 1) (2 1 1 1 1 2) (1 1 1 1 2 2) (1 1 1 2 2 1) (elems 6 sum 8 olaps 30))" "((1 1 3 1 1 1) (1 3 1 1 1 1) (3 1 1 1 1 1) (1 1 1 1 1 3) (1 1 1 1 3 1) (1 1 1 3 1 1) (elems 6 sum 8 olaps 30))" "((1 2 1 1 1 2) (2 1 1 1 2 1) (1 1 1 2 1 2) (1 1 2 1 2 1) (1 2 1 2 1 1) (2 1 2 1 1 1) (elems 6 sum 8 olaps 30))" "((1 2 1 1 2 1) (2 1 1 2 1 1) (1 1 2 1 1 2) (1 2 1 1 2 1) (2 1 1 2 1 1) (1 1 2 1 1 2) (elems 6 sum 8 olaps 30))" "((1 2 1 2 1 1) (2 1 2 1 1 1) (1 2 1 1 1 2) (2 1 1 1 2 1) (1 1 1 2 1 2) (1 1 2 1 2 1) (elems 6 sum 8 olaps 30))" "((1 2 2 1 1 1) (2 2 1 1 1 1) (2 1 1 1 1 2) (1 1 1 1 2 2) (1 1 1 2 2 1) (1 1 2 2 1 1) (elems 6 sum 8 olaps 30))" "((1 3 1 1 1 1) (3 1 1 1 1 1) (1 1 1 1 1 3) (1 1 1 1 3 1) (1 1 1 3 1 1) (1 1 3 1 1 1) (elems 6 sum 8 olaps 30))" "((2 1 1 1 1 2) (1 1 1 1 2 2) (1 1 1 2 2 1) (1 1 2 2 1 1) (1 2 2 1 1 1) (2 2 1 1 1 1) (elems 6 sum 8 olaps 30))" "((2 1 1 1 2 1) (1 1 1 2 1 2) (1 1 2 1 2 1) (1 2 1 2 1 1) (2 1 2 1 1 1) (1 2 1 1 1 2) (elems 6 sum 8 olaps 30))" "((2 1 1 2 1 1) (1 1 2 1 1 2) (1 2 1 1 2 1) (2 1 1 2 1 1) (1 1 2 1 1 2) (1 2 1 1 2 1) (elems 6 sum 8 olaps 30))" "((2 1 2 1 1 1) (1 2 1 1 1 2) (2 1 1 1 2 1) (1 1 1 2 1 2) (1 1 2 1 2 1) (1 2 1 2 1 1) (elems 6 sum 8 olaps 30))" "((2 2 1 1 1 1) (2 1 1 1 1 2) (1 1 1 1 2 2) (1 1 1 2 2 1) (1 1 2 2 1 1) (1 2 2 1 1 1) (elems 6 sum 8 olaps 30))" "((3 1 1 1 1 1) (1 1 1 1 1 3) (1 1 1 1 3 1) (1 1 1 3 1 1) (1 1 3 1 1 1) (1 3 1 1 1 1) (elems 6 sum 8 olaps 30))" "((1 1 1 1 1 5) (1 1 1 1 5 1) (1 1 1 5 1 1) (1 1 5 1 1 1) (1 5 1 1 1 1) (5 1 1 1 1 1) (elems 6 sum 10 olaps 30))" "((1 1 1 1 2 4) (1 1 1 2 4 1) (1 1 2 4 1 1) (1 2 4 1 1 1) (2 4 1 1 1 1) (4 1 1 1 1 2) (elems 6 sum 10 olaps 30))" "((1 1 1 1 3 3) (1 1 1 3 3 1) (1 1 3 3 1 1) (1 3 3 1 1 1) (3 3 1 1 1 1) (3 1 1 1 1 3) (elems 6 sum 10 olaps 30))" "((1 1 1 1 4 2) (1 1 1 4 2 1) (1 1 4 2 1 1) (1 4 2 1 1 1) (4 2 1 1 1 1) (2 1 1 1 1 4) (elems 6 sum 10 olaps 30))" "((1 1 1 1 5 1) (1 1 1 5 1 1) (1 1 5 1 1 1) (1 5 1 1 1 1) (5 1 1 1 1 1) (1 1 1 1 1 5) (elems 6 sum 10 olaps 30))" "((1 1 1 2 1 4) (1 1 2 1 4 1) (1 2 1 4 1 1) (2 1 4 1 1 1) (1 4 1 1 1 2) (4 1 1 1 2 1) (elems 6 sum 10 olaps 30))" "((1 1 1 2 2 3) (1 1 2 2 3 1) (1 2 2 3 1 1) (2 2 3 1 1 1) (2 3 1 1 1 2) (3 1 1 1 2 2) (elems 6 sum 10 olaps 30))" "((1 1 1 2 3 2) (1 1 2 3 2 1) (1 2 3 2 1 1) (2 3 2 1 1 1) (3 2 1 1 1 2) (2 1 1 1 2 3) (elems 6 sum 10 olaps 30))" "((1 1 1 2 4 1) (1 1 2 4 1 1) (1 2 4 1 1 1) (2 4 1 1 1 1) (4 1 1 1 1 2) (1 1 1 1 2 4) (elems 6 sum 10 olaps 30))" "((1 1 1 3 1 3) (1 1 3 1 3 1) (1 3 1 3 1 1) (3 1 3 1 1 1) (1 3 1 1 1 3) (3 1 1 1 3 1) (elems 6 sum 10 olaps 30))" "((1 1 1 3 2 2) (1 1 3 2 2 1) (1 3 2 2 1 1) (3 2 2 1 1 1) (2 2 1 1 1 3) (2 1 1 1 3 2) (elems 6 sum 10 olaps 30))" "((1 1 1 3 3 1) (1 1 3 3 1 1) (1 3 3 1 1 1) (3 3 1 1 1 1) (3 1 1 1 1 3) (1 1 1 1 3 3) (elems 6 sum 10 olaps 30))" "((1 1 1 4 1 2) (1 1 4 1 2 1) (1 4 1 2 1 1) (4 1 2 1 1 1) (1 2 1 1 1 4) (2 1 1 1 4 1) (elems 6 sum 10 olaps 30))" "((1 1 1 4 2 1) (1 1 4 2 1 1) (1 4 2 1 1 1) (4 2 1 1 1 1) (2 1 1 1 1 4) (1 1 1 1 4 2) (elems 6 sum 10 olaps 30))" "((1 1 1 5 1 1) (1 1 5 1 1 1) (1 5 1 1 1 1) (5 1 1 1 1 1) (1 1 1 1 1 5) (1 1 1 1 5 1) (elems 6 sum 10 olaps 30))" "((1 1 2 1 1 4) (1 2 1 1 4 1) (2 1 1 4 1 1) (1 1 4 1 1 2) (1 4 1 1 2 1) (4 1 1 2 1 1) (elems 6 sum 10 olaps 30))" "((1 1 2 1 2 3) (1 2 1 2 3 1) (2 1 2 3 1 1) (1 2 3 1 1 2) (2 3 1 1 2 1) (3 1 1 2 1 2) (elems 6 sum 10 olaps 30))" "((1 1 2 1 3 2) (1 2 1 3 2 1) (2 1 3 2 1 1) (1 3 2 1 1 2) (3 2 1 1 2 1) (2 1 1 2 1 3) (elems 6 sum 10 olaps 30))" "((1 1 2 1 4 1) (1 2 1 4 1 1) (2 1 4 1 1 1) (1 4 1 1 1 2) (4 1 1 1 2 1) (1 1 1 2 1 4) (elems 6 sum 10 olaps 30))" "((1 1 2 2 1 3) (1 2 2 1 3 1) (2 2 1 3 1 1) (2 1 3 1 1 2) (1 3 1 1 2 2) (3 1 1 2 2 1) (elems 6 sum 10 olaps 30))" "((1 1 2 2 2 2) (1 2 2 2 2 1) (2 2 2 2 1 1) (2 2 2 1 1 2) (2 2 1 1 2 2) (2 1 1 2 2 2) (elems 6 sum 10 olaps 30))" "((1 1 2 2 3 1) (1 2 2 3 1 1) (2 2 3 1 1 1) (2 3 1 1 1 2) (3 1 1 1 2 2) (1 1 1 2 2 3) (elems 6 sum 10 olaps 30))" "((1 1 2 3 1 2) (1 2 3 1 2 1) (2 3 1 2 1 1) (3 1 2 1 1 2) (1 2 1 1 2 3) (2 1 1 2 3 1) (elems 6 sum 10 olaps 30))" "((1 1 2 3 2 1) (1 2 3 2 1 1) (2 3 2 1 1 1) (3 2 1 1 1 2) (2 1 1 1 2 3) (1 1 1 2 3 2) (elems 6 sum 10 olaps 30))" "((1 1 2 4 1 1) (1 2 4 1 1 1) (2 4 1 1 1 1) (4 1 1 1 1 2) (1 1 1 1 2 4) (1 1 1 2 4 1) (elems 6 sum 10 olaps 30))" "((1 1 3 1 1 3) (1 3 1 1 3 1) (3 1 1 3 1 1) (1 1 3 1 1 3) (1 3 1 1 3 1) (3 1 1 3 1 1) (elems 6 sum 10 olaps 30))" "((1 1 3 1 2 2) (1 3 1 2 2 1) (3 1 2 2 1 1) (1 2 2 1 1 3) (2 2 1 1 3 1) (2 1 1 3 1 2) (elems 6 sum 10 olaps 30))" "((1 1 3 1 3 1) (1 3 1 3 1 1) (3 1 3 1 1 1) (1 3 1 1 1 3) (3 1 1 1 3 1) (1 1 1 3 1 3) (elems 6 sum 10 olaps 30))" "((1 1 3 2 1 2) (1 3 2 1 2 1) (3 2 1 2 1 1) (2 1 2 1 1 3) (1 2 1 1 3 2) (2 1 1 3 2 1) (elems 6 sum 10 olaps 30))" "((1 1 3 2 2 1) (1 3 2 2 1 1) (3 2 2 1 1 1) (2 2 1 1 1 3) (2 1 1 1 3 2) (1 1 1 3 2 2) (elems 6 sum 10 olaps 30))" "((1 1 3 3 1 1) (1 3 3 1 1 1) (3 3 1 1 1 1) (3 1 1 1 1 3) (1 1 1 1 3 3) (1 1 1 3 3 1) (elems 6 sum 10 olaps 30))" "((1 1 4 1 1 2) (1 4 1 1 2 1) (4 1 1 2 1 1) (1 1 2 1 1 4) (1 2 1 1 4 1) (2 1 1 4 1 1) (elems 6 sum 10 olaps 30))" "((1 1 4 1 2 1) (1 4 1 2 1 1) (4 1 2 1 1 1) (1 2 1 1 1 4) (2 1 1 1 4 1) (1 1 1 4 1 2) (elems 6 sum 10 olaps 30))" "((1 1 4 2 1 1) (1 4 2 1 1 1) (4 2 1 1 1 1) (2 1 1 1 1 4) (1 1 1 1 4 2) (1 1 1 4 2 1) (elems 6 sum 10 olaps 30))" "((1 1 5 1 1 1) (1 5 1 1 1 1) (5 1 1 1 1 1) (1 1 1 1 1 5) (1 1 1 1 5 1) (1 1 1 5 1 1) (elems 6 sum 10 olaps 30))" "((1 2 1 1 1 4) (2 1 1 1 4 1) (1 1 1 4 1 2) (1 1 4 1 2 1) (1 4 1 2 1 1) (4 1 2 1 1 1) (elems 6 sum 10 olaps 30))" "((1 2 1 1 2 3) (2 1 1 2 3 1) (1 1 2 3 1 2) (1 2 3 1 2 1) (2 3 1 2 1 1) (3 1 2 1 1 2) (elems 6 sum 10 olaps 30))" "((1 2 1 1 3 2) (2 1 1 3 2 1) (1 1 3 2 1 2) (1 3 2 1 2 1) (3 2 1 2 1 1) (2 1 2 1 1 3) (elems 6 sum 10 olaps 30))" "((1 2 1 1 4 1) (2 1 1 4 1 1) (1 1 4 1 1 2) (1 4 1 1 2 1) (4 1 1 2 1 1) (1 1 2 1 1 4) (elems 6 sum 10 olaps 30))" "((1 2 1 2 1 3) (2 1 2 1 3 1) (1 2 1 3 1 2) (2 1 3 1 2 1) (1 3 1 2 1 2) (3 1 2 1 2 1) (elems 6 sum 10 olaps 30))" "((1 2 1 2 2 2) (2 1 2 2 2 1) (1 2 2 2 1 2) (2 2 2 1 2 1) (2 2 1 2 1 2) (2 1 2 1 2 2) (elems 6 sum 10 olaps 30))" "((1 2 1 2 3 1) (2 1 2 3 1 1) (1 2 3 1 1 2) (2 3 1 1 2 1) (3 1 1 2 1 2) (1 1 2 1 2 3) (elems 6 sum 10 olaps 30))" "((1 2 1 3 1 2) (2 1 3 1 2 1) (1 3 1 2 1 2) (3 1 2 1 2 1) (1 2 1 2 1 3) (2 1 2 1 3 1) (elems 6 sum 10 olaps 30))" "((1 2 1 3 2 1) (2 1 3 2 1 1) (1 3 2 1 1 2) (3 2 1 1 2 1) (2 1 1 2 1 3) (1 1 2 1 3 2) (elems 6 sum 10 olaps 30))" "((1 2 1 4 1 1) (2 1 4 1 1 1) (1 4 1 1 1 2) (4 1 1 1 2 1) (1 1 1 2 1 4) (1 1 2 1 4 1) (elems 6 sum 10 olaps 30))" "((1 2 2 1 1 3) (2 2 1 1 3 1) (2 1 1 3 1 2) (1 1 3 1 2 2) (1 3 1 2 2 1) (3 1 2 2 1 1) (elems 6 sum 10 olaps 30))" "((1 2 2 1 2 2) (2 2 1 2 2 1) (2 1 2 2 1 2) (1 2 2 1 2 2) (2 2 1 2 2 1) (2 1 2 2 1 2) (elems 6 sum 10 olaps 30))" "((1 2 2 1 3 1) (2 2 1 3 1 1) (2 1 3 1 1 2) (1 3 1 1 2 2) (3 1 1 2 2 1) (1 1 2 2 1 3) (elems 6 sum 10 olaps 30))" "((1 2 2 2 1 2) (2 2 2 1 2 1) (2 2 1 2 1 2) (2 1 2 1 2 2) (1 2 1 2 2 2) (2 1 2 2 2 1) (elems 6 sum 10 olaps 30))" "((1 2 2 2 2 1) (2 2 2 2 1 1) (2 2 2 1 1 2) (2 2 1 1 2 2) (2 1 1 2 2 2) (1 1 2 2 2 2) (elems 6 sum 10 olaps 30))" "((1 2 2 3 1 1) (2 2 3 1 1 1) (2 3 1 1 1 2) (3 1 1 1 2 2) (1 1 1 2 2 3) (1 1 2 2 3 1) (elems 6 sum 10 olaps 30))" "((1 2 3 1 1 2) (2 3 1 1 2 1) (3 1 1 2 1 2) (1 1 2 1 2 3) (1 2 1 2 3 1) (2 1 2 3 1 1) (elems 6 sum 10 olaps 30))" "((1 2 3 1 2 1) (2 3 1 2 1 1) (3 1 2 1 1 2) (1 2 1 1 2 3) (2 1 1 2 3 1) (1 1 2 3 1 2) (elems 6 sum 10 olaps 30))" "((1 2 3 2 1 1) (2 3 2 1 1 1) (3 2 1 1 1 2) (2 1 1 1 2 3) (1 1 1 2 3 2) (1 1 2 3 2 1) (elems 6 sum 10 olaps 30))" "((1 2 4 1 1 1) (2 4 1 1 1 1) (4 1 1 1 1 2) (1 1 1 1 2 4) (1 1 1 2 4 1) (1 1 2 4 1 1) (elems 6 sum 10 olaps 30))" "((1 3 1 1 1 3) (3 1 1 1 3 1) (1 1 1 3 1 3) (1 1 3 1 3 1) (1 3 1 3 1 1) (3 1 3 1 1 1) (elems 6 sum 10 olaps 30))" "((1 3 1 1 2 2) (3 1 1 2 2 1) (1 1 2 2 1 3) (1 2 2 1 3 1) (2 2 1 3 1 1) (2 1 3 1 1 2) (elems 6 sum 10 olaps 30))" "((1 3 1 1 3 1) (3 1 1 3 1 1) (1 1 3 1 1 3) (1 3 1 1 3 1) (3 1 1 3 1 1) (1 1 3 1 1 3) (elems 6 sum 10 olaps 30))" "((1 3 1 2 1 2) (3 1 2 1 2 1) (1 2 1 2 1 3) (2 1 2 1 3 1) (1 2 1 3 1 2) (2 1 3 1 2 1) (elems 6 sum 10 olaps 30))" "((1 3 1 2 2 1) (3 1 2 2 1 1) (1 2 2 1 1 3) (2 2 1 1 3 1) (2 1 1 3 1 2) (1 1 3 1 2 2) (elems 6 sum 10 olaps 30))" "((1 3 1 3 1 1) (3 1 3 1 1 1) (1 3 1 1 1 3) (3 1 1 1 3 1) (1 1 1 3 1 3) (1 1 3 1 3 1) (elems 6 sum 10 olaps 30))" "((1 3 2 1 1 2) (3 2 1 1 2 1) (2 1 1 2 1 3) (1 1 2 1 3 2) (1 2 1 3 2 1) (2 1 3 2 1 1) (elems 6 sum 10 olaps 30))" "((1 3 2 1 2 1) (3 2 1 2 1 1) (2 1 2 1 1 3) (1 2 1 1 3 2) (2 1 1 3 2 1) (1 1 3 2 1 2) (elems 6 sum 10 olaps 30))" "((1 3 2 2 1 1) (3 2 2 1 1 1) (2 2 1 1 1 3) (2 1 1 1 3 2) (1 1 1 3 2 2) (1 1 3 2 2 1) (elems 6 sum 10 olaps 30))" "((1 3 3 1 1 1) (3 3 1 1 1 1) (3 1 1 1 1 3) (1 1 1 1 3 3) (1 1 1 3 3 1) (1 1 3 3 1 1) (elems 6 sum 10 olaps 30))" "((1 4 1 1 1 2) (4 1 1 1 2 1) (1 1 1 2 1 4) (1 1 2 1 4 1) (1 2 1 4 1 1) (2 1 4 1 1 1) (elems 6 sum 10 olaps 30))" "((1 4 1 1 2 1) (4 1 1 2 1 1) (1 1 2 1 1 4) (1 2 1 1 4 1) (2 1 1 4 1 1) (1 1 4 1 1 2) (elems 6 sum 10 olaps 30))" "((1 4 1 2 1 1) (4 1 2 1 1 1) (1 2 1 1 1 4) (2 1 1 1 4 1) (1 1 1 4 1 2) (1 1 4 1 2 1) (elems 6 sum 10 olaps 30))" "((1 4 2 1 1 1) (4 2 1 1 1 1) (2 1 1 1 1 4) (1 1 1 1 4 2) (1 1 1 4 2 1) (1 1 4 2 1 1) (elems 6 sum 10 olaps 30))" "((1 5 1 1 1 1) (5 1 1 1 1 1) (1 1 1 1 1 5) (1 1 1 1 5 1) (1 1 1 5 1 1) (1 1 5 1 1 1) (elems 6 sum 10 olaps 30))" "((2 1 1 1 1 4) (1 1 1 1 4 2) (1 1 1 4 2 1) (1 1 4 2 1 1) (1 4 2 1 1 1) (4 2 1 1 1 1) (elems 6 sum 10 olaps 30))" "((2 1 1 1 2 3) (1 1 1 2 3 2) (1 1 2 3 2 1) (1 2 3 2 1 1) (2 3 2 1 1 1) (3 2 1 1 1 2) (elems 6 sum 10 olaps 30))" "((2 1 1 1 3 2) (1 1 1 3 2 2) (1 1 3 2 2 1) (1 3 2 2 1 1) (3 2 2 1 1 1) (2 2 1 1 1 3) (elems 6 sum 10 olaps 30))" "((2 1 1 1 4 1) (1 1 1 4 1 2) (1 1 4 1 2 1) (1 4 1 2 1 1) (4 1 2 1 1 1) (1 2 1 1 1 4) (elems 6 sum 10 olaps 30))" "((2 1 1 2 1 3) (1 1 2 1 3 2) (1 2 1 3 2 1) (2 1 3 2 1 1) (1 3 2 1 1 2) (3 2 1 1 2 1) (elems 6 sum 10 olaps 30))" "((2 1 1 2 2 2) (1 1 2 2 2 2) (1 2 2 2 2 1) (2 2 2 2 1 1) (2 2 2 1 1 2) (2 2 1 1 2 2) (elems 6 sum 10 olaps 30))" "((2 1 1 2 3 1) (1 1 2 3 1 2) (1 2 3 1 2 1) (2 3 1 2 1 1) (3 1 2 1 1 2) (1 2 1 1 2 3) (elems 6 sum 10 olaps 30))" "((2 1 1 3 1 2) (1 1 3 1 2 2) (1 3 1 2 2 1) (3 1 2 2 1 1) (1 2 2 1 1 3) (2 2 1 1 3 1) (elems 6 sum 10 olaps 30))" "((2 1 1 3 2 1) (1 1 3 2 1 2) (1 3 2 1 2 1) (3 2 1 2 1 1) (2 1 2 1 1 3) (1 2 1 1 3 2) (elems 6 sum 10 olaps 30))" "((2 1 1 4 1 1) (1 1 4 1 1 2) (1 4 1 1 2 1) (4 1 1 2 1 1) (1 1 2 1 1 4) (1 2 1 1 4 1) (elems 6 sum 10 olaps 30))" "((2 1 2 1 1 3) (1 2 1 1 3 2) (2 1 1 3 2 1) (1 1 3 2 1 2) (1 3 2 1 2 1) (3 2 1 2 1 1) (elems 6 sum 10 olaps 30))" "((2 1 2 1 2 2) (1 2 1 2 2 2) (2 1 2 2 2 1) (1 2 2 2 1 2) (2 2 2 1 2 1) (2 2 1 2 1 2) (elems 6 sum 10 olaps 30))" "((2 1 2 1 3 1) (1 2 1 3 1 2) (2 1 3 1 2 1) (1 3 1 2 1 2) (3 1 2 1 2 1) (1 2 1 2 1 3) (elems 6 sum 10 olaps 30))" "((2 1 2 2 1 2) (1 2 2 1 2 2) (2 2 1 2 2 1) (2 1 2 2 1 2) (1 2 2 1 2 2) (2 2 1 2 2 1) (elems 6 sum 10 olaps 30))" "((2 1 2 2 2 1) (1 2 2 2 1 2) (2 2 2 1 2 1) (2 2 1 2 1 2) (2 1 2 1 2 2) (1 2 1 2 2 2) (elems 6 sum 10 olaps 30))" "((2 1 2 3 1 1) (1 2 3 1 1 2) (2 3 1 1 2 1) (3 1 1 2 1 2) (1 1 2 1 2 3) (1 2 1 2 3 1) (elems 6 sum 10 olaps 30))" "((2 1 3 1 1 2) (1 3 1 1 2 2) (3 1 1 2 2 1) (1 1 2 2 1 3) (1 2 2 1 3 1) (2 2 1 3 1 1) (elems 6 sum 10 olaps 30))" "((2 1 3 1 2 1) (1 3 1 2 1 2) (3 1 2 1 2 1) (1 2 1 2 1 3) (2 1 2 1 3 1) (1 2 1 3 1 2) (elems 6 sum 10 olaps 30))" "((2 1 3 2 1 1) (1 3 2 1 1 2) (3 2 1 1 2 1) (2 1 1 2 1 3) (1 1 2 1 3 2) (1 2 1 3 2 1) (elems 6 sum 10 olaps 30))" "((2 1 4 1 1 1) (1 4 1 1 1 2) (4 1 1 1 2 1) (1 1 1 2 1 4) (1 1 2 1 4 1) (1 2 1 4 1 1) (elems 6 sum 10 olaps 30))" "((2 2 1 1 1 3) (2 1 1 1 3 2) (1 1 1 3 2 2) (1 1 3 2 2 1) (1 3 2 2 1 1) (3 2 2 1 1 1) (elems 6 sum 10 olaps 30))" "((2 2 1 1 2 2) (2 1 1 2 2 2) (1 1 2 2 2 2) (1 2 2 2 2 1) (2 2 2 2 1 1) (2 2 2 1 1 2) (elems 6 sum 10 olaps 30))" "((2 2 1 1 3 1) (2 1 1 3 1 2) (1 1 3 1 2 2) (1 3 1 2 2 1) (3 1 2 2 1 1) (1 2 2 1 1 3) (elems 6 sum 10 olaps 30))" "((2 2 1 2 1 2) (2 1 2 1 2 2) (1 2 1 2 2 2) (2 1 2 2 2 1) (1 2 2 2 1 2) (2 2 2 1 2 1) (elems 6 sum 10 olaps 30))" "((2 2 1 2 2 1) (2 1 2 2 1 2) (1 2 2 1 2 2) (2 2 1 2 2 1) (2 1 2 2 1 2) (1 2 2 1 2 2) (elems 6 sum 10 olaps 30))" "((2 2 1 3 1 1) (2 1 3 1 1 2) (1 3 1 1 2 2) (3 1 1 2 2 1) (1 1 2 2 1 3) (1 2 2 1 3 1) (elems 6 sum 10 olaps 30))" "((2 2 2 1 1 2) (2 2 1 1 2 2) (2 1 1 2 2 2) (1 1 2 2 2 2) (1 2 2 2 2 1) (2 2 2 2 1 1) (elems 6 sum 10 olaps 30))" "((2 2 2 1 2 1) (2 2 1 2 1 2) (2 1 2 1 2 2) (1 2 1 2 2 2) (2 1 2 2 2 1) (1 2 2 2 1 2) (elems 6 sum 10 olaps 30))" "((2 2 2 2 1 1) (2 2 2 1 1 2) (2 2 1 1 2 2) (2 1 1 2 2 2) (1 1 2 2 2 2) (1 2 2 2 2 1) (elems 6 sum 10 olaps 30))" "((2 2 3 1 1 1) (2 3 1 1 1 2) (3 1 1 1 2 2) (1 1 1 2 2 3) (1 1 2 2 3 1) (1 2 2 3 1 1) (elems 6 sum 10 olaps 30))" "((2 3 1 1 1 2) (3 1 1 1 2 2) (1 1 1 2 2 3) (1 1 2 2 3 1) (1 2 2 3 1 1) (2 2 3 1 1 1) (elems 6 sum 10 olaps 30))" "((2 3 1 1 2 1) (3 1 1 2 1 2) (1 1 2 1 2 3) (1 2 1 2 3 1) (2 1 2 3 1 1) (1 2 3 1 1 2) (elems 6 sum 10 olaps 30))" "((2 3 1 2 1 1) (3 1 2 1 1 2) (1 2 1 1 2 3) (2 1 1 2 3 1) (1 1 2 3 1 2) (1 2 3 1 2 1) (elems 6 sum 10 olaps 30))" "((2 3 2 1 1 1) (3 2 1 1 1 2) (2 1 1 1 2 3) (1 1 1 2 3 2) (1 1 2 3 2 1) (1 2 3 2 1 1) (elems 6 sum 10 olaps 30))" "((2 4 1 1 1 1) (4 1 1 1 1 2) (1 1 1 1 2 4) (1 1 1 2 4 1) (1 1 2 4 1 1) (1 2 4 1 1 1) (elems 6 sum 10 olaps 30))" "((3 1 1 1 1 3) (1 1 1 1 3 3) (1 1 1 3 3 1) (1 1 3 3 1 1) (1 3 3 1 1 1) (3 3 1 1 1 1) (elems 6 sum 10 olaps 30))" "((3 1 1 1 2 2) (1 1 1 2 2 3) (1 1 2 2 3 1) (1 2 2 3 1 1) (2 2 3 1 1 1) (2 3 1 1 1 2) (elems 6 sum 10 olaps 30))" "((3 1 1 1 3 1) (1 1 1 3 1 3) (1 1 3 1 3 1) (1 3 1 3 1 1) (3 1 3 1 1 1) (1 3 1 1 1 3) (elems 6 sum 10 olaps 30))" "((3 1 1 2 1 2) (1 1 2 1 2 3) (1 2 1 2 3 1) (2 1 2 3 1 1) (1 2 3 1 1 2) (2 3 1 1 2 1) (elems 6 sum 10 olaps 30))" "((3 1 1 2 2 1) (1 1 2 2 1 3) (1 2 2 1 3 1) (2 2 1 3 1 1) (2 1 3 1 1 2) (1 3 1 1 2 2) (elems 6 sum 10 olaps 30))" "((3 1 1 3 1 1) (1 1 3 1 1 3) (1 3 1 1 3 1) (3 1 1 3 1 1) (1 1 3 1 1 3) (1 3 1 1 3 1) (elems 6 sum 10 olaps 30))" "((3 1 2 1 1 2) (1 2 1 1 2 3) (2 1 1 2 3 1) (1 1 2 3 1 2) (1 2 3 1 2 1) (2 3 1 2 1 1) (elems 6 sum 10 olaps 30))" "((3 1 2 1 2 1) (1 2 1 2 1 3) (2 1 2 1 3 1) (1 2 1 3 1 2) (2 1 3 1 2 1) (1 3 1 2 1 2) (elems 6 sum 10 olaps 30))" "((3 1 2 2 1 1) (1 2 2 1 1 3) (2 2 1 1 3 1) (2 1 1 3 1 2) (1 1 3 1 2 2) (1 3 1 2 2 1) (elems 6 sum 10 olaps 30))" "((3 1 3 1 1 1) (1 3 1 1 1 3) (3 1 1 1 3 1) (1 1 1 3 1 3) (1 1 3 1 3 1) (1 3 1 3 1 1) (elems 6 sum 10 olaps 30))" "((3 2 1 1 1 2) (2 1 1 1 2 3) (1 1 1 2 3 2) (1 1 2 3 2 1) (1 2 3 2 1 1) (2 3 2 1 1 1) (elems 6 sum 10 olaps 30))" "((3 2 1 1 2 1) (2 1 1 2 1 3) (1 1 2 1 3 2) (1 2 1 3 2 1) (2 1 3 2 1 1) (1 3 2 1 1 2) (elems 6 sum 10 olaps 30))" "((3 2 1 2 1 1) (2 1 2 1 1 3) (1 2 1 1 3 2) (2 1 1 3 2 1) (1 1 3 2 1 2) (1 3 2 1 2 1) (elems 6 sum 10 olaps 30))" "((3 2 2 1 1 1) (2 2 1 1 1 3) (2 1 1 1 3 2) (1 1 1 3 2 2) (1 1 3 2 2 1) (1 3 2 2 1 1) (elems 6 sum 10 olaps 30))" "((3 3 1 1 1 1) (3 1 1 1 1 3) (1 1 1 1 3 3) (1 1 1 3 3 1) (1 1 3 3 1 1) (1 3 3 1 1 1) (elems 6 sum 10 olaps 30))" "((4 1 1 1 1 2) (1 1 1 1 2 4) (1 1 1 2 4 1) (1 1 2 4 1 1) (1 2 4 1 1 1) (2 4 1 1 1 1) (elems 6 sum 10 olaps 30))" "((4 1 1 1 2 1) (1 1 1 2 1 4) (1 1 2 1 4 1) (1 2 1 4 1 1) (2 1 4 1 1 1) (1 4 1 1 1 2) (elems 6 sum 10 olaps 30))" "((4 1 1 2 1 1) (1 1 2 1 1 4) (1 2 1 1 4 1) (2 1 1 4 1 1) (1 1 4 1 1 2) (1 4 1 1 2 1) (elems 6 sum 10 olaps 30))" "((4 1 2 1 1 1) (1 2 1 1 1 4) (2 1 1 1 4 1) (1 1 1 4 1 2) (1 1 4 1 2 1) (1 4 1 2 1 1) (elems 6 sum 10 olaps 30))" "((4 2 1 1 1 1) (2 1 1 1 1 4) (1 1 1 1 4 2) (1 1 1 4 2 1) (1 1 4 2 1 1) (1 4 2 1 1 1) (elems 6 sum 10 olaps 30))" "((5 1 1 1 1 1) (1 1 1 1 1 5) (1 1 1 1 5 1) (1 1 1 5 1 1) (1 1 5 1 1 1) (1 5 1 1 1 1) (elems 6 sum 10 olaps 30))" "((1 1 1 1 2 6) (1 1 1 2 6 1) (1 1 2 6 1 1) (1 2 6 1 1 1) (2 6 1 1 1 1) (6 1 1 1 1 2) (elems 6 sum 12 olaps 28))" "((1 1 1 1 3 5) (1 1 1 3 5 1) (1 1 3 5 1 1) (1 3 5 1 1 1) (3 5 1 1 1 1) (5 1 1 1 1 3) (elems 6 sum 12 olaps 30))" "((1 1 1 1 4 4) (1 1 1 4 4 1) (1 1 4 4 1 1) (1 4 4 1 1 1) (4 4 1 1 1 1) (4 1 1 1 1 4) (elems 6 sum 12 olaps 30))" "((1 1 1 1 5 3) (1 1 1 5 3 1) (1 1 5 3 1 1) (1 5 3 1 1 1) (5 3 1 1 1 1) (3 1 1 1 1 5) (elems 6 sum 12 olaps 30))" "((1 1 1 1 6 2) (1 1 1 6 2 1) (1 1 6 2 1 1) (1 6 2 1 1 1) (6 2 1 1 1 1) (2 1 1 1 1 6) (elems 6 sum 12 olaps 28))" "((1 1 1 2 1 6) (1 1 2 1 6 1) (1 2 1 6 1 1) (2 1 6 1 1 1) (1 6 1 1 1 2) (6 1 1 1 2 1) (elems 6 sum 12 olaps 30))" "((1 1 1 2 2 5) (1 1 2 2 5 1) (1 2 2 5 1 1) (2 2 5 1 1 1) (2 5 1 1 1 2) (5 1 1 1 2 2) (elems 6 sum 12 olaps 30))" "((1 1 1 2 3 4) (1 1 2 3 4 1) (1 2 3 4 1 1) (2 3 4 1 1 1) (3 4 1 1 1 2) (4 1 1 1 2 3) (elems 6 sum 12 olaps 30))" "((1 1 1 2 4 3) (1 1 2 4 3 1) (1 2 4 3 1 1) (2 4 3 1 1 1) (4 3 1 1 1 2) (3 1 1 1 2 4) (elems 6 sum 12 olaps 30))" "((1 1 1 2 5 2) (1 1 2 5 2 1) (1 2 5 2 1 1) (2 5 2 1 1 1) (5 2 1 1 1 2) (2 1 1 1 2 5) (elems 6 sum 12 olaps 30))" "((1 1 1 2 6 1) (1 1 2 6 1 1) (1 2 6 1 1 1) (2 6 1 1 1 1) (6 1 1 1 1 2) (1 1 1 1 2 6) (elems 6 sum 12 olaps 28))" "((1 1 1 3 1 5) (1 1 3 1 5 1) (1 3 1 5 1 1) (3 1 5 1 1 1) (1 5 1 1 1 3) (5 1 1 1 3 1) (elems 6 sum 12 olaps 30))" "((1 1 1 3 2 4) (1 1 3 2 4 1) (1 3 2 4 1 1) (3 2 4 1 1 1) (2 4 1 1 1 3) (4 1 1 1 3 2) (elems 6 sum 12 olaps 30))" "((1 1 1 3 3 3) (1 1 3 3 3 1) (1 3 3 3 1 1) (3 3 3 1 1 1) (3 3 1 1 1 3) (3 1 1 1 3 3) (elems 6 sum 12 olaps 30))" "((1 1 1 3 4 2) (1 1 3 4 2 1) (1 3 4 2 1 1) (3 4 2 1 1 1) (4 2 1 1 1 3) (2 1 1 1 3 4) (elems 6 sum 12 olaps 30))" "((1 1 1 3 5 1) (1 1 3 5 1 1) (1 3 5 1 1 1) (3 5 1 1 1 1) (5 1 1 1 1 3) (1 1 1 1 3 5) (elems 6 sum 12 olaps 30))" "((1 1 1 4 1 4) (1 1 4 1 4 1) (1 4 1 4 1 1) (4 1 4 1 1 1) (1 4 1 1 1 4) (4 1 1 1 4 1) (elems 6 sum 12 olaps 28))" "((1 1 1 4 2 3) (1 1 4 2 3 1) (1 4 2 3 1 1) (4 2 3 1 1 1) (2 3 1 1 1 4) (3 1 1 1 4 2) (elems 6 sum 12 olaps 30))" "((1 1 1 4 3 2) (1 1 4 3 2 1) (1 4 3 2 1 1) (4 3 2 1 1 1) (3 2 1 1 1 4) (2 1 1 1 4 3) (elems 6 sum 12 olaps 30))" "((1 1 1 4 4 1) (1 1 4 4 1 1) (1 4 4 1 1 1) (4 4 1 1 1 1) (4 1 1 1 1 4) (1 1 1 1 4 4) (elems 6 sum 12 olaps 30))" "((1 1 1 5 1 3) (1 1 5 1 3 1) (1 5 1 3 1 1) (5 1 3 1 1 1) (1 3 1 1 1 5) (3 1 1 1 5 1) (elems 6 sum 12 olaps 30))" "((1 1 1 5 2 2) (1 1 5 2 2 1) (1 5 2 2 1 1) (5 2 2 1 1 1) (2 2 1 1 1 5) (2 1 1 1 5 2) (elems 6 sum 12 olaps 30))" "((1 1 1 5 3 1) (1 1 5 3 1 1) (1 5 3 1 1 1) (5 3 1 1 1 1) (3 1 1 1 1 5) (1 1 1 1 5 3) (elems 6 sum 12 olaps 30))" "((1 1 1 6 1 2) (1 1 6 1 2 1) (1 6 1 2 1 1) (6 1 2 1 1 1) (1 2 1 1 1 6) (2 1 1 1 6 1) (elems 6 sum 12 olaps 30))" "((1 1 1 6 2 1) (1 1 6 2 1 1) (1 6 2 1 1 1) (6 2 1 1 1 1) (2 1 1 1 1 6) (1 1 1 1 6 2) (elems 6 sum 12 olaps 28))" "((1 1 2 1 1 6) (1 2 1 1 6 1) (2 1 1 6 1 1) (1 1 6 1 1 2) (1 6 1 1 2 1) (6 1 1 2 1 1) (elems 6 sum 12 olaps 30))" "((1 1 2 1 2 5) (1 2 1 2 5 1) (2 1 2 5 1 1) (1 2 5 1 1 2) (2 5 1 1 2 1) (5 1 1 2 1 2) (elems 6 sum 12 olaps 30))" "((1 1 2 1 3 4) (1 2 1 3 4 1) (2 1 3 4 1 1) (1 3 4 1 1 2) (3 4 1 1 2 1) (4 1 1 2 1 3) (elems 6 sum 12 olaps 30))" "((1 1 2 1 4 3) (1 2 1 4 3 1) (2 1 4 3 1 1) (1 4 3 1 1 2) (4 3 1 1 2 1) (3 1 1 2 1 4) (elems 6 sum 12 olaps 30))" "((1 1 2 1 5 2) (1 2 1 5 2 1) (2 1 5 2 1 1) (1 5 2 1 1 2) (5 2 1 1 2 1) (2 1 1 2 1 5) (elems 6 sum 12 olaps 30))" "((1 1 2 1 6 1) (1 2 1 6 1 1) (2 1 6 1 1 1) (1 6 1 1 1 2) (6 1 1 1 2 1) (1 1 1 2 1 6) (elems 6 sum 12 olaps 30))" "((1 1 2 2 1 5) (1 2 2 1 5 1) (2 2 1 5 1 1) (2 1 5 1 1 2) (1 5 1 1 2 2) (5 1 1 2 2 1) (elems 6 sum 12 olaps 30))" "((1 1 2 2 2 4) (1 2 2 2 4 1) (2 2 2 4 1 1) (2 2 4 1 1 2) (2 4 1 1 2 2) (4 1 1 2 2 2) (elems 6 sum 12 olaps 28))" "((1 1 2 2 3 3) (1 2 2 3 3 1) (2 2 3 3 1 1) (2 3 3 1 1 2) (3 3 1 1 2 2) (3 1 1 2 2 3) (elems 6 sum 12 olaps 30))" "((1 1 2 2 4 2) (1 2 2 4 2 1) (2 2 4 2 1 1) (2 4 2 1 1 2) (4 2 1 1 2 2) (2 1 1 2 2 4) (elems 6 sum 12 olaps 28))" "((1 1 2 2 5 1) (1 2 2 5 1 1) (2 2 5 1 1 1) (2 5 1 1 1 2) (5 1 1 1 2 2) (1 1 1 2 2 5) (elems 6 sum 12 olaps 30))" "((1 1 2 3 1 4) (1 2 3 1 4 1) (2 3 1 4 1 1) (3 1 4 1 1 2) (1 4 1 1 2 3) (4 1 1 2 3 1) (elems 6 sum 12 olaps 30))" "((1 1 2 3 2 3) (1 2 3 2 3 1) (2 3 2 3 1 1) (3 2 3 1 1 2) (2 3 1 1 2 3) (3 1 1 2 3 2) (elems 6 sum 12 olaps 30))" "((1 1 2 3 3 2) (1 2 3 3 2 1) (2 3 3 2 1 1) (3 3 2 1 1 2) (3 2 1 1 2 3) (2 1 1 2 3 3) (elems 6 sum 12 olaps 30))" "((1 1 2 3 4 1) (1 2 3 4 1 1) (2 3 4 1 1 1) (3 4 1 1 1 2) (4 1 1 1 2 3) (1 1 1 2 3 4) (elems 6 sum 12 olaps 30))" "((1 1 2 4 1 3) (1 2 4 1 3 1) (2 4 1 3 1 1) (4 1 3 1 1 2) (1 3 1 1 2 4) (3 1 1 2 4 1) (elems 6 sum 12 olaps 30))" "((1 1 2 4 2 2) (1 2 4 2 2 1) (2 4 2 2 1 1) (4 2 2 1 1 2) (2 2 1 1 2 4) (2 1 1 2 4 2) (elems 6 sum 12 olaps 28))" "((1 1 2 4 3 1) (1 2 4 3 1 1) (2 4 3 1 1 1) (4 3 1 1 1 2) (3 1 1 1 2 4) (1 1 1 2 4 3) (elems 6 sum 12 olaps 30))" "((1 1 2 5 1 2) (1 2 5 1 2 1) (2 5 1 2 1 1) (5 1 2 1 1 2) (1 2 1 1 2 5) (2 1 1 2 5 1) (elems 6 sum 12 olaps 30))" "((1 1 2 5 2 1) (1 2 5 2 1 1) (2 5 2 1 1 1) (5 2 1 1 1 2) (2 1 1 1 2 5) (1 1 1 2 5 2) (elems 6 sum 12 olaps 30))" "((1 1 2 6 1 1) (1 2 6 1 1 1) (2 6 1 1 1 1) (6 1 1 1 1 2) (1 1 1 1 2 6) (1 1 1 2 6 1) (elems 6 sum 12 olaps 28))" "((1 1 3 1 1 5) (1 3 1 1 5 1) (3 1 1 5 1 1) (1 1 5 1 1 3) (1 5 1 1 3 1) (5 1 1 3 1 1) (elems 6 sum 12 olaps 28))" "((1 1 3 1 2 4) (1 3 1 2 4 1) (3 1 2 4 1 1) (1 2 4 1 1 3) (2 4 1 1 3 1) (4 1 1 3 1 2) (elems 6 sum 12 olaps 30))" "((1 1 3 1 3 3) (1 3 1 3 3 1) (3 1 3 3 1 1) (1 3 3 1 1 3) (3 3 1 1 3 1) (3 1 1 3 1 3) (elems 6 sum 12 olaps 28))" "((1 1 3 1 4 2) (1 3 1 4 2 1) (3 1 4 2 1 1) (1 4 2 1 1 3) (4 2 1 1 3 1) (2 1 1 3 1 4) (elems 6 sum 12 olaps 30))" "((1 1 3 1 5 1) (1 3 1 5 1 1) (3 1 5 1 1 1) (1 5 1 1 1 3) (5 1 1 1 3 1) (1 1 1 3 1 5) (elems 6 sum 12 olaps 30))" "((1 1 3 2 1 4) (1 3 2 1 4 1) (3 2 1 4 1 1) (2 1 4 1 1 3) (1 4 1 1 3 2) (4 1 1 3 2 1) (elems 6 sum 12 olaps 30))" "((1 1 3 2 2 3) (1 3 2 2 3 1) (3 2 2 3 1 1) (2 2 3 1 1 3) (2 3 1 1 3 2) (3 1 1 3 2 2) (elems 6 sum 12 olaps 30))" "((1 1 3 2 3 2) (1 3 2 3 2 1) (3 2 3 2 1 1) (2 3 2 1 1 3) (3 2 1 1 3 2) (2 1 1 3 2 3) (elems 6 sum 12 olaps 30))" "((1 1 3 2 4 1) (1 3 2 4 1 1) (3 2 4 1 1 1) (2 4 1 1 1 3) (4 1 1 1 3 2) (1 1 1 3 2 4) (elems 6 sum 12 olaps 30))" "((1 1 3 3 1 3) (1 3 3 1 3 1) (3 3 1 3 1 1) (3 1 3 1 1 3) (1 3 1 1 3 3) (3 1 1 3 3 1) (elems 6 sum 12 olaps 28))" "((1 1 3 3 2 2) (1 3 3 2 2 1) (3 3 2 2 1 1) (3 2 2 1 1 3) (2 2 1 1 3 3) (2 1 1 3 3 2) (elems 6 sum 12 olaps 30))" "((1 1 3 3 3 1) (1 3 3 3 1 1) (3 3 3 1 1 1) (3 3 1 1 1 3) (3 1 1 1 3 3) (1 1 1 3 3 3) (elems 6 sum 12 olaps 30))" "((1 1 3 4 1 2) (1 3 4 1 2 1) (3 4 1 2 1 1) (4 1 2 1 1 3) (1 2 1 1 3 4) (2 1 1 3 4 1) (elems 6 sum 12 olaps 30))" "((1 1 3 4 2 1) (1 3 4 2 1 1) (3 4 2 1 1 1) (4 2 1 1 1 3) (2 1 1 1 3 4) (1 1 1 3 4 2) (elems 6 sum 12 olaps 30))" "((1 1 3 5 1 1) (1 3 5 1 1 1) (3 5 1 1 1 1) (5 1 1 1 1 3) (1 1 1 1 3 5) (1 1 1 3 5 1) (elems 6 sum 12 olaps 30))" "((1 1 4 1 1 4) (1 4 1 1 4 1) (4 1 1 4 1 1) (1 1 4 1 1 4) (1 4 1 1 4 1) (4 1 1 4 1 1) (elems 6 sum 12 olaps 30))" "((1 1 4 1 2 3) (1 4 1 2 3 1) (4 1 2 3 1 1) (1 2 3 1 1 4) (2 3 1 1 4 1) (3 1 1 4 1 2) (elems 6 sum 12 olaps 30))" "((1 1 4 1 3 2) (1 4 1 3 2 1) (4 1 3 2 1 1) (1 3 2 1 1 4) (3 2 1 1 4 1) (2 1 1 4 1 3) (elems 6 sum 12 olaps 30))" "((1 1 4 1 4 1) (1 4 1 4 1 1) (4 1 4 1 1 1) (1 4 1 1 1 4) (4 1 1 1 4 1) (1 1 1 4 1 4) (elems 6 sum 12 olaps 28))" "((1 1 4 2 1 3) (1 4 2 1 3 1) (4 2 1 3 1 1) (2 1 3 1 1 4) (1 3 1 1 4 2) (3 1 1 4 2 1) (elems 6 sum 12 olaps 30))" "((1 1 4 2 2 2) (1 4 2 2 2 1) (4 2 2 2 1 1) (2 2 2 1 1 4) (2 2 1 1 4 2) (2 1 1 4 2 2) (elems 6 sum 12 olaps 28))" "((1 1 4 2 3 1) (1 4 2 3 1 1) (4 2 3 1 1 1) (2 3 1 1 1 4) (3 1 1 1 4 2) (1 1 1 4 2 3) (elems 6 sum 12 olaps 30))" "((1 1 4 3 1 2) (1 4 3 1 2 1) (4 3 1 2 1 1) (3 1 2 1 1 4) (1 2 1 1 4 3) (2 1 1 4 3 1) (elems 6 sum 12 olaps 30))" "((1 1 4 3 2 1) (1 4 3 2 1 1) (4 3 2 1 1 1) (3 2 1 1 1 4) (2 1 1 1 4 3) (1 1 1 4 3 2) (elems 6 sum 12 olaps 30))" "((1 1 4 4 1 1) (1 4 4 1 1 1) (4 4 1 1 1 1) (4 1 1 1 1 4) (1 1 1 1 4 4) (1 1 1 4 4 1) (elems 6 sum 12 olaps 30))" "((1 1 5 1 1 3) (1 5 1 1 3 1) (5 1 1 3 1 1) (1 1 3 1 1 5) (1 3 1 1 5 1) (3 1 1 5 1 1) (elems 6 sum 12 olaps 28))" "((1 1 5 1 2 2) (1 5 1 2 2 1) (5 1 2 2 1 1) (1 2 2 1 1 5) (2 2 1 1 5 1) (2 1 1 5 1 2) (elems 6 sum 12 olaps 30))" "((1 1 5 1 3 1) (1 5 1 3 1 1) (5 1 3 1 1 1) (1 3 1 1 1 5) (3 1 1 1 5 1) (1 1 1 5 1 3) (elems 6 sum 12 olaps 30))" "((1 1 5 2 1 2) (1 5 2 1 2 1) (5 2 1 2 1 1) (2 1 2 1 1 5) (1 2 1 1 5 2) (2 1 1 5 2 1) (elems 6 sum 12 olaps 30))" "((1 1 5 2 2 1) (1 5 2 2 1 1) (5 2 2 1 1 1) (2 2 1 1 1 5) (2 1 1 1 5 2) (1 1 1 5 2 2) (elems 6 sum 12 olaps 30))" "((1 1 5 3 1 1) (1 5 3 1 1 1) (5 3 1 1 1 1) (3 1 1 1 1 5) (1 1 1 1 5 3) (1 1 1 5 3 1) (elems 6 sum 12 olaps 30))" "((1 1 6 1 1 2) (1 6 1 1 2 1) (6 1 1 2 1 1) (1 1 2 1 1 6) (1 2 1 1 6 1) (2 1 1 6 1 1) (elems 6 sum 12 olaps 30))" "((1 1 6 1 2 1) (1 6 1 2 1 1) (6 1 2 1 1 1) (1 2 1 1 1 6) (2 1 1 1 6 1) (1 1 1 6 1 2) (elems 6 sum 12 olaps 30))" "((1 1 6 2 1 1) (1 6 2 1 1 1) (6 2 1 1 1 1) (2 1 1 1 1 6) (1 1 1 1 6 2) (1 1 1 6 2 1) (elems 6 sum 12 olaps 28))" "((1 2 1 1 1 6) (2 1 1 1 6 1) (1 1 1 6 1 2) (1 1 6 1 2 1) (1 6 1 2 1 1) (6 1 2 1 1 1) (elems 6 sum 12 olaps 30))" "((1 2 1 1 2 5) (2 1 1 2 5 1) (1 1 2 5 1 2) (1 2 5 1 2 1) (2 5 1 2 1 1) (5 1 2 1 1 2) (elems 6 sum 12 olaps 30))" "((1 2 1 1 3 4) (2 1 1 3 4 1) (1 1 3 4 1 2) (1 3 4 1 2 1) (3 4 1 2 1 1) (4 1 2 1 1 3) (elems 6 sum 12 olaps 30))" "((1 2 1 1 4 3) (2 1 1 4 3 1) (1 1 4 3 1 2) (1 4 3 1 2 1) (4 3 1 2 1 1) (3 1 2 1 1 4) (elems 6 sum 12 olaps 30))" "((1 2 1 1 5 2) (2 1 1 5 2 1) (1 1 5 2 1 2) (1 5 2 1 2 1) (5 2 1 2 1 1) (2 1 2 1 1 5) (elems 6 sum 12 olaps 30))" "((1 2 1 1 6 1) (2 1 1 6 1 1) (1 1 6 1 1 2) (1 6 1 1 2 1) (6 1 1 2 1 1) (1 1 2 1 1 6) (elems 6 sum 12 olaps 30))" "((1 2 1 2 1 5) (2 1 2 1 5 1) (1 2 1 5 1 2) (2 1 5 1 2 1) (1 5 1 2 1 2) (5 1 2 1 2 1) (elems 6 sum 12 olaps 30))" "((1 2 1 2 2 4) (2 1 2 2 4 1) (1 2 2 4 1 2) (2 2 4 1 2 1) (2 4 1 2 1 2) (4 1 2 1 2 2) (elems 6 sum 12 olaps 30))" "((1 2 1 2 3 3) (2 1 2 3 3 1) (1 2 3 3 1 2) (2 3 3 1 2 1) (3 3 1 2 1 2) (3 1 2 1 2 3) (elems 6 sum 12 olaps 30))" "((1 2 1 2 4 2) (2 1 2 4 2 1) (1 2 4 2 1 2) (2 4 2 1 2 1) (4 2 1 2 1 2) (2 1 2 1 2 4) (elems 6 sum 12 olaps 30))" "((1 2 1 2 5 1) (2 1 2 5 1 1) (1 2 5 1 1 2) (2 5 1 1 2 1) (5 1 1 2 1 2) (1 1 2 1 2 5) (elems 6 sum 12 olaps 30))" "((1 2 1 3 1 4) (2 1 3 1 4 1) (1 3 1 4 1 2) (3 1 4 1 2 1) (1 4 1 2 1 3) (4 1 2 1 3 1) (elems 6 sum 12 olaps 28))" "((1 2 1 3 2 3) (2 1 3 2 3 1) (1 3 2 3 1 2) (3 2 3 1 2 1) (2 3 1 2 1 3) (3 1 2 1 3 2) (elems 6 sum 12 olaps 30))" "((1 2 1 3 3 2) (2 1 3 3 2 1) (1 3 3 2 1 2) (3 3 2 1 2 1) (3 2 1 2 1 3) (2 1 2 1 3 3) (elems 6 sum 12 olaps 30))" "((1 2 1 3 4 1) (2 1 3 4 1 1) (1 3 4 1 1 2) (3 4 1 1 2 1) (4 1 1 2 1 3) (1 1 2 1 3 4) (elems 6 sum 12 olaps 30))" "((1 2 1 4 1 3) (2 1 4 1 3 1) (1 4 1 3 1 2) (4 1 3 1 2 1) (1 3 1 2 1 4) (3 1 2 1 4 1) (elems 6 sum 12 olaps 28))" "((1 2 1 4 2 2) (2 1 4 2 2 1) (1 4 2 2 1 2) (4 2 2 1 2 1) (2 2 1 2 1 4) (2 1 2 1 4 2) (elems 6 sum 12 olaps 30))" "((1 2 1 4 3 1) (2 1 4 3 1 1) (1 4 3 1 1 2) (4 3 1 1 2 1) (3 1 1 2 1 4) (1 1 2 1 4 3) (elems 6 sum 12 olaps 30))" "((1 2 1 5 1 2) (2 1 5 1 2 1) (1 5 1 2 1 2) (5 1 2 1 2 1) (1 2 1 2 1 5) (2 1 2 1 5 1) (elems 6 sum 12 olaps 30))" "((1 2 1 5 2 1) (2 1 5 2 1 1) (1 5 2 1 1 2) (5 2 1 1 2 1) (2 1 1 2 1 5) (1 1 2 1 5 2) (elems 6 sum 12 olaps 30))" "((1 2 1 6 1 1) (2 1 6 1 1 1) (1 6 1 1 1 2) (6 1 1 1 2 1) (1 1 1 2 1 6) (1 1 2 1 6 1) (elems 6 sum 12 olaps 30))" "((1 2 2 1 1 5) (2 2 1 1 5 1) (2 1 1 5 1 2) (1 1 5 1 2 2) (1 5 1 2 2 1) (5 1 2 2 1 1) (elems 6 sum 12 olaps 30))" "((1 2 2 1 2 4) (2 2 1 2 4 1) (2 1 2 4 1 2) (1 2 4 1 2 2) (2 4 1 2 2 1) (4 1 2 2 1 2) (elems 6 sum 12 olaps 30))" "((1 2 2 1 3 3) (2 2 1 3 3 1) (2 1 3 3 1 2) (1 3 3 1 2 2) (3 3 1 2 2 1) (3 1 2 2 1 3) (elems 6 sum 12 olaps 30))" "((1 2 2 1 4 2) (2 2 1 4 2 1) (2 1 4 2 1 2) (1 4 2 1 2 2) (4 2 1 2 2 1) (2 1 2 2 1 4) (elems 6 sum 12 olaps 30))" "((1 2 2 1 5 1) (2 2 1 5 1 1) (2 1 5 1 1 2) (1 5 1 1 2 2) (5 1 1 2 2 1) (1 1 2 2 1 5) (elems 6 sum 12 olaps 30))" "((1 2 2 2 1 4) (2 2 2 1 4 1) (2 2 1 4 1 2) (2 1 4 1 2 2) (1 4 1 2 2 2) (4 1 2 2 2 1) (elems 6 sum 12 olaps 30))" "((1 2 2 2 2 3) (2 2 2 2 3 1) (2 2 2 3 1 2) (2 2 3 1 2 2) (2 3 1 2 2 2) (3 1 2 2 2 2) (elems 6 sum 12 olaps 28))" "((1 2 2 2 3 2) (2 2 2 3 2 1) (2 2 3 2 1 2) (2 3 2 1 2 2) (3 2 1 2 2 2) (2 1 2 2 2 3) (elems 6 sum 12 olaps 28))" "((1 2 2 2 4 1) (2 2 2 4 1 1) (2 2 4 1 1 2) (2 4 1 1 2 2) (4 1 1 2 2 2) (1 1 2 2 2 4) (elems 6 sum 12 olaps 28))" "((1 2 2 3 1 3) (2 2 3 1 3 1) (2 3 1 3 1 2) (3 1 3 1 2 2) (1 3 1 2 2 3) (3 1 2 2 3 1) (elems 6 sum 12 olaps 30))" "((1 2 2 3 2 2) (2 2 3 2 2 1) (2 3 2 2 1 2) (3 2 2 1 2 2) (2 2 1 2 2 3) (2 1 2 2 3 2) (elems 6 sum 12 olaps 28))" "((1 2 2 3 3 1) (2 2 3 3 1 1) (2 3 3 1 1 2) (3 3 1 1 2 2) (3 1 1 2 2 3) (1 1 2 2 3 3) (elems 6 sum 12 olaps 30))" "((1 2 2 4 1 2) (2 2 4 1 2 1) (2 4 1 2 1 2) (4 1 2 1 2 2) (1 2 1 2 2 4) (2 1 2 2 4 1) (elems 6 sum 12 olaps 30))" "((1 2 2 4 2 1) (2 2 4 2 1 1) (2 4 2 1 1 2) (4 2 1 1 2 2) (2 1 1 2 2 4) (1 1 2 2 4 2) (elems 6 sum 12 olaps 28))" "((1 2 2 5 1 1) (2 2 5 1 1 1) (2 5 1 1 1 2) (5 1 1 1 2 2) (1 1 1 2 2 5) (1 1 2 2 5 1) (elems 6 sum 12 olaps 30))" "((1 2 3 1 1 4) (2 3 1 1 4 1) (3 1 1 4 1 2) (1 1 4 1 2 3) (1 4 1 2 3 1) (4 1 2 3 1 1) (elems 6 sum 12 olaps 30))" "((1 2 3 1 2 3) (2 3 1 2 3 1) (3 1 2 3 1 2) (1 2 3 1 2 3) (2 3 1 2 3 1) (3 1 2 3 1 2) (elems 6 sum 12 olaps 30))" "((1 2 3 1 3 2) (2 3 1 3 2 1) (3 1 3 2 1 2) (1 3 2 1 2 3) (3 2 1 2 3 1) (2 1 2 3 1 3) (elems 6 sum 12 olaps 30))" "((1 2 3 1 4 1) (2 3 1 4 1 1) (3 1 4 1 1 2) (1 4 1 1 2 3) (4 1 1 2 3 1) (1 1 2 3 1 4) (elems 6 sum 12 olaps 30))" "((1 2 3 2 1 3) (2 3 2 1 3 1) (3 2 1 3 1 2) (2 1 3 1 2 3) (1 3 1 2 3 2) (3 1 2 3 2 1) (elems 6 sum 12 olaps 30))" "((1 2 3 2 2 2) (2 3 2 2 2 1) (3 2 2 2 1 2) (2 2 2 1 2 3) (2 2 1 2 3 2) (2 1 2 3 2 2) (elems 6 sum 12 olaps 28))" "((1 2 3 2 3 1) (2 3 2 3 1 1) (3 2 3 1 1 2) (2 3 1 1 2 3) (3 1 1 2 3 2) (1 1 2 3 2 3) (elems 6 sum 12 olaps 30))" "((1 2 3 3 1 2) (2 3 3 1 2 1) (3 3 1 2 1 2) (3 1 2 1 2 3) (1 2 1 2 3 3) (2 1 2 3 3 1) (elems 6 sum 12 olaps 30))" "((1 2 3 3 2 1) (2 3 3 2 1 1) (3 3 2 1 1 2) (3 2 1 1 2 3) (2 1 1 2 3 3) (1 1 2 3 3 2) (elems 6 sum 12 olaps 30))" "((1 2 3 4 1 1) (2 3 4 1 1 1) (3 4 1 1 1 2) (4 1 1 1 2 3) (1 1 1 2 3 4) (1 1 2 3 4 1) (elems 6 sum 12 olaps 30))" "((1 2 4 1 1 3) (2 4 1 1 3 1) (4 1 1 3 1 2) (1 1 3 1 2 4) (1 3 1 2 4 1) (3 1 2 4 1 1) (elems 6 sum 12 olaps 30))" "((1 2 4 1 2 2) (2 4 1 2 2 1) (4 1 2 2 1 2) (1 2 2 1 2 4) (2 2 1 2 4 1) (2 1 2 4 1 2) (elems 6 sum 12 olaps 30))" "((1 2 4 1 3 1) (2 4 1 3 1 1) (4 1 3 1 1 2) (1 3 1 1 2 4) (3 1 1 2 4 1) (1 1 2 4 1 3) (elems 6 sum 12 olaps 30))" "((1 2 4 2 1 2) (2 4 2 1 2 1) (4 2 1 2 1 2) (2 1 2 1 2 4) (1 2 1 2 4 2) (2 1 2 4 2 1) (elems 6 sum 12 olaps 30))" "((1 2 4 2 2 1) (2 4 2 2 1 1) (4 2 2 1 1 2) (2 2 1 1 2 4) (2 1 1 2 4 2) (1 1 2 4 2 2) (elems 6 sum 12 olaps 28))" "((1 2 4 3 1 1) (2 4 3 1 1 1) (4 3 1 1 1 2) (3 1 1 1 2 4) (1 1 1 2 4 3) (1 1 2 4 3 1) (elems 6 sum 12 olaps 30))" "((1 2 5 1 1 2) (2 5 1 1 2 1) (5 1 1 2 1 2) (1 1 2 1 2 5) (1 2 1 2 5 1) (2 1 2 5 1 1) (elems 6 sum 12 olaps 30))" "((1 2 5 1 2 1) (2 5 1 2 1 1) (5 1 2 1 1 2) (1 2 1 1 2 5) (2 1 1 2 5 1) (1 1 2 5 1 2) (elems 6 sum 12 olaps 30))" "((1 2 5 2 1 1) (2 5 2 1 1 1) (5 2 1 1 1 2) (2 1 1 1 2 5) (1 1 1 2 5 2) (1 1 2 5 2 1) (elems 6 sum 12 olaps 30))" "((1 2 6 1 1 1) (2 6 1 1 1 1) (6 1 1 1 1 2) (1 1 1 1 2 6) (1 1 1 2 6 1) (1 1 2 6 1 1) (elems 6 sum 12 olaps 28))" "((1 3 1 1 1 5) (3 1 1 1 5 1) (1 1 1 5 1 3) (1 1 5 1 3 1) (1 5 1 3 1 1) (5 1 3 1 1 1) (elems 6 sum 12 olaps 30))" "((1 3 1 1 2 4) (3 1 1 2 4 1) (1 1 2 4 1 3) (1 2 4 1 3 1) (2 4 1 3 1 1) (4 1 3 1 1 2) (elems 6 sum 12 olaps 30))" "((1 3 1 1 3 3) (3 1 1 3 3 1) (1 1 3 3 1 3) (1 3 3 1 3 1) (3 3 1 3 1 1) (3 1 3 1 1 3) (elems 6 sum 12 olaps 28))" "((1 3 1 1 4 2) (3 1 1 4 2 1) (1 1 4 2 1 3) (1 4 2 1 3 1) (4 2 1 3 1 1) (2 1 3 1 1 4) (elems 6 sum 12 olaps 30))" "((1 3 1 1 5 1) (3 1 1 5 1 1) (1 1 5 1 1 3) (1 5 1 1 3 1) (5 1 1 3 1 1) (1 1 3 1 1 5) (elems 6 sum 12 olaps 28))" "((1 3 1 2 1 4) (3 1 2 1 4 1) (1 2 1 4 1 3) (2 1 4 1 3 1) (1 4 1 3 1 2) (4 1 3 1 2 1) (elems 6 sum 12 olaps 28))" "((1 3 1 2 2 3) (3 1 2 2 3 1) (1 2 2 3 1 3) (2 2 3 1 3 1) (2 3 1 3 1 2) (3 1 3 1 2 2) (elems 6 sum 12 olaps 30))" "((1 3 1 2 3 2) (3 1 2 3 2 1) (1 2 3 2 1 3) (2 3 2 1 3 1) (3 2 1 3 1 2) (2 1 3 1 2 3) (elems 6 sum 12 olaps 30))" "((1 3 1 2 4 1) (3 1 2 4 1 1) (1 2 4 1 1 3) (2 4 1 1 3 1) (4 1 1 3 1 2) (1 1 3 1 2 4) (elems 6 sum 12 olaps 30))" "((1 3 1 3 1 3) (3 1 3 1 3 1) (1 3 1 3 1 3) (3 1 3 1 3 1) (1 3 1 3 1 3) (3 1 3 1 3 1) (elems 6 sum 12 olaps 30))" "((1 3 1 3 2 2) (3 1 3 2 2 1) (1 3 2 2 1 3) (3 2 2 1 3 1) (2 2 1 3 1 3) (2 1 3 1 3 2) (elems 6 sum 12 olaps 30))" "((1 3 1 3 3 1) (3 1 3 3 1 1) (1 3 3 1 1 3) (3 3 1 1 3 1) (3 1 1 3 1 3) (1 1 3 1 3 3) (elems 6 sum 12 olaps 28))" "((1 3 1 4 1 2) (3 1 4 1 2 1) (1 4 1 2 1 3) (4 1 2 1 3 1) (1 2 1 3 1 4) (2 1 3 1 4 1) (elems 6 sum 12 olaps 28))" "((1 3 1 4 2 1) (3 1 4 2 1 1) (1 4 2 1 1 3) (4 2 1 1 3 1) (2 1 1 3 1 4) (1 1 3 1 4 2) (elems 6 sum 12 olaps 30))" "((1 3 1 5 1 1) (3 1 5 1 1 1) (1 5 1 1 1 3) (5 1 1 1 3 1) (1 1 1 3 1 5) (1 1 3 1 5 1) (elems 6 sum 12 olaps 30))" "((1 3 2 1 1 4) (3 2 1 1 4 1) (2 1 1 4 1 3) (1 1 4 1 3 2) (1 4 1 3 2 1) (4 1 3 2 1 1) (elems 6 sum 12 olaps 30))" "((1 3 2 1 2 3) (3 2 1 2 3 1) (2 1 2 3 1 3) (1 2 3 1 3 2) (2 3 1 3 2 1) (3 1 3 2 1 2) (elems 6 sum 12 olaps 30))" "((1 3 2 1 3 2) (3 2 1 3 2 1) (2 1 3 2 1 3) (1 3 2 1 3 2) (3 2 1 3 2 1) (2 1 3 2 1 3) (elems 6 sum 12 olaps 30))" "((1 3 2 1 4 1) (3 2 1 4 1 1) (2 1 4 1 1 3) (1 4 1 1 3 2) (4 1 1 3 2 1) (1 1 3 2 1 4) (elems 6 sum 12 olaps 30))" "((1 3 2 2 1 3) (3 2 2 1 3 1) (2 2 1 3 1 3) (2 1 3 1 3 2) (1 3 1 3 2 2) (3 1 3 2 2 1) (elems 6 sum 12 olaps 30))" "((1 3 2 2 2 2) (3 2 2 2 2 1) (2 2 2 2 1 3) (2 2 2 1 3 2) (2 2 1 3 2 2) (2 1 3 2 2 2) (elems 6 sum 12 olaps 28))" "((1 3 2 2 3 1) (3 2 2 3 1 1) (2 2 3 1 1 3) (2 3 1 1 3 2) (3 1 1 3 2 2) (1 1 3 2 2 3) (elems 6 sum 12 olaps 30))" "((1 3 2 3 1 2) (3 2 3 1 2 1) (2 3 1 2 1 3) (3 1 2 1 3 2) (1 2 1 3 2 3) (2 1 3 2 3 1) (elems 6 sum 12 olaps 30))" "((1 3 2 3 2 1) (3 2 3 2 1 1) (2 3 2 1 1 3) (3 2 1 1 3 2) (2 1 1 3 2 3) (1 1 3 2 3 2) (elems 6 sum 12 olaps 30))" "((1 3 2 4 1 1) (3 2 4 1 1 1) (2 4 1 1 1 3) (4 1 1 1 3 2) (1 1 1 3 2 4) (1 1 3 2 4 1) (elems 6 sum 12 olaps 30))" "((1 3 3 1 1 3) (3 3 1 1 3 1) (3 1 1 3 1 3) (1 1 3 1 3 3) (1 3 1 3 3 1) (3 1 3 3 1 1) (elems 6 sum 12 olaps 28))" "((1 3 3 1 2 2) (3 3 1 2 2 1) (3 1 2 2 1 3) (1 2 2 1 3 3) (2 2 1 3 3 1) (2 1 3 3 1 2) (elems 6 sum 12 olaps 30))" "((1 3 3 1 3 1) (3 3 1 3 1 1) (3 1 3 1 1 3) (1 3 1 1 3 3) (3 1 1 3 3 1) (1 1 3 3 1 3) (elems 6 sum 12 olaps 28))" "((1 3 3 2 1 2) (3 3 2 1 2 1) (3 2 1 2 1 3) (2 1 2 1 3 3) (1 2 1 3 3 2) (2 1 3 3 2 1) (elems 6 sum 12 olaps 30))" "((1 3 3 2 2 1) (3 3 2 2 1 1) (3 2 2 1 1 3) (2 2 1 1 3 3) (2 1 1 3 3 2) (1 1 3 3 2 2) (elems 6 sum 12 olaps 30))" "((1 3 3 3 1 1) (3 3 3 1 1 1) (3 3 1 1 1 3) (3 1 1 1 3 3) (1 1 1 3 3 3) (1 1 3 3 3 1) (elems 6 sum 12 olaps 30))" "((1 3 4 1 1 2) (3 4 1 1 2 1) (4 1 1 2 1 3) (1 1 2 1 3 4) (1 2 1 3 4 1) (2 1 3 4 1 1) (elems 6 sum 12 olaps 30))" "((1 3 4 1 2 1) (3 4 1 2 1 1) (4 1 2 1 1 3) (1 2 1 1 3 4) (2 1 1 3 4 1) (1 1 3 4 1 2) (elems 6 sum 12 olaps 30))" "((1 3 4 2 1 1) (3 4 2 1 1 1) (4 2 1 1 1 3) (2 1 1 1 3 4) (1 1 1 3 4 2) (1 1 3 4 2 1) (elems 6 sum 12 olaps 30))" "((1 3 5 1 1 1) (3 5 1 1 1 1) (5 1 1 1 1 3) (1 1 1 1 3 5) (1 1 1 3 5 1) (1 1 3 5 1 1) (elems 6 sum 12 olaps 30))" "((1 4 1 1 1 4) (4 1 1 1 4 1) (1 1 1 4 1 4) (1 1 4 1 4 1) (1 4 1 4 1 1) (4 1 4 1 1 1) (elems 6 sum 12 olaps 28))" "((1 4 1 1 2 3) (4 1 1 2 3 1) (1 1 2 3 1 4) (1 2 3 1 4 1) (2 3 1 4 1 1) (3 1 4 1 1 2) (elems 6 sum 12 olaps 30))" "((1 4 1 1 3 2) (4 1 1 3 2 1) (1 1 3 2 1 4) (1 3 2 1 4 1) (3 2 1 4 1 1) (2 1 4 1 1 3) (elems 6 sum 12 olaps 30))" "((1 4 1 1 4 1) (4 1 1 4 1 1) (1 1 4 1 1 4) (1 4 1 1 4 1) (4 1 1 4 1 1) (1 1 4 1 1 4) (elems 6 sum 12 olaps 30))" "((1 4 1 2 1 3) (4 1 2 1 3 1) (1 2 1 3 1 4) (2 1 3 1 4 1) (1 3 1 4 1 2) (3 1 4 1 2 1) (elems 6 sum 12 olaps 28))" "((1 4 1 2 2 2) (4 1 2 2 2 1) (1 2 2 2 1 4) (2 2 2 1 4 1) (2 2 1 4 1 2) (2 1 4 1 2 2) (elems 6 sum 12 olaps 30))" "((1 4 1 2 3 1) (4 1 2 3 1 1) (1 2 3 1 1 4) (2 3 1 1 4 1) (3 1 1 4 1 2) (1 1 4 1 2 3) (elems 6 sum 12 olaps 30))" "((1 4 1 3 1 2) (4 1 3 1 2 1) (1 3 1 2 1 4) (3 1 2 1 4 1) (1 2 1 4 1 3) (2 1 4 1 3 1) (elems 6 sum 12 olaps 28))" "((1 4 1 3 2 1) (4 1 3 2 1 1) (1 3 2 1 1 4) (3 2 1 1 4 1) (2 1 1 4 1 3) (1 1 4 1 3 2) (elems 6 sum 12 olaps 30))" "((1 4 1 4 1 1) (4 1 4 1 1 1) (1 4 1 1 1 4) (4 1 1 1 4 1) (1 1 1 4 1 4) (1 1 4 1 4 1) (elems 6 sum 12 olaps 28))" "((1 4 2 1 1 3) (4 2 1 1 3 1) (2 1 1 3 1 4) (1 1 3 1 4 2) (1 3 1 4 2 1) (3 1 4 2 1 1) (elems 6 sum 12 olaps 30))" "((1 4 2 1 2 2) (4 2 1 2 2 1) (2 1 2 2 1 4) (1 2 2 1 4 2) (2 2 1 4 2 1) (2 1 4 2 1 2) (elems 6 sum 12 olaps 30))" "((1 4 2 1 3 1) (4 2 1 3 1 1) (2 1 3 1 1 4) (1 3 1 1 4 2) (3 1 1 4 2 1) (1 1 4 2 1 3) (elems 6 sum 12 olaps 30))" "((1 4 2 2 1 2) (4 2 2 1 2 1) (2 2 1 2 1 4) (2 1 2 1 4 2) (1 2 1 4 2 2) (2 1 4 2 2 1) (elems 6 sum 12 olaps 30))" "((1 4 2 2 2 1) (4 2 2 2 1 1) (2 2 2 1 1 4) (2 2 1 1 4 2) (2 1 1 4 2 2) (1 1 4 2 2 2) (elems 6 sum 12 olaps 28))" "((1 4 2 3 1 1) (4 2 3 1 1 1) (2 3 1 1 1 4) (3 1 1 1 4 2) (1 1 1 4 2 3) (1 1 4 2 3 1) (elems 6 sum 12 olaps 30))" "((1 4 3 1 1 2) (4 3 1 1 2 1) (3 1 1 2 1 4) (1 1 2 1 4 3) (1 2 1 4 3 1) (2 1 4 3 1 1) (elems 6 sum 12 olaps 30))" "((1 4 3 1 2 1) (4 3 1 2 1 1) (3 1 2 1 1 4) (1 2 1 1 4 3) (2 1 1 4 3 1) (1 1 4 3 1 2) (elems 6 sum 12 olaps 30))" "((1 4 3 2 1 1) (4 3 2 1 1 1) (3 2 1 1 1 4) (2 1 1 1 4 3) (1 1 1 4 3 2) (1 1 4 3 2 1) (elems 6 sum 12 olaps 30))" "((1 4 4 1 1 1) (4 4 1 1 1 1) (4 1 1 1 1 4) (1 1 1 1 4 4) (1 1 1 4 4 1) (1 1 4 4 1 1) (elems 6 sum 12 olaps 30))" "((1 5 1 1 1 3) (5 1 1 1 3 1) (1 1 1 3 1 5) (1 1 3 1 5 1) (1 3 1 5 1 1) (3 1 5 1 1 1) (elems 6 sum 12 olaps 30))" "((1 5 1 1 2 2) (5 1 1 2 2 1) (1 1 2 2 1 5) (1 2 2 1 5 1) (2 2 1 5 1 1) (2 1 5 1 1 2) (elems 6 sum 12 olaps 30))" "((1 5 1 1 3 1) (5 1 1 3 1 1) (1 1 3 1 1 5) (1 3 1 1 5 1) (3 1 1 5 1 1) (1 1 5 1 1 3) (elems 6 sum 12 olaps 28))" "((1 5 1 2 1 2) (5 1 2 1 2 1) (1 2 1 2 1 5) (2 1 2 1 5 1) (1 2 1 5 1 2) (2 1 5 1 2 1) (elems 6 sum 12 olaps 30))" "((1 5 1 2 2 1) (5 1 2 2 1 1) (1 2 2 1 1 5) (2 2 1 1 5 1) (2 1 1 5 1 2) (1 1 5 1 2 2) (elems 6 sum 12 olaps 30))" "((1 5 1 3 1 1) (5 1 3 1 1 1) (1 3 1 1 1 5) (3 1 1 1 5 1) (1 1 1 5 1 3) (1 1 5 1 3 1) (elems 6 sum 12 olaps 30))" "((1 5 2 1 1 2) (5 2 1 1 2 1) (2 1 1 2 1 5) (1 1 2 1 5 2) (1 2 1 5 2 1) (2 1 5 2 1 1) (elems 6 sum 12 olaps 30))" "((1 5 2 1 2 1) (5 2 1 2 1 1) (2 1 2 1 1 5) (1 2 1 1 5 2) (2 1 1 5 2 1) (1 1 5 2 1 2) (elems 6 sum 12 olaps 30))" "((1 5 2 2 1 1) (5 2 2 1 1 1) (2 2 1 1 1 5) (2 1 1 1 5 2) (1 1 1 5 2 2) (1 1 5 2 2 1) (elems 6 sum 12 olaps 30))" "((1 5 3 1 1 1) (5 3 1 1 1 1) (3 1 1 1 1 5) (1 1 1 1 5 3) (1 1 1 5 3 1) (1 1 5 3 1 1) (elems 6 sum 12 olaps 30))" "((1 6 1 1 1 2) (6 1 1 1 2 1) (1 1 1 2 1 6) (1 1 2 1 6 1) (1 2 1 6 1 1) (2 1 6 1 1 1) (elems 6 sum 12 olaps 30))" "((1 6 1 1 2 1) (6 1 1 2 1 1) (1 1 2 1 1 6) (1 2 1 1 6 1) (2 1 1 6 1 1) (1 1 6 1 1 2) (elems 6 sum 12 olaps 30))" "((1 6 1 2 1 1) (6 1 2 1 1 1) (1 2 1 1 1 6) (2 1 1 1 6 1) (1 1 1 6 1 2) (1 1 6 1 2 1) (elems 6 sum 12 olaps 30))" "((1 6 2 1 1 1) (6 2 1 1 1 1) (2 1 1 1 1 6) (1 1 1 1 6 2) (1 1 1 6 2 1) (1 1 6 2 1 1) (elems 6 sum 12 olaps 28))" "((2 1 1 1 1 6) (1 1 1 1 6 2) (1 1 1 6 2 1) (1 1 6 2 1 1) (1 6 2 1 1 1) (6 2 1 1 1 1) (elems 6 sum 12 olaps 28))" "((2 1 1 1 2 5) (1 1 1 2 5 2) (1 1 2 5 2 1) (1 2 5 2 1 1) (2 5 2 1 1 1) (5 2 1 1 1 2) (elems 6 sum 12 olaps 30))" "((2 1 1 1 3 4) (1 1 1 3 4 2) (1 1 3 4 2 1) (1 3 4 2 1 1) (3 4 2 1 1 1) (4 2 1 1 1 3) (elems 6 sum 12 olaps 30))" "((2 1 1 1 4 3) (1 1 1 4 3 2) (1 1 4 3 2 1) (1 4 3 2 1 1) (4 3 2 1 1 1) (3 2 1 1 1 4) (elems 6 sum 12 olaps 30))" "((2 1 1 1 5 2) (1 1 1 5 2 2) (1 1 5 2 2 1) (1 5 2 2 1 1) (5 2 2 1 1 1) (2 2 1 1 1 5) (elems 6 sum 12 olaps 30))" "((2 1 1 1 6 1) (1 1 1 6 1 2) (1 1 6 1 2 1) (1 6 1 2 1 1) (6 1 2 1 1 1) (1 2 1 1 1 6) (elems 6 sum 12 olaps 30))" "((2 1 1 2 1 5) (1 1 2 1 5 2) (1 2 1 5 2 1) (2 1 5 2 1 1) (1 5 2 1 1 2) (5 2 1 1 2 1) (elems 6 sum 12 olaps 30))" "((2 1 1 2 2 4) (1 1 2 2 4 2) (1 2 2 4 2 1) (2 2 4 2 1 1) (2 4 2 1 1 2) (4 2 1 1 2 2) (elems 6 sum 12 olaps 28))" "((2 1 1 2 3 3) (1 1 2 3 3 2) (1 2 3 3 2 1) (2 3 3 2 1 1) (3 3 2 1 1 2) (3 2 1 1 2 3) (elems 6 sum 12 olaps 30))" "((2 1 1 2 4 2) (1 1 2 4 2 2) (1 2 4 2 2 1) (2 4 2 2 1 1) (4 2 2 1 1 2) (2 2 1 1 2 4) (elems 6 sum 12 olaps 28))" "((2 1 1 2 5 1) (1 1 2 5 1 2) (1 2 5 1 2 1) (2 5 1 2 1 1) (5 1 2 1 1 2) (1 2 1 1 2 5) (elems 6 sum 12 olaps 30))" "((2 1 1 3 1 4) (1 1 3 1 4 2) (1 3 1 4 2 1) (3 1 4 2 1 1) (1 4 2 1 1 3) (4 2 1 1 3 1) (elems 6 sum 12 olaps 30))" "((2 1 1 3 2 3) (1 1 3 2 3 2) (1 3 2 3 2 1) (3 2 3 2 1 1) (2 3 2 1 1 3) (3 2 1 1 3 2) (elems 6 sum 12 olaps 30))" "((2 1 1 3 3 2) (1 1 3 3 2 2) (1 3 3 2 2 1) (3 3 2 2 1 1) (3 2 2 1 1 3) (2 2 1 1 3 3) (elems 6 sum 12 olaps 30))" "((2 1 1 3 4 1) (1 1 3 4 1 2) (1 3 4 1 2 1) (3 4 1 2 1 1) (4 1 2 1 1 3) (1 2 1 1 3 4) (elems 6 sum 12 olaps 30))" "((2 1 1 4 1 3) (1 1 4 1 3 2) (1 4 1 3 2 1) (4 1 3 2 1 1) (1 3 2 1 1 4) (3 2 1 1 4 1) (elems 6 sum 12 olaps 30))" "((2 1 1 4 2 2) (1 1 4 2 2 2) (1 4 2 2 2 1) (4 2 2 2 1 1) (2 2 2 1 1 4) (2 2 1 1 4 2) (elems 6 sum 12 olaps 28))" "((2 1 1 4 3 1) (1 1 4 3 1 2) (1 4 3 1 2 1) (4 3 1 2 1 1) (3 1 2 1 1 4) (1 2 1 1 4 3) (elems 6 sum 12 olaps 30))" "((2 1 1 5 1 2) (1 1 5 1 2 2) (1 5 1 2 2 1) (5 1 2 2 1 1) (1 2 2 1 1 5) (2 2 1 1 5 1) (elems 6 sum 12 olaps 30))" "((2 1 1 5 2 1) (1 1 5 2 1 2) (1 5 2 1 2 1) (5 2 1 2 1 1) (2 1 2 1 1 5) (1 2 1 1 5 2) (elems 6 sum 12 olaps 30))" "((2 1 1 6 1 1) (1 1 6 1 1 2) (1 6 1 1 2 1) (6 1 1 2 1 1) (1 1 2 1 1 6) (1 2 1 1 6 1) (elems 6 sum 12 olaps 30))" "((2 1 2 1 1 5) (1 2 1 1 5 2) (2 1 1 5 2 1) (1 1 5 2 1 2) (1 5 2 1 2 1) (5 2 1 2 1 1) (elems 6 sum 12 olaps 30))" "((2 1 2 1 2 4) (1 2 1 2 4 2) (2 1 2 4 2 1) (1 2 4 2 1 2) (2 4 2 1 2 1) (4 2 1 2 1 2) (elems 6 sum 12 olaps 30))" "((2 1 2 1 3 3) (1 2 1 3 3 2) (2 1 3 3 2 1) (1 3 3 2 1 2) (3 3 2 1 2 1) (3 2 1 2 1 3) (elems 6 sum 12 olaps 30))" "((2 1 2 1 4 2) (1 2 1 4 2 2) (2 1 4 2 2 1) (1 4 2 2 1 2) (4 2 2 1 2 1) (2 2 1 2 1 4) (elems 6 sum 12 olaps 30))" "((2 1 2 1 5 1) (1 2 1 5 1 2) (2 1 5 1 2 1) (1 5 1 2 1 2) (5 1 2 1 2 1) (1 2 1 2 1 5) (elems 6 sum 12 olaps 30))" "((2 1 2 2 1 4) (1 2 2 1 4 2) (2 2 1 4 2 1) (2 1 4 2 1 2) (1 4 2 1 2 2) (4 2 1 2 2 1) (elems 6 sum 12 olaps 30))" "((2 1 2 2 2 3) (1 2 2 2 3 2) (2 2 2 3 2 1) (2 2 3 2 1 2) (2 3 2 1 2 2) (3 2 1 2 2 2) (elems 6 sum 12 olaps 28))" "((2 1 2 2 3 2) (1 2 2 3 2 2) (2 2 3 2 2 1) (2 3 2 2 1 2) (3 2 2 1 2 2) (2 2 1 2 2 3) (elems 6 sum 12 olaps 28))" "((2 1 2 2 4 1) (1 2 2 4 1 2) (2 2 4 1 2 1) (2 4 1 2 1 2) (4 1 2 1 2 2) (1 2 1 2 2 4) (elems 6 sum 12 olaps 30))" "((2 1 2 3 1 3) (1 2 3 1 3 2) (2 3 1 3 2 1) (3 1 3 2 1 2) (1 3 2 1 2 3) (3 2 1 2 3 1) (elems 6 sum 12 olaps 30))" "((2 1 2 3 2 2) (1 2 3 2 2 2) (2 3 2 2 2 1) (3 2 2 2 1 2) (2 2 2 1 2 3) (2 2 1 2 3 2) (elems 6 sum 12 olaps 28))" "((2 1 2 3 3 1) (1 2 3 3 1 2) (2 3 3 1 2 1) (3 3 1 2 1 2) (3 1 2 1 2 3) (1 2 1 2 3 3) (elems 6 sum 12 olaps 30))" "((2 1 2 4 1 2) (1 2 4 1 2 2) (2 4 1 2 2 1) (4 1 2 2 1 2) (1 2 2 1 2 4) (2 2 1 2 4 1) (elems 6 sum 12 olaps 30))" "((2 1 2 4 2 1) (1 2 4 2 1 2) (2 4 2 1 2 1) (4 2 1 2 1 2) (2 1 2 1 2 4) (1 2 1 2 4 2) (elems 6 sum 12 olaps 30))" "((2 1 2 5 1 1) (1 2 5 1 1 2) (2 5 1 1 2 1) (5 1 1 2 1 2) (1 1 2 1 2 5) (1 2 1 2 5 1) (elems 6 sum 12 olaps 30))" "((2 1 3 1 1 4) (1 3 1 1 4 2) (3 1 1 4 2 1) (1 1 4 2 1 3) (1 4 2 1 3 1) (4 2 1 3 1 1) (elems 6 sum 12 olaps 30))" "((2 1 3 1 2 3) (1 3 1 2 3 2) (3 1 2 3 2 1) (1 2 3 2 1 3) (2 3 2 1 3 1) (3 2 1 3 1 2) (elems 6 sum 12 olaps 30))" "((2 1 3 1 3 2) (1 3 1 3 2 2) (3 1 3 2 2 1) (1 3 2 2 1 3) (3 2 2 1 3 1) (2 2 1 3 1 3) (elems 6 sum 12 olaps 30))" "((2 1 3 1 4 1) (1 3 1 4 1 2) (3 1 4 1 2 1) (1 4 1 2 1 3) (4 1 2 1 3 1) (1 2 1 3 1 4) (elems 6 sum 12 olaps 28))" "((2 1 3 2 1 3) (1 3 2 1 3 2) (3 2 1 3 2 1) (2 1 3 2 1 3) (1 3 2 1 3 2) (3 2 1 3 2 1) (elems 6 sum 12 olaps 30))" "((2 1 3 2 2 2) (1 3 2 2 2 2) (3 2 2 2 2 1) (2 2 2 2 1 3) (2 2 2 1 3 2) (2 2 1 3 2 2) (elems 6 sum 12 olaps 28))" "((2 1 3 2 3 1) (1 3 2 3 1 2) (3 2 3 1 2 1) (2 3 1 2 1 3) (3 1 2 1 3 2) (1 2 1 3 2 3) (elems 6 sum 12 olaps 30))" "((2 1 3 3 1 2) (1 3 3 1 2 2) (3 3 1 2 2 1) (3 1 2 2 1 3) (1 2 2 1 3 3) (2 2 1 3 3 1) (elems 6 sum 12 olaps 30))" "((2 1 3 3 2 1) (1 3 3 2 1 2) (3 3 2 1 2 1) (3 2 1 2 1 3) (2 1 2 1 3 3) (1 2 1 3 3 2) (elems 6 sum 12 olaps 30))" "((2 1 3 4 1 1) (1 3 4 1 1 2) (3 4 1 1 2 1) (4 1 1 2 1 3) (1 1 2 1 3 4) (1 2 1 3 4 1) (elems 6 sum 12 olaps 30))" "((2 1 4 1 1 3) (1 4 1 1 3 2) (4 1 1 3 2 1) (1 1 3 2 1 4) (1 3 2 1 4 1) (3 2 1 4 1 1) (elems 6 sum 12 olaps 30))" "((2 1 4 1 2 2) (1 4 1 2 2 2) (4 1 2 2 2 1) (1 2 2 2 1 4) (2 2 2 1 4 1) (2 2 1 4 1 2) (elems 6 sum 12 olaps 30))" "((2 1 4 1 3 1) (1 4 1 3 1 2) (4 1 3 1 2 1) (1 3 1 2 1 4) (3 1 2 1 4 1) (1 2 1 4 1 3) (elems 6 sum 12 olaps 28))" "((2 1 4 2 1 2) (1 4 2 1 2 2) (4 2 1 2 2 1) (2 1 2 2 1 4) (1 2 2 1 4 2) (2 2 1 4 2 1) (elems 6 sum 12 olaps 30))" "((2 1 4 2 2 1) (1 4 2 2 1 2) (4 2 2 1 2 1) (2 2 1 2 1 4) (2 1 2 1 4 2) (1 2 1 4 2 2) (elems 6 sum 12 olaps 30))" "((2 1 4 3 1 1) (1 4 3 1 1 2) (4 3 1 1 2 1) (3 1 1 2 1 4) (1 1 2 1 4 3) (1 2 1 4 3 1) (elems 6 sum 12 olaps 30))" "((2 1 5 1 1 2) (1 5 1 1 2 2) (5 1 1 2 2 1) (1 1 2 2 1 5) (1 2 2 1 5 1) (2 2 1 5 1 1) (elems 6 sum 12 olaps 30))" "((2 1 5 1 2 1) (1 5 1 2 1 2) (5 1 2 1 2 1) (1 2 1 2 1 5) (2 1 2 1 5 1) (1 2 1 5 1 2) (elems 6 sum 12 olaps 30))" "((2 1 5 2 1 1) (1 5 2 1 1 2) (5 2 1 1 2 1) (2 1 1 2 1 5) (1 1 2 1 5 2) (1 2 1 5 2 1) (elems 6 sum 12 olaps 30))" "((2 1 6 1 1 1) (1 6 1 1 1 2) (6 1 1 1 2 1) (1 1 1 2 1 6) (1 1 2 1 6 1) (1 2 1 6 1 1) (elems 6 sum 12 olaps 30))" "((2 2 1 1 1 5) (2 1 1 1 5 2) (1 1 1 5 2 2) (1 1 5 2 2 1) (1 5 2 2 1 1) (5 2 2 1 1 1) (elems 6 sum 12 olaps 30))" "((2 2 1 1 2 4) (2 1 1 2 4 2) (1 1 2 4 2 2) (1 2 4 2 2 1) (2 4 2 2 1 1) (4 2 2 1 1 2) (elems 6 sum 12 olaps 28))" "((2 2 1 1 3 3) (2 1 1 3 3 2) (1 1 3 3 2 2) (1 3 3 2 2 1) (3 3 2 2 1 1) (3 2 2 1 1 3) (elems 6 sum 12 olaps 30))" "((2 2 1 1 4 2) (2 1 1 4 2 2) (1 1 4 2 2 2) (1 4 2 2 2 1) (4 2 2 2 1 1) (2 2 2 1 1 4) (elems 6 sum 12 olaps 28))" "((2 2 1 1 5 1) (2 1 1 5 1 2) (1 1 5 1 2 2) (1 5 1 2 2 1) (5 1 2 2 1 1) (1 2 2 1 1 5) (elems 6 sum 12 olaps 30))" "((2 2 1 2 1 4) (2 1 2 1 4 2) (1 2 1 4 2 2) (2 1 4 2 2 1) (1 4 2 2 1 2) (4 2 2 1 2 1) (elems 6 sum 12 olaps 30))" "((2 2 1 2 2 3) (2 1 2 2 3 2) (1 2 2 3 2 2) (2 2 3 2 2 1) (2 3 2 2 1 2) (3 2 2 1 2 2) (elems 6 sum 12 olaps 28))" "((2 2 1 2 3 2) (2 1 2 3 2 2) (1 2 3 2 2 2) (2 3 2 2 2 1) (3 2 2 2 1 2) (2 2 2 1 2 3) (elems 6 sum 12 olaps 28))" "((2 2 1 2 4 1) (2 1 2 4 1 2) (1 2 4 1 2 2) (2 4 1 2 2 1) (4 1 2 2 1 2) (1 2 2 1 2 4) (elems 6 sum 12 olaps 30))" "((2 2 1 3 1 3) (2 1 3 1 3 2) (1 3 1 3 2 2) (3 1 3 2 2 1) (1 3 2 2 1 3) (3 2 2 1 3 1) (elems 6 sum 12 olaps 30))" "((2 2 1 3 2 2) (2 1 3 2 2 2) (1 3 2 2 2 2) (3 2 2 2 2 1) (2 2 2 2 1 3) (2 2 2 1 3 2) (elems 6 sum 12 olaps 28))" "((2 2 1 3 3 1) (2 1 3 3 1 2) (1 3 3 1 2 2) (3 3 1 2 2 1) (3 1 2 2 1 3) (1 2 2 1 3 3) (elems 6 sum 12 olaps 30))" "((2 2 1 4 1 2) (2 1 4 1 2 2) (1 4 1 2 2 2) (4 1 2 2 2 1) (1 2 2 2 1 4) (2 2 2 1 4 1) (elems 6 sum 12 olaps 30))" "((2 2 1 4 2 1) (2 1 4 2 1 2) (1 4 2 1 2 2) (4 2 1 2 2 1) (2 1 2 2 1 4) (1 2 2 1 4 2) (elems 6 sum 12 olaps 30))" "((2 2 1 5 1 1) (2 1 5 1 1 2) (1 5 1 1 2 2) (5 1 1 2 2 1) (1 1 2 2 1 5) (1 2 2 1 5 1) (elems 6 sum 12 olaps 30))" "((2 2 2 1 1 4) (2 2 1 1 4 2) (2 1 1 4 2 2) (1 1 4 2 2 2) (1 4 2 2 2 1) (4 2 2 2 1 1) (elems 6 sum 12 olaps 28))" "((2 2 2 1 2 3) (2 2 1 2 3 2) (2 1 2 3 2 2) (1 2 3 2 2 2) (2 3 2 2 2 1) (3 2 2 2 1 2) (elems 6 sum 12 olaps 28))" "((2 2 2 1 3 2) (2 2 1 3 2 2) (2 1 3 2 2 2) (1 3 2 2 2 2) (3 2 2 2 2 1) (2 2 2 2 1 3) (elems 6 sum 12 olaps 28))" "((2 2 2 1 4 1) (2 2 1 4 1 2) (2 1 4 1 2 2) (1 4 1 2 2 2) (4 1 2 2 2 1) (1 2 2 2 1 4) (elems 6 sum 12 olaps 30))" "((2 2 2 2 1 3) (2 2 2 1 3 2) (2 2 1 3 2 2) (2 1 3 2 2 2) (1 3 2 2 2 2) (3 2 2 2 2 1) (elems 6 sum 12 olaps 28))" "((2 2 2 2 2 2) (2 2 2 2 2 2) (2 2 2 2 2 2) (2 2 2 2 2 2) (2 2 2 2 2 2) (2 2 2 2 2 2) (elems 6 sum 12 olaps 30))" "((2 2 2 2 3 1) (2 2 2 3 1 2) (2 2 3 1 2 2) (2 3 1 2 2 2) (3 1 2 2 2 2) (1 2 2 2 2 3) (elems 6 sum 12 olaps 28))" "((2 2 2 3 1 2) (2 2 3 1 2 2) (2 3 1 2 2 2) (3 1 2 2 2 2) (1 2 2 2 2 3) (2 2 2 2 3 1) (elems 6 sum 12 olaps 28))" "((2 2 2 3 2 1) (2 2 3 2 1 2) (2 3 2 1 2 2) (3 2 1 2 2 2) (2 1 2 2 2 3) (1 2 2 2 3 2) (elems 6 sum 12 olaps 28))" "((2 2 2 4 1 1) (2 2 4 1 1 2) (2 4 1 1 2 2) (4 1 1 2 2 2) (1 1 2 2 2 4) (1 2 2 2 4 1) (elems 6 sum 12 olaps 28))" "((2 2 3 1 1 3) (2 3 1 1 3 2) (3 1 1 3 2 2) (1 1 3 2 2 3) (1 3 2 2 3 1) (3 2 2 3 1 1) (elems 6 sum 12 olaps 30))" "((2 2 3 1 2 2) (2 3 1 2 2 2) (3 1 2 2 2 2) (1 2 2 2 2 3) (2 2 2 2 3 1) (2 2 2 3 1 2) (elems 6 sum 12 olaps 28))" "((2 2 3 1 3 1) (2 3 1 3 1 2) (3 1 3 1 2 2) (1 3 1 2 2 3) (3 1 2 2 3 1) (1 2 2 3 1 3) (elems 6 sum 12 olaps 30))" "((2 2 3 2 1 2) (2 3 2 1 2 2) (3 2 1 2 2 2) (2 1 2 2 2 3) (1 2 2 2 3 2) (2 2 2 3 2 1) (elems 6 sum 12 olaps 28))" "((2 2 3 2 2 1) (2 3 2 2 1 2) (3 2 2 1 2 2) (2 2 1 2 2 3) (2 1 2 2 3 2) (1 2 2 3 2 2) (elems 6 sum 12 olaps 28))" "((2 2 3 3 1 1) (2 3 3 1 1 2) (3 3 1 1 2 2) (3 1 1 2 2 3) (1 1 2 2 3 3) (1 2 2 3 3 1) (elems 6 sum 12 olaps 30))" "((2 2 4 1 1 2) (2 4 1 1 2 2) (4 1 1 2 2 2) (1 1 2 2 2 4) (1 2 2 2 4 1) (2 2 2 4 1 1) (elems 6 sum 12 olaps 28))" "((2 2 4 1 2 1) (2 4 1 2 1 2) (4 1 2 1 2 2) (1 2 1 2 2 4) (2 1 2 2 4 1) (1 2 2 4 1 2) (elems 6 sum 12 olaps 30))" "((2 2 4 2 1 1) (2 4 2 1 1 2) (4 2 1 1 2 2) (2 1 1 2 2 4) (1 1 2 2 4 2) (1 2 2 4 2 1) (elems 6 sum 12 olaps 28))" "((2 2 5 1 1 1) (2 5 1 1 1 2) (5 1 1 1 2 2) (1 1 1 2 2 5) (1 1 2 2 5 1) (1 2 2 5 1 1) (elems 6 sum 12 olaps 30))" "((2 3 1 1 1 4) (3 1 1 1 4 2) (1 1 1 4 2 3) (1 1 4 2 3 1) (1 4 2 3 1 1) (4 2 3 1 1 1) (elems 6 sum 12 olaps 30))" "((2 3 1 1 2 3) (3 1 1 2 3 2) (1 1 2 3 2 3) (1 2 3 2 3 1) (2 3 2 3 1 1) (3 2 3 1 1 2) (elems 6 sum 12 olaps 30))" "((2 3 1 1 3 2) (3 1 1 3 2 2) (1 1 3 2 2 3) (1 3 2 2 3 1) (3 2 2 3 1 1) (2 2 3 1 1 3) (elems 6 sum 12 olaps 30))" "((2 3 1 1 4 1) (3 1 1 4 1 2) (1 1 4 1 2 3) (1 4 1 2 3 1) (4 1 2 3 1 1) (1 2 3 1 1 4) (elems 6 sum 12 olaps 30))" "((2 3 1 2 1 3) (3 1 2 1 3 2) (1 2 1 3 2 3) (2 1 3 2 3 1) (1 3 2 3 1 2) (3 2 3 1 2 1) (elems 6 sum 12 olaps 30))" "((2 3 1 2 2 2) (3 1 2 2 2 2) (1 2 2 2 2 3) (2 2 2 2 3 1) (2 2 2 3 1 2) (2 2 3 1 2 2) (elems 6 sum 12 olaps 28))" "((2 3 1 2 3 1) (3 1 2 3 1 2) (1 2 3 1 2 3) (2 3 1 2 3 1) (3 1 2 3 1 2) (1 2 3 1 2 3) (elems 6 sum 12 olaps 30))" "((2 3 1 3 1 2) (3 1 3 1 2 2) (1 3 1 2 2 3) (3 1 2 2 3 1) (1 2 2 3 1 3) (2 2 3 1 3 1) (elems 6 sum 12 olaps 30))" "((2 3 1 3 2 1) (3 1 3 2 1 2) (1 3 2 1 2 3) (3 2 1 2 3 1) (2 1 2 3 1 3) (1 2 3 1 3 2) (elems 6 sum 12 olaps 30))" "((2 3 1 4 1 1) (3 1 4 1 1 2) (1 4 1 1 2 3) (4 1 1 2 3 1) (1 1 2 3 1 4) (1 2 3 1 4 1) (elems 6 sum 12 olaps 30))" "((2 3 2 1 1 3) (3 2 1 1 3 2) (2 1 1 3 2 3) (1 1 3 2 3 2) (1 3 2 3 2 1) (3 2 3 2 1 1) (elems 6 sum 12 olaps 30))" "((2 3 2 1 2 2) (3 2 1 2 2 2) (2 1 2 2 2 3) (1 2 2 2 3 2) (2 2 2 3 2 1) (2 2 3 2 1 2) (elems 6 sum 12 olaps 28))" "((2 3 2 1 3 1) (3 2 1 3 1 2) (2 1 3 1 2 3) (1 3 1 2 3 2) (3 1 2 3 2 1) (1 2 3 2 1 3) (elems 6 sum 12 olaps 30))" "((2 3 2 2 1 2) (3 2 2 1 2 2) (2 2 1 2 2 3) (2 1 2 2 3 2) (1 2 2 3 2 2) (2 2 3 2 2 1) (elems 6 sum 12 olaps 28))" "((2 3 2 2 2 1) (3 2 2 2 1 2) (2 2 2 1 2 3) (2 2 1 2 3 2) (2 1 2 3 2 2) (1 2 3 2 2 2) (elems 6 sum 12 olaps 28))" "((2 3 2 3 1 1) (3 2 3 1 1 2) (2 3 1 1 2 3) (3 1 1 2 3 2) (1 1 2 3 2 3) (1 2 3 2 3 1) (elems 6 sum 12 olaps 30))" "((2 3 3 1 1 2) (3 3 1 1 2 2) (3 1 1 2 2 3) (1 1 2 2 3 3) (1 2 2 3 3 1) (2 2 3 3 1 1) (elems 6 sum 12 olaps 30))" "((2 3 3 1 2 1) (3 3 1 2 1 2) (3 1 2 1 2 3) (1 2 1 2 3 3) (2 1 2 3 3 1) (1 2 3 3 1 2) (elems 6 sum 12 olaps 30))" "((2 3 3 2 1 1) (3 3 2 1 1 2) (3 2 1 1 2 3) (2 1 1 2 3 3) (1 1 2 3 3 2) (1 2 3 3 2 1) (elems 6 sum 12 olaps 30))" "((2 3 4 1 1 1) (3 4 1 1 1 2) (4 1 1 1 2 3) (1 1 1 2 3 4) (1 1 2 3 4 1) (1 2 3 4 1 1) (elems 6 sum 12 olaps 30))" "((2 4 1 1 1 3) (4 1 1 1 3 2) (1 1 1 3 2 4) (1 1 3 2 4 1) (1 3 2 4 1 1) (3 2 4 1 1 1) (elems 6 sum 12 olaps 30))" "((2 4 1 1 2 2) (4 1 1 2 2 2) (1 1 2 2 2 4) (1 2 2 2 4 1) (2 2 2 4 1 1) (2 2 4 1 1 2) (elems 6 sum 12 olaps 28))" "((2 4 1 1 3 1) (4 1 1 3 1 2) (1 1 3 1 2 4) (1 3 1 2 4 1) (3 1 2 4 1 1) (1 2 4 1 1 3) (elems 6 sum 12 olaps 30))" "((2 4 1 2 1 2) (4 1 2 1 2 2) (1 2 1 2 2 4) (2 1 2 2 4 1) (1 2 2 4 1 2) (2 2 4 1 2 1) (elems 6 sum 12 olaps 30))" "((2 4 1 2 2 1) (4 1 2 2 1 2) (1 2 2 1 2 4) (2 2 1 2 4 1) (2 1 2 4 1 2) (1 2 4 1 2 2) (elems 6 sum 12 olaps 30))" "((2 4 1 3 1 1) (4 1 3 1 1 2) (1 3 1 1 2 4) (3 1 1 2 4 1) (1 1 2 4 1 3) (1 2 4 1 3 1) (elems 6 sum 12 olaps 30))" "((2 4 2 1 1 2) (4 2 1 1 2 2) (2 1 1 2 2 4) (1 1 2 2 4 2) (1 2 2 4 2 1) (2 2 4 2 1 1) (elems 6 sum 12 olaps 28))" "((2 4 2 1 2 1) (4 2 1 2 1 2) (2 1 2 1 2 4) (1 2 1 2 4 2) (2 1 2 4 2 1) (1 2 4 2 1 2) (elems 6 sum 12 olaps 30))" "((2 4 2 2 1 1) (4 2 2 1 1 2) (2 2 1 1 2 4) (2 1 1 2 4 2) (1 1 2 4 2 2) (1 2 4 2 2 1) (elems 6 sum 12 olaps 28))" "((2 4 3 1 1 1) (4 3 1 1 1 2) (3 1 1 1 2 4) (1 1 1 2 4 3) (1 1 2 4 3 1) (1 2 4 3 1 1) (elems 6 sum 12 olaps 30))" "((2 5 1 1 1 2) (5 1 1 1 2 2) (1 1 1 2 2 5) (1 1 2 2 5 1) (1 2 2 5 1 1) (2 2 5 1 1 1) (elems 6 sum 12 olaps 30))" "((2 5 1 1 2 1) (5 1 1 2 1 2) (1 1 2 1 2 5) (1 2 1 2 5 1) (2 1 2 5 1 1) (1 2 5 1 1 2) (elems 6 sum 12 olaps 30))" "((2 5 1 2 1 1) (5 1 2 1 1 2) (1 2 1 1 2 5) (2 1 1 2 5 1) (1 1 2 5 1 2) (1 2 5 1 2 1) (elems 6 sum 12 olaps 30))" "((2 5 2 1 1 1) (5 2 1 1 1 2) (2 1 1 1 2 5) (1 1 1 2 5 2) (1 1 2 5 2 1) (1 2 5 2 1 1) (elems 6 sum 12 olaps 30))" "((2 6 1 1 1 1) (6 1 1 1 1 2) (1 1 1 1 2 6) (1 1 1 2 6 1) (1 1 2 6 1 1) (1 2 6 1 1 1) (elems 6 sum 12 olaps 28))" "((3 1 1 1 1 5) (1 1 1 1 5 3) (1 1 1 5 3 1) (1 1 5 3 1 1) (1 5 3 1 1 1) (5 3 1 1 1 1) (elems 6 sum 12 olaps 30))" "((3 1 1 1 2 4) (1 1 1 2 4 3) (1 1 2 4 3 1) (1 2 4 3 1 1) (2 4 3 1 1 1) (4 3 1 1 1 2) (elems 6 sum 12 olaps 30))" "((3 1 1 1 3 3) (1 1 1 3 3 3) (1 1 3 3 3 1) (1 3 3 3 1 1) (3 3 3 1 1 1) (3 3 1 1 1 3) (elems 6 sum 12 olaps 30))" "((3 1 1 1 4 2) (1 1 1 4 2 3) (1 1 4 2 3 1) (1 4 2 3 1 1) (4 2 3 1 1 1) (2 3 1 1 1 4) (elems 6 sum 12 olaps 30))" "((3 1 1 1 5 1) (1 1 1 5 1 3) (1 1 5 1 3 1) (1 5 1 3 1 1) (5 1 3 1 1 1) (1 3 1 1 1 5) (elems 6 sum 12 olaps 30))" "((3 1 1 2 1 4) (1 1 2 1 4 3) (1 2 1 4 3 1) (2 1 4 3 1 1) (1 4 3 1 1 2) (4 3 1 1 2 1) (elems 6 sum 12 olaps 30))" "((3 1 1 2 2 3) (1 1 2 2 3 3) (1 2 2 3 3 1) (2 2 3 3 1 1) (2 3 3 1 1 2) (3 3 1 1 2 2) (elems 6 sum 12 olaps 30))" "((3 1 1 2 3 2) (1 1 2 3 2 3) (1 2 3 2 3 1) (2 3 2 3 1 1) (3 2 3 1 1 2) (2 3 1 1 2 3) (elems 6 sum 12 olaps 30))" "((3 1 1 2 4 1) (1 1 2 4 1 3) (1 2 4 1 3 1) (2 4 1 3 1 1) (4 1 3 1 1 2) (1 3 1 1 2 4) (elems 6 sum 12 olaps 30))" "((3 1 1 3 1 3) (1 1 3 1 3 3) (1 3 1 3 3 1) (3 1 3 3 1 1) (1 3 3 1 1 3) (3 3 1 1 3 1) (elems 6 sum 12 olaps 28))" "((3 1 1 3 2 2) (1 1 3 2 2 3) (1 3 2 2 3 1) (3 2 2 3 1 1) (2 2 3 1 1 3) (2 3 1 1 3 2) (elems 6 sum 12 olaps 30))" "((3 1 1 3 3 1) (1 1 3 3 1 3) (1 3 3 1 3 1) (3 3 1 3 1 1) (3 1 3 1 1 3) (1 3 1 1 3 3) (elems 6 sum 12 olaps 28))" "((3 1 1 4 1 2) (1 1 4 1 2 3) (1 4 1 2 3 1) (4 1 2 3 1 1) (1 2 3 1 1 4) (2 3 1 1 4 1) (elems 6 sum 12 olaps 30))" "((3 1 1 4 2 1) (1 1 4 2 1 3) (1 4 2 1 3 1) (4 2 1 3 1 1) (2 1 3 1 1 4) (1 3 1 1 4 2) (elems 6 sum 12 olaps 30))" "((3 1 1 5 1 1) (1 1 5 1 1 3) (1 5 1 1 3 1) (5 1 1 3 1 1) (1 1 3 1 1 5) (1 3 1 1 5 1) (elems 6 sum 12 olaps 28))" "((3 1 2 1 1 4) (1 2 1 1 4 3) (2 1 1 4 3 1) (1 1 4 3 1 2) (1 4 3 1 2 1) (4 3 1 2 1 1) (elems 6 sum 12 olaps 30))" "((3 1 2 1 2 3) (1 2 1 2 3 3) (2 1 2 3 3 1) (1 2 3 3 1 2) (2 3 3 1 2 1) (3 3 1 2 1 2) (elems 6 sum 12 olaps 30))" "((3 1 2 1 3 2) (1 2 1 3 2 3) (2 1 3 2 3 1) (1 3 2 3 1 2) (3 2 3 1 2 1) (2 3 1 2 1 3) (elems 6 sum 12 olaps 30))" "((3 1 2 1 4 1) (1 2 1 4 1 3) (2 1 4 1 3 1) (1 4 1 3 1 2) (4 1 3 1 2 1) (1 3 1 2 1 4) (elems 6 sum 12 olaps 28))" "((3 1 2 2 1 3) (1 2 2 1 3 3) (2 2 1 3 3 1) (2 1 3 3 1 2) (1 3 3 1 2 2) (3 3 1 2 2 1) (elems 6 sum 12 olaps 30))" "((3 1 2 2 2 2) (1 2 2 2 2 3) (2 2 2 2 3 1) (2 2 2 3 1 2) (2 2 3 1 2 2) (2 3 1 2 2 2) (elems 6 sum 12 olaps 28))" "((3 1 2 2 3 1) (1 2 2 3 1 3) (2 2 3 1 3 1) (2 3 1 3 1 2) (3 1 3 1 2 2) (1 3 1 2 2 3) (elems 6 sum 12 olaps 30))" "((3 1 2 3 1 2) (1 2 3 1 2 3) (2 3 1 2 3 1) (3 1 2 3 1 2) (1 2 3 1 2 3) (2 3 1 2 3 1) (elems 6 sum 12 olaps 30))" "((3 1 2 3 2 1) (1 2 3 2 1 3) (2 3 2 1 3 1) (3 2 1 3 1 2) (2 1 3 1 2 3) (1 3 1 2 3 2) (elems 6 sum 12 olaps 30))" "((3 1 2 4 1 1) (1 2 4 1 1 3) (2 4 1 1 3 1) (4 1 1 3 1 2) (1 1 3 1 2 4) (1 3 1 2 4 1) (elems 6 sum 12 olaps 30))" "((3 1 3 1 1 3) (1 3 1 1 3 3) (3 1 1 3 3 1) (1 1 3 3 1 3) (1 3 3 1 3 1) (3 3 1 3 1 1) (elems 6 sum 12 olaps 28))" "((3 1 3 1 2 2) (1 3 1 2 2 3) (3 1 2 2 3 1) (1 2 2 3 1 3) (2 2 3 1 3 1) (2 3 1 3 1 2) (elems 6 sum 12 olaps 30))" "((3 1 3 1 3 1) (1 3 1 3 1 3) (3 1 3 1 3 1) (1 3 1 3 1 3) (3 1 3 1 3 1) (1 3 1 3 1 3) (elems 6 sum 12 olaps 30))" "((3 1 3 2 1 2) (1 3 2 1 2 3) (3 2 1 2 3 1) (2 1 2 3 1 3) (1 2 3 1 3 2) (2 3 1 3 2 1) (elems 6 sum 12 olaps 30))" "((3 1 3 2 2 1) (1 3 2 2 1 3) (3 2 2 1 3 1) (2 2 1 3 1 3) (2 1 3 1 3 2) (1 3 1 3 2 2) (elems 6 sum 12 olaps 30))" "((3 1 3 3 1 1) (1 3 3 1 1 3) (3 3 1 1 3 1) (3 1 1 3 1 3) (1 1 3 1 3 3) (1 3 1 3 3 1) (elems 6 sum 12 olaps 28))" "((3 1 4 1 1 2) (1 4 1 1 2 3) (4 1 1 2 3 1) (1 1 2 3 1 4) (1 2 3 1 4 1) (2 3 1 4 1 1) (elems 6 sum 12 olaps 30))" "((3 1 4 1 2 1) (1 4 1 2 1 3) (4 1 2 1 3 1) (1 2 1 3 1 4) (2 1 3 1 4 1) (1 3 1 4 1 2) (elems 6 sum 12 olaps 28))" "((3 1 4 2 1 1) (1 4 2 1 1 3) (4 2 1 1 3 1) (2 1 1 3 1 4) (1 1 3 1 4 2) (1 3 1 4 2 1) (elems 6 sum 12 olaps 30))" "((3 1 5 1 1 1) (1 5 1 1 1 3) (5 1 1 1 3 1) (1 1 1 3 1 5) (1 1 3 1 5 1) (1 3 1 5 1 1) (elems 6 sum 12 olaps 30))" "((3 2 1 1 1 4) (2 1 1 1 4 3) (1 1 1 4 3 2) (1 1 4 3 2 1) (1 4 3 2 1 1) (4 3 2 1 1 1) (elems 6 sum 12 olaps 30))" "((3 2 1 1 2 3) (2 1 1 2 3 3) (1 1 2 3 3 2) (1 2 3 3 2 1) (2 3 3 2 1 1) (3 3 2 1 1 2) (elems 6 sum 12 olaps 30))" "((3 2 1 1 3 2) (2 1 1 3 2 3) (1 1 3 2 3 2) (1 3 2 3 2 1) (3 2 3 2 1 1) (2 3 2 1 1 3) (elems 6 sum 12 olaps 30))" "((3 2 1 1 4 1) (2 1 1 4 1 3) (1 1 4 1 3 2) (1 4 1 3 2 1) (4 1 3 2 1 1) (1 3 2 1 1 4) (elems 6 sum 12 olaps 30))" "((3 2 1 2 1 3) (2 1 2 1 3 3) (1 2 1 3 3 2) (2 1 3 3 2 1) (1 3 3 2 1 2) (3 3 2 1 2 1) (elems 6 sum 12 olaps 30))" "((3 2 1 2 2 2) (2 1 2 2 2 3) (1 2 2 2 3 2) (2 2 2 3 2 1) (2 2 3 2 1 2) (2 3 2 1 2 2) (elems 6 sum 12 olaps 28))" "((3 2 1 2 3 1) (2 1 2 3 1 3) (1 2 3 1 3 2) (2 3 1 3 2 1) (3 1 3 2 1 2) (1 3 2 1 2 3) (elems 6 sum 12 olaps 30))" "((3 2 1 3 1 2) (2 1 3 1 2 3) (1 3 1 2 3 2) (3 1 2 3 2 1) (1 2 3 2 1 3) (2 3 2 1 3 1) (elems 6 sum 12 olaps 30))" "((3 2 1 3 2 1) (2 1 3 2 1 3) (1 3 2 1 3 2) (3 2 1 3 2 1) (2 1 3 2 1 3) (1 3 2 1 3 2) (elems 6 sum 12 olaps 30))" "((3 2 1 4 1 1) (2 1 4 1 1 3) (1 4 1 1 3 2) (4 1 1 3 2 1) (1 1 3 2 1 4) (1 3 2 1 4 1) (elems 6 sum 12 olaps 30))" "((3 2 2 1 1 3) (2 2 1 1 3 3) (2 1 1 3 3 2) (1 1 3 3 2 2) (1 3 3 2 2 1) (3 3 2 2 1 1) (elems 6 sum 12 olaps 30))" "((3 2 2 1 2 2) (2 2 1 2 2 3) (2 1 2 2 3 2) (1 2 2 3 2 2) (2 2 3 2 2 1) (2 3 2 2 1 2) (elems 6 sum 12 olaps 28))" "((3 2 2 1 3 1) (2 2 1 3 1 3) (2 1 3 1 3 2) (1 3 1 3 2 2) (3 1 3 2 2 1) (1 3 2 2 1 3) (elems 6 sum 12 olaps 30))" "((3 2 2 2 1 2) (2 2 2 1 2 3) (2 2 1 2 3 2) (2 1 2 3 2 2) (1 2 3 2 2 2) (2 3 2 2 2 1) (elems 6 sum 12 olaps 28))" "((3 2 2 2 2 1) (2 2 2 2 1 3) (2 2 2 1 3 2) (2 2 1 3 2 2) (2 1 3 2 2 2) (1 3 2 2 2 2) (elems 6 sum 12 olaps 28))" "((3 2 2 3 1 1) (2 2 3 1 1 3) (2 3 1 1 3 2) (3 1 1 3 2 2) (1 1 3 2 2 3) (1 3 2 2 3 1) (elems 6 sum 12 olaps 30))" "((3 2 3 1 1 2) (2 3 1 1 2 3) (3 1 1 2 3 2) (1 1 2 3 2 3) (1 2 3 2 3 1) (2 3 2 3 1 1) (elems 6 sum 12 olaps 30))" "((3 2 3 1 2 1) (2 3 1 2 1 3) (3 1 2 1 3 2) (1 2 1 3 2 3) (2 1 3 2 3 1) (1 3 2 3 1 2) (elems 6 sum 12 olaps 30))" "((3 2 3 2 1 1) (2 3 2 1 1 3) (3 2 1 1 3 2) (2 1 1 3 2 3) (1 1 3 2 3 2) (1 3 2 3 2 1) (elems 6 sum 12 olaps 30))" "((3 2 4 1 1 1) (2 4 1 1 1 3) (4 1 1 1 3 2) (1 1 1 3 2 4) (1 1 3 2 4 1) (1 3 2 4 1 1) (elems 6 sum 12 olaps 30))" "((3 3 1 1 1 3) (3 1 1 1 3 3) (1 1 1 3 3 3) (1 1 3 3 3 1) (1 3 3 3 1 1) (3 3 3 1 1 1) (elems 6 sum 12 olaps 30))" "((3 3 1 1 2 2) (3 1 1 2 2 3) (1 1 2 2 3 3) (1 2 2 3 3 1) (2 2 3 3 1 1) (2 3 3 1 1 2) (elems 6 sum 12 olaps 30))" "((3 3 1 1 3 1) (3 1 1 3 1 3) (1 1 3 1 3 3) (1 3 1 3 3 1) (3 1 3 3 1 1) (1 3 3 1 1 3) (elems 6 sum 12 olaps 28))" "((3 3 1 2 1 2) (3 1 2 1 2 3) (1 2 1 2 3 3) (2 1 2 3 3 1) (1 2 3 3 1 2) (2 3 3 1 2 1) (elems 6 sum 12 olaps 30))" "((3 3 1 2 2 1) (3 1 2 2 1 3) (1 2 2 1 3 3) (2 2 1 3 3 1) (2 1 3 3 1 2) (1 3 3 1 2 2) (elems 6 sum 12 olaps 30))" "((3 3 1 3 1 1) (3 1 3 1 1 3) (1 3 1 1 3 3) (3 1 1 3 3 1) (1 1 3 3 1 3) (1 3 3 1 3 1) (elems 6 sum 12 olaps 28))" "((3 3 2 1 1 2) (3 2 1 1 2 3) (2 1 1 2 3 3) (1 1 2 3 3 2) (1 2 3 3 2 1) (2 3 3 2 1 1) (elems 6 sum 12 olaps 30))" "((3 3 2 1 2 1) (3 2 1 2 1 3) (2 1 2 1 3 3) (1 2 1 3 3 2) (2 1 3 3 2 1) (1 3 3 2 1 2) (elems 6 sum 12 olaps 30))" "((3 3 2 2 1 1) (3 2 2 1 1 3) (2 2 1 1 3 3) (2 1 1 3 3 2) (1 1 3 3 2 2) (1 3 3 2 2 1) (elems 6 sum 12 olaps 30))" "((3 3 3 1 1 1) (3 3 1 1 1 3) (3 1 1 1 3 3) (1 1 1 3 3 3) (1 1 3 3 3 1) (1 3 3 3 1 1) (elems 6 sum 12 olaps 30))" "((3 4 1 1 1 2) (4 1 1 1 2 3) (1 1 1 2 3 4) (1 1 2 3 4 1) (1 2 3 4 1 1) (2 3 4 1 1 1) (elems 6 sum 12 olaps 30))" "((3 4 1 1 2 1) (4 1 1 2 1 3) (1 1 2 1 3 4) (1 2 1 3 4 1) (2 1 3 4 1 1) (1 3 4 1 1 2) (elems 6 sum 12 olaps 30))" "((3 4 1 2 1 1) (4 1 2 1 1 3) (1 2 1 1 3 4) (2 1 1 3 4 1) (1 1 3 4 1 2) (1 3 4 1 2 1) (elems 6 sum 12 olaps 30))" "((3 4 2 1 1 1) (4 2 1 1 1 3) (2 1 1 1 3 4) (1 1 1 3 4 2) (1 1 3 4 2 1) (1 3 4 2 1 1) (elems 6 sum 12 olaps 30))" "((3 5 1 1 1 1) (5 1 1 1 1 3) (1 1 1 1 3 5) (1 1 1 3 5 1) (1 1 3 5 1 1) (1 3 5 1 1 1) (elems 6 sum 12 olaps 30))" "((4 1 1 1 1 4) (1 1 1 1 4 4) (1 1 1 4 4 1) (1 1 4 4 1 1) (1 4 4 1 1 1) (4 4 1 1 1 1) (elems 6 sum 12 olaps 30))" "((4 1 1 1 2 3) (1 1 1 2 3 4) (1 1 2 3 4 1) (1 2 3 4 1 1) (2 3 4 1 1 1) (3 4 1 1 1 2) (elems 6 sum 12 olaps 30))" "((4 1 1 1 3 2) (1 1 1 3 2 4) (1 1 3 2 4 1) (1 3 2 4 1 1) (3 2 4 1 1 1) (2 4 1 1 1 3) (elems 6 sum 12 olaps 30))" "((4 1 1 1 4 1) (1 1 1 4 1 4) (1 1 4 1 4 1) (1 4 1 4 1 1) (4 1 4 1 1 1) (1 4 1 1 1 4) (elems 6 sum 12 olaps 28))" "((4 1 1 2 1 3) (1 1 2 1 3 4) (1 2 1 3 4 1) (2 1 3 4 1 1) (1 3 4 1 1 2) (3 4 1 1 2 1) (elems 6 sum 12 olaps 30))" "((4 1 1 2 2 2) (1 1 2 2 2 4) (1 2 2 2 4 1) (2 2 2 4 1 1) (2 2 4 1 1 2) (2 4 1 1 2 2) (elems 6 sum 12 olaps 28))" "((4 1 1 2 3 1) (1 1 2 3 1 4) (1 2 3 1 4 1) (2 3 1 4 1 1) (3 1 4 1 1 2) (1 4 1 1 2 3) (elems 6 sum 12 olaps 30))" "((4 1 1 3 1 2) (1 1 3 1 2 4) (1 3 1 2 4 1) (3 1 2 4 1 1) (1 2 4 1 1 3) (2 4 1 1 3 1) (elems 6 sum 12 olaps 30))" "((4 1 1 3 2 1) (1 1 3 2 1 4) (1 3 2 1 4 1) (3 2 1 4 1 1) (2 1 4 1 1 3) (1 4 1 1 3 2) (elems 6 sum 12 olaps 30))" "((4 1 1 4 1 1) (1 1 4 1 1 4) (1 4 1 1 4 1) (4 1 1 4 1 1) (1 1 4 1 1 4) (1 4 1 1 4 1) (elems 6 sum 12 olaps 30))" "((4 1 2 1 1 3) (1 2 1 1 3 4) (2 1 1 3 4 1) (1 1 3 4 1 2) (1 3 4 1 2 1) (3 4 1 2 1 1) (elems 6 sum 12 olaps 30))" "((4 1 2 1 2 2) (1 2 1 2 2 4) (2 1 2 2 4 1) (1 2 2 4 1 2) (2 2 4 1 2 1) (2 4 1 2 1 2) (elems 6 sum 12 olaps 30))" "((4 1 2 1 3 1) (1 2 1 3 1 4) (2 1 3 1 4 1) (1 3 1 4 1 2) (3 1 4 1 2 1) (1 4 1 2 1 3) (elems 6 sum 12 olaps 28))" "((4 1 2 2 1 2) (1 2 2 1 2 4) (2 2 1 2 4 1) (2 1 2 4 1 2) (1 2 4 1 2 2) (2 4 1 2 2 1) (elems 6 sum 12 olaps 30))" "((4 1 2 2 2 1) (1 2 2 2 1 4) (2 2 2 1 4 1) (2 2 1 4 1 2) (2 1 4 1 2 2) (1 4 1 2 2 2) (elems 6 sum 12 olaps 30))" "((4 1 2 3 1 1) (1 2 3 1 1 4) (2 3 1 1 4 1) (3 1 1 4 1 2) (1 1 4 1 2 3) (1 4 1 2 3 1) (elems 6 sum 12 olaps 30))" "((4 1 3 1 1 2) (1 3 1 1 2 4) (3 1 1 2 4 1) (1 1 2 4 1 3) (1 2 4 1 3 1) (2 4 1 3 1 1) (elems 6 sum 12 olaps 30))" "((4 1 3 1 2 1) (1 3 1 2 1 4) (3 1 2 1 4 1) (1 2 1 4 1 3) (2 1 4 1 3 1) (1 4 1 3 1 2) (elems 6 sum 12 olaps 28))" "((4 1 3 2 1 1) (1 3 2 1 1 4) (3 2 1 1 4 1) (2 1 1 4 1 3) (1 1 4 1 3 2) (1 4 1 3 2 1) (elems 6 sum 12 olaps 30))" "((4 1 4 1 1 1) (1 4 1 1 1 4) (4 1 1 1 4 1) (1 1 1 4 1 4) (1 1 4 1 4 1) (1 4 1 4 1 1) (elems 6 sum 12 olaps 28))" "((4 2 1 1 1 3) (2 1 1 1 3 4) (1 1 1 3 4 2) (1 1 3 4 2 1) (1 3 4 2 1 1) (3 4 2 1 1 1) (elems 6 sum 12 olaps 30))" "((4 2 1 1 2 2) (2 1 1 2 2 4) (1 1 2 2 4 2) (1 2 2 4 2 1) (2 2 4 2 1 1) (2 4 2 1 1 2) (elems 6 sum 12 olaps 28))" "((4 2 1 1 3 1) (2 1 1 3 1 4) (1 1 3 1 4 2) (1 3 1 4 2 1) (3 1 4 2 1 1) (1 4 2 1 1 3) (elems 6 sum 12 olaps 30))" "((4 2 1 2 1 2) (2 1 2 1 2 4) (1 2 1 2 4 2) (2 1 2 4 2 1) (1 2 4 2 1 2) (2 4 2 1 2 1) (elems 6 sum 12 olaps 30))" "((4 2 1 2 2 1) (2 1 2 2 1 4) (1 2 2 1 4 2) (2 2 1 4 2 1) (2 1 4 2 1 2) (1 4 2 1 2 2) (elems 6 sum 12 olaps 30))" "((4 2 1 3 1 1) (2 1 3 1 1 4) (1 3 1 1 4 2) (3 1 1 4 2 1) (1 1 4 2 1 3) (1 4 2 1 3 1) (elems 6 sum 12 olaps 30))" "((4 2 2 1 1 2) (2 2 1 1 2 4) (2 1 1 2 4 2) (1 1 2 4 2 2) (1 2 4 2 2 1) (2 4 2 2 1 1) (elems 6 sum 12 olaps 28))" "((4 2 2 1 2 1) (2 2 1 2 1 4) (2 1 2 1 4 2) (1 2 1 4 2 2) (2 1 4 2 2 1) (1 4 2 2 1 2) (elems 6 sum 12 olaps 30))" "((4 2 2 2 1 1) (2 2 2 1 1 4) (2 2 1 1 4 2) (2 1 1 4 2 2) (1 1 4 2 2 2) (1 4 2 2 2 1) (elems 6 sum 12 olaps 28))" "((4 2 3 1 1 1) (2 3 1 1 1 4) (3 1 1 1 4 2) (1 1 1 4 2 3) (1 1 4 2 3 1) (1 4 2 3 1 1) (elems 6 sum 12 olaps 30))" "((4 3 1 1 1 2) (3 1 1 1 2 4) (1 1 1 2 4 3) (1 1 2 4 3 1) (1 2 4 3 1 1) (2 4 3 1 1 1) (elems 6 sum 12 olaps 30))" "((4 3 1 1 2 1) (3 1 1 2 1 4) (1 1 2 1 4 3) (1 2 1 4 3 1) (2 1 4 3 1 1) (1 4 3 1 1 2) (elems 6 sum 12 olaps 30))" "((4 3 1 2 1 1) (3 1 2 1 1 4) (1 2 1 1 4 3) (2 1 1 4 3 1) (1 1 4 3 1 2) (1 4 3 1 2 1) (elems 6 sum 12 olaps 30))" "((4 3 2 1 1 1) (3 2 1 1 1 4) (2 1 1 1 4 3) (1 1 1 4 3 2) (1 1 4 3 2 1) (1 4 3 2 1 1) (elems 6 sum 12 olaps 30))" "((4 4 1 1 1 1) (4 1 1 1 1 4) (1 1 1 1 4 4) (1 1 1 4 4 1) (1 1 4 4 1 1) (1 4 4 1 1 1) (elems 6 sum 12 olaps 30))" "((5 1 1 1 1 3) (1 1 1 1 3 5) (1 1 1 3 5 1) (1 1 3 5 1 1) (1 3 5 1 1 1) (3 5 1 1 1 1) (elems 6 sum 12 olaps 30))" "((5 1 1 1 2 2) (1 1 1 2 2 5) (1 1 2 2 5 1) (1 2 2 5 1 1) (2 2 5 1 1 1) (2 5 1 1 1 2) (elems 6 sum 12 olaps 30))" "((5 1 1 1 3 1) (1 1 1 3 1 5) (1 1 3 1 5 1) (1 3 1 5 1 1) (3 1 5 1 1 1) (1 5 1 1 1 3) (elems 6 sum 12 olaps 30))" "((5 1 1 2 1 2) (1 1 2 1 2 5) (1 2 1 2 5 1) (2 1 2 5 1 1) (1 2 5 1 1 2) (2 5 1 1 2 1) (elems 6 sum 12 olaps 30))" "((5 1 1 2 2 1) (1 1 2 2 1 5) (1 2 2 1 5 1) (2 2 1 5 1 1) (2 1 5 1 1 2) (1 5 1 1 2 2) (elems 6 sum 12 olaps 30))" "((5 1 1 3 1 1) (1 1 3 1 1 5) (1 3 1 1 5 1) (3 1 1 5 1 1) (1 1 5 1 1 3) (1 5 1 1 3 1) (elems 6 sum 12 olaps 28))" "((5 1 2 1 1 2) (1 2 1 1 2 5) (2 1 1 2 5 1) (1 1 2 5 1 2) (1 2 5 1 2 1) (2 5 1 2 1 1) (elems 6 sum 12 olaps 30))" "((5 1 2 1 2 1) (1 2 1 2 1 5) (2 1 2 1 5 1) (1 2 1 5 1 2) (2 1 5 1 2 1) (1 5 1 2 1 2) (elems 6 sum 12 olaps 30))" "((5 1 2 2 1 1) (1 2 2 1 1 5) (2 2 1 1 5 1) (2 1 1 5 1 2) (1 1 5 1 2 2) (1 5 1 2 2 1) (elems 6 sum 12 olaps 30))" "((5 1 3 1 1 1) (1 3 1 1 1 5) (3 1 1 1 5 1) (1 1 1 5 1 3) (1 1 5 1 3 1) (1 5 1 3 1 1) (elems 6 sum 12 olaps 30))" "((5 2 1 1 1 2) (2 1 1 1 2 5) (1 1 1 2 5 2) (1 1 2 5 2 1) (1 2 5 2 1 1) (2 5 2 1 1 1) (elems 6 sum 12 olaps 30))" "((5 2 1 1 2 1) (2 1 1 2 1 5) (1 1 2 1 5 2) (1 2 1 5 2 1) (2 1 5 2 1 1) (1 5 2 1 1 2) (elems 6 sum 12 olaps 30))" "((5 2 1 2 1 1) (2 1 2 1 1 5) (1 2 1 1 5 2) (2 1 1 5 2 1) (1 1 5 2 1 2) (1 5 2 1 2 1) (elems 6 sum 12 olaps 30))" "((5 2 2 1 1 1) (2 2 1 1 1 5) (2 1 1 1 5 2) (1 1 1 5 2 2) (1 1 5 2 2 1) (1 5 2 2 1 1) (elems 6 sum 12 olaps 30))" "((5 3 1 1 1 1) (3 1 1 1 1 5) (1 1 1 1 5 3) (1 1 1 5 3 1) (1 1 5 3 1 1) (1 5 3 1 1 1) (elems 6 sum 12 olaps 30))" "((6 1 1 1 1 2) (1 1 1 1 2 6) (1 1 1 2 6 1) (1 1 2 6 1 1) (1 2 6 1 1 1) (2 6 1 1 1 1) (elems 6 sum 12 olaps 28))" "((6 1 1 1 2 1) (1 1 1 2 1 6) (1 1 2 1 6 1) (1 2 1 6 1 1) (2 1 6 1 1 1) (1 6 1 1 1 2) (elems 6 sum 12 olaps 30))" "((6 1 1 2 1 1) (1 1 2 1 1 6) (1 2 1 1 6 1) (2 1 1 6 1 1) (1 1 6 1 1 2) (1 6 1 1 2 1) (elems 6 sum 12 olaps 30))" "((6 1 2 1 1 1) (1 2 1 1 1 6) (2 1 1 1 6 1) (1 1 1 6 1 2) (1 1 6 1 2 1) (1 6 1 2 1 1) (elems 6 sum 12 olaps 30))" "((6 2 1 1 1 1) (2 1 1 1 1 6) (1 1 1 1 6 2) (1 1 1 6 2 1) (1 1 6 2 1 1) (1 6 2 1 1 1) (elems 6 sum 12 olaps 28))" "((1 1 1 1 1 1 2) (1 1 1 1 1 2 1) (1 1 1 1 2 1 1) (1 1 1 2 1 1 1) (1 1 2 1 1 1 1) (1 2 1 1 1 1 1) (2 1 1 1 1 1 1) (elems 7 sum 8 olaps 42))" "((1 1 1 1 1 2 1) (1 1 1 1 2 1 1) (1 1 1 2 1 1 1) (1 1 2 1 1 1 1) (1 2 1 1 1 1 1) (2 1 1 1 1 1 1) (1 1 1 1 1 1 2) (elems 7 sum 8 olaps 42))" "((1 1 1 1 2 1 1) (1 1 1 2 1 1 1) (1 1 2 1 1 1 1) (1 2 1 1 1 1 1) (2 1 1 1 1 1 1) (1 1 1 1 1 1 2) (1 1 1 1 1 2 1) (elems 7 sum 8 olaps 42))" "((1 1 1 2 1 1 1) (1 1 2 1 1 1 1) (1 2 1 1 1 1 1) (2 1 1 1 1 1 1) (1 1 1 1 1 1 2) (1 1 1 1 1 2 1) (1 1 1 1 2 1 1) (elems 7 sum 8 olaps 42))" "((1 1 2 1 1 1 1) (1 2 1 1 1 1 1) (2 1 1 1 1 1 1) (1 1 1 1 1 1 2) (1 1 1 1 1 2 1) (1 1 1 1 2 1 1) (1 1 1 2 1 1 1) (elems 7 sum 8 olaps 42))" "((1 2 1 1 1 1 1) (2 1 1 1 1 1 1) (1 1 1 1 1 1 2) (1 1 1 1 1 2 1) (1 1 1 1 2 1 1) (1 1 1 2 1 1 1) (1 1 2 1 1 1 1) (elems 7 sum 8 olaps 42))" "((2 1 1 1 1 1 1) (1 1 1 1 1 1 2) (1 1 1 1 1 2 1) (1 1 1 1 2 1 1) (1 1 1 2 1 1 1) (1 1 2 1 1 1 1) (1 2 1 1 1 1 1) (elems 7 sum 8 olaps 42))" "((1 1 1 1 1 1 4) (1 1 1 1 1 4 1) (1 1 1 1 4 1 1) (1 1 1 4 1 1 1) (1 1 4 1 1 1 1) (1 4 1 1 1 1 1) (4 1 1 1 1 1 1) (elems 7 sum 10 olaps 42))" "((1 1 1 1 1 2 3) (1 1 1 1 2 3 1) (1 1 1 2 3 1 1) (1 1 2 3 1 1 1) (1 2 3 1 1 1 1) (2 3 1 1 1 1 1) (3 1 1 1 1 1 2) (elems 7 sum 10 olaps 42))" "((1 1 1 1 1 3 2) (1 1 1 1 3 2 1) (1 1 1 3 2 1 1) (1 1 3 2 1 1 1) (1 3 2 1 1 1 1) (3 2 1 1 1 1 1) (2 1 1 1 1 1 3) (elems 7 sum 10 olaps 42))" "((1 1 1 1 1 4 1) (1 1 1 1 4 1 1) (1 1 1 4 1 1 1) (1 1 4 1 1 1 1) (1 4 1 1 1 1 1) (4 1 1 1 1 1 1) (1 1 1 1 1 1 4) (elems 7 sum 10 olaps 42))" "((1 1 1 1 2 1 3) (1 1 1 2 1 3 1) (1 1 2 1 3 1 1) (1 2 1 3 1 1 1) (2 1 3 1 1 1 1) (1 3 1 1 1 1 2) (3 1 1 1 1 2 1) (elems 7 sum 10 olaps 42))" "((1 1 1 1 2 2 2) (1 1 1 2 2 2 1) (1 1 2 2 2 1 1) (1 2 2 2 1 1 1) (2 2 2 1 1 1 1) (2 2 1 1 1 1 2) (2 1 1 1 1 2 2) (elems 7 sum 10 olaps 42))" "((1 1 1 1 2 3 1) (1 1 1 2 3 1 1) (1 1 2 3 1 1 1) (1 2 3 1 1 1 1) (2 3 1 1 1 1 1) (3 1 1 1 1 1 2) (1 1 1 1 1 2 3) (elems 7 sum 10 olaps 42))" "((1 1 1 1 3 1 2) (1 1 1 3 1 2 1) (1 1 3 1 2 1 1) (1 3 1 2 1 1 1) (3 1 2 1 1 1 1) (1 2 1 1 1 1 3) (2 1 1 1 1 3 1) (elems 7 sum 10 olaps 42))" "((1 1 1 1 3 2 1) (1 1 1 3 2 1 1) (1 1 3 2 1 1 1) (1 3 2 1 1 1 1) (3 2 1 1 1 1 1) (2 1 1 1 1 1 3) (1 1 1 1 1 3 2) (elems 7 sum 10 olaps 42))" "((1 1 1 1 4 1 1) (1 1 1 4 1 1 1) (1 1 4 1 1 1 1) (1 4 1 1 1 1 1) (4 1 1 1 1 1 1) (1 1 1 1 1 1 4) (1 1 1 1 1 4 1) (elems 7 sum 10 olaps 42))" "((1 1 1 2 1 1 3) (1 1 2 1 1 3 1) (1 2 1 1 3 1 1) (2 1 1 3 1 1 1) (1 1 3 1 1 1 2) (1 3 1 1 1 2 1) (3 1 1 1 2 1 1) (elems 7 sum 10 olaps 42))" "((1 1 1 2 1 2 2) (1 1 2 1 2 2 1) (1 2 1 2 2 1 1) (2 1 2 2 1 1 1) (1 2 2 1 1 1 2) (2 2 1 1 1 2 1) (2 1 1 1 2 1 2) (elems 7 sum 10 olaps 42))" "((1 1 1 2 1 3 1) (1 1 2 1 3 1 1) (1 2 1 3 1 1 1) (2 1 3 1 1 1 1) (1 3 1 1 1 1 2) (3 1 1 1 1 2 1) (1 1 1 1 2 1 3) (elems 7 sum 10 olaps 42))" "((1 1 1 2 2 1 2) (1 1 2 2 1 2 1) (1 2 2 1 2 1 1) (2 2 1 2 1 1 1) (2 1 2 1 1 1 2) (1 2 1 1 1 2 2) (2 1 1 1 2 2 1) (elems 7 sum 10 olaps 42))" "((1 1 1 2 2 2 1) (1 1 2 2 2 1 1) (1 2 2 2 1 1 1) (2 2 2 1 1 1 1) (2 2 1 1 1 1 2) (2 1 1 1 1 2 2) (1 1 1 1 2 2 2) (elems 7 sum 10 olaps 42))" "((1 1 1 2 3 1 1) (1 1 2 3 1 1 1) (1 2 3 1 1 1 1) (2 3 1 1 1 1 1) (3 1 1 1 1 1 2) (1 1 1 1 1 2 3) (1 1 1 1 2 3 1) (elems 7 sum 10 olaps 42))" "((1 1 1 3 1 1 2) (1 1 3 1 1 2 1) (1 3 1 1 2 1 1) (3 1 1 2 1 1 1) (1 1 2 1 1 1 3) (1 2 1 1 1 3 1) (2 1 1 1 3 1 1) (elems 7 sum 10 olaps 42))" "((1 1 1 3 1 2 1) (1 1 3 1 2 1 1) (1 3 1 2 1 1 1) (3 1 2 1 1 1 1) (1 2 1 1 1 1 3) (2 1 1 1 1 3 1) (1 1 1 1 3 1 2) (elems 7 sum 10 olaps 42))" "((1 1 1 3 2 1 1) (1 1 3 2 1 1 1) (1 3 2 1 1 1 1) (3 2 1 1 1 1 1) (2 1 1 1 1 1 3) (1 1 1 1 1 3 2) (1 1 1 1 3 2 1) (elems 7 sum 10 olaps 42))" "((1 1 1 4 1 1 1) (1 1 4 1 1 1 1) (1 4 1 1 1 1 1) (4 1 1 1 1 1 1) (1 1 1 1 1 1 4) (1 1 1 1 1 4 1) (1 1 1 1 4 1 1) (elems 7 sum 10 olaps 42))" "((1 1 2 1 1 1 3) (1 2 1 1 1 3 1) (2 1 1 1 3 1 1) (1 1 1 3 1 1 2) (1 1 3 1 1 2 1) (1 3 1 1 2 1 1) (3 1 1 2 1 1 1) (elems 7 sum 10 olaps 42))" "((1 1 2 1 1 2 2) (1 2 1 1 2 2 1) (2 1 1 2 2 1 1) (1 1 2 2 1 1 2) (1 2 2 1 1 2 1) (2 2 1 1 2 1 1) (2 1 1 2 1 1 2) (elems 7 sum 10 olaps 42))" "((1 1 2 1 1 3 1) (1 2 1 1 3 1 1) (2 1 1 3 1 1 1) (1 1 3 1 1 1 2) (1 3 1 1 1 2 1) (3 1 1 1 2 1 1) (1 1 1 2 1 1 3) (elems 7 sum 10 olaps 42))" "((1 1 2 1 2 1 2) (1 2 1 2 1 2 1) (2 1 2 1 2 1 1) (1 2 1 2 1 1 2) (2 1 2 1 1 2 1) (1 2 1 1 2 1 2) (2 1 1 2 1 2 1) (elems 7 sum 10 olaps 42))" "((1 1 2 1 2 2 1) (1 2 1 2 2 1 1) (2 1 2 2 1 1 1) (1 2 2 1 1 1 2) (2 2 1 1 1 2 1) (2 1 1 1 2 1 2) (1 1 1 2 1 2 2) (elems 7 sum 10 olaps 42))" "((1 1 2 1 3 1 1) (1 2 1 3 1 1 1) (2 1 3 1 1 1 1) (1 3 1 1 1 1 2) (3 1 1 1 1 2 1) (1 1 1 1 2 1 3) (1 1 1 2 1 3 1) (elems 7 sum 10 olaps 42))" "((1 1 2 2 1 1 2) (1 2 2 1 1 2 1) (2 2 1 1 2 1 1) (2 1 1 2 1 1 2) (1 1 2 1 1 2 2) (1 2 1 1 2 2 1) (2 1 1 2 2 1 1) (elems 7 sum 10 olaps 42))" "((1 1 2 2 1 2 1) (1 2 2 1 2 1 1) (2 2 1 2 1 1 1) (2 1 2 1 1 1 2) (1 2 1 1 1 2 2) (2 1 1 1 2 2 1) (1 1 1 2 2 1 2) (elems 7 sum 10 olaps 42))" "((1 1 2 2 2 1 1) (1 2 2 2 1 1 1) (2 2 2 1 1 1 1) (2 2 1 1 1 1 2) (2 1 1 1 1 2 2) (1 1 1 1 2 2 2) (1 1 1 2 2 2 1) (elems 7 sum 10 olaps 42))" "((1 1 2 3 1 1 1) (1 2 3 1 1 1 1) (2 3 1 1 1 1 1) (3 1 1 1 1 1 2) (1 1 1 1 1 2 3) (1 1 1 1 2 3 1) (1 1 1 2 3 1 1) (elems 7 sum 10 olaps 42))" "((1 1 3 1 1 1 2) (1 3 1 1 1 2 1) (3 1 1 1 2 1 1) (1 1 1 2 1 1 3) (1 1 2 1 1 3 1) (1 2 1 1 3 1 1) (2 1 1 3 1 1 1) (elems 7 sum 10 olaps 42))" "((1 1 3 1 1 2 1) (1 3 1 1 2 1 1) (3 1 1 2 1 1 1) (1 1 2 1 1 1 3) (1 2 1 1 1 3 1) (2 1 1 1 3 1 1) (1 1 1 3 1 1 2) (elems 7 sum 10 olaps 42))" "((1 1 3 1 2 1 1) (1 3 1 2 1 1 1) (3 1 2 1 1 1 1) (1 2 1 1 1 1 3) (2 1 1 1 1 3 1) (1 1 1 1 3 1 2) (1 1 1 3 1 2 1) (elems 7 sum 10 olaps 42))" "((1 1 3 2 1 1 1) (1 3 2 1 1 1 1) (3 2 1 1 1 1 1) (2 1 1 1 1 1 3) (1 1 1 1 1 3 2) (1 1 1 1 3 2 1) (1 1 1 3 2 1 1) (elems 7 sum 10 olaps 42))" "((1 1 4 1 1 1 1) (1 4 1 1 1 1 1) (4 1 1 1 1 1 1) (1 1 1 1 1 1 4) (1 1 1 1 1 4 1) (1 1 1 1 4 1 1) (1 1 1 4 1 1 1) (elems 7 sum 10 olaps 42))" "((1 2 1 1 1 1 3) (2 1 1 1 1 3 1) (1 1 1 1 3 1 2) (1 1 1 3 1 2 1) (1 1 3 1 2 1 1) (1 3 1 2 1 1 1) (3 1 2 1 1 1 1) (elems 7 sum 10 olaps 42))" "((1 2 1 1 1 2 2) (2 1 1 1 2 2 1) (1 1 1 2 2 1 2) (1 1 2 2 1 2 1) (1 2 2 1 2 1 1) (2 2 1 2 1 1 1) (2 1 2 1 1 1 2) (elems 7 sum 10 olaps 42))" "((1 2 1 1 1 3 1) (2 1 1 1 3 1 1) (1 1 1 3 1 1 2) (1 1 3 1 1 2 1) (1 3 1 1 2 1 1) (3 1 1 2 1 1 1) (1 1 2 1 1 1 3) (elems 7 sum 10 olaps 42))" "((1 2 1 1 2 1 2) (2 1 1 2 1 2 1) (1 1 2 1 2 1 2) (1 2 1 2 1 2 1) (2 1 2 1 2 1 1) (1 2 1 2 1 1 2) (2 1 2 1 1 2 1) (elems 7 sum 10 olaps 42))" "((1 2 1 1 2 2 1) (2 1 1 2 2 1 1) (1 1 2 2 1 1 2) (1 2 2 1 1 2 1) (2 2 1 1 2 1 1) (2 1 1 2 1 1 2) (1 1 2 1 1 2 2) (elems 7 sum 10 olaps 42))" "((1 2 1 1 3 1 1) (2 1 1 3 1 1 1) (1 1 3 1 1 1 2) (1 3 1 1 1 2 1) (3 1 1 1 2 1 1) (1 1 1 2 1 1 3) (1 1 2 1 1 3 1) (elems 7 sum 10 olaps 42))" "((1 2 1 2 1 1 2) (2 1 2 1 1 2 1) (1 2 1 1 2 1 2) (2 1 1 2 1 2 1) (1 1 2 1 2 1 2) (1 2 1 2 1 2 1) (2 1 2 1 2 1 1) (elems 7 sum 10 olaps 42))" "((1 2 1 2 1 2 1) (2 1 2 1 2 1 1) (1 2 1 2 1 1 2) (2 1 2 1 1 2 1) (1 2 1 1 2 1 2) (2 1 1 2 1 2 1) (1 1 2 1 2 1 2) (elems 7 sum 10 olaps 42))" "((1 2 1 2 2 1 1) (2 1 2 2 1 1 1) (1 2 2 1 1 1 2) (2 2 1 1 1 2 1) (2 1 1 1 2 1 2) (1 1 1 2 1 2 2) (1 1 2 1 2 2 1) (elems 7 sum 10 olaps 42))" "((1 2 1 3 1 1 1) (2 1 3 1 1 1 1) (1 3 1 1 1 1 2) (3 1 1 1 1 2 1) (1 1 1 1 2 1 3) (1 1 1 2 1 3 1) (1 1 2 1 3 1 1) (elems 7 sum 10 olaps 42))" "((1 2 2 1 1 1 2) (2 2 1 1 1 2 1) (2 1 1 1 2 1 2) (1 1 1 2 1 2 2) (1 1 2 1 2 2 1) (1 2 1 2 2 1 1) (2 1 2 2 1 1 1) (elems 7 sum 10 olaps 42))" "((1 2 2 1 1 2 1) (2 2 1 1 2 1 1) (2 1 1 2 1 1 2) (1 1 2 1 1 2 2) (1 2 1 1 2 2 1) (2 1 1 2 2 1 1) (1 1 2 2 1 1 2) (elems 7 sum 10 olaps 42))" "((1 2 2 1 2 1 1) (2 2 1 2 1 1 1) (2 1 2 1 1 1 2) (1 2 1 1 1 2 2) (2 1 1 1 2 2 1) (1 1 1 2 2 1 2) (1 1 2 2 1 2 1) (elems 7 sum 10 olaps 42))" "((1 2 2 2 1 1 1) (2 2 2 1 1 1 1) (2 2 1 1 1 1 2) (2 1 1 1 1 2 2) (1 1 1 1 2 2 2) (1 1 1 2 2 2 1) (1 1 2 2 2 1 1) (elems 7 sum 10 olaps 42))" "((1 2 3 1 1 1 1) (2 3 1 1 1 1 1) (3 1 1 1 1 1 2) (1 1 1 1 1 2 3) (1 1 1 1 2 3 1) (1 1 1 2 3 1 1) (1 1 2 3 1 1 1) (elems 7 sum 10 olaps 42))" "((1 3 1 1 1 1 2) (3 1 1 1 1 2 1) (1 1 1 1 2 1 3) (1 1 1 2 1 3 1) (1 1 2 1 3 1 1) (1 2 1 3 1 1 1) (2 1 3 1 1 1 1) (elems 7 sum 10 olaps 42))" "((1 3 1 1 1 2 1) (3 1 1 1 2 1 1) (1 1 1 2 1 1 3) (1 1 2 1 1 3 1) (1 2 1 1 3 1 1) (2 1 1 3 1 1 1) (1 1 3 1 1 1 2) (elems 7 sum 10 olaps 42))" "((1 3 1 1 2 1 1) (3 1 1 2 1 1 1) (1 1 2 1 1 1 3) (1 2 1 1 1 3 1) (2 1 1 1 3 1 1) (1 1 1 3 1 1 2) (1 1 3 1 1 2 1) (elems 7 sum 10 olaps 42))" "((1 3 1 2 1 1 1) (3 1 2 1 1 1 1) (1 2 1 1 1 1 3) (2 1 1 1 1 3 1) (1 1 1 1 3 1 2) (1 1 1 3 1 2 1) (1 1 3 1 2 1 1) (elems 7 sum 10 olaps 42))" "((1 3 2 1 1 1 1) (3 2 1 1 1 1 1) (2 1 1 1 1 1 3) (1 1 1 1 1 3 2) (1 1 1 1 3 2 1) (1 1 1 3 2 1 1) (1 1 3 2 1 1 1) (elems 7 sum 10 olaps 42))" "((1 4 1 1 1 1 1) (4 1 1 1 1 1 1) (1 1 1 1 1 1 4) (1 1 1 1 1 4 1) (1 1 1 1 4 1 1) (1 1 1 4 1 1 1) (1 1 4 1 1 1 1) (elems 7 sum 10 olaps 42))" "((2 1 1 1 1 1 3) (1 1 1 1 1 3 2) (1 1 1 1 3 2 1) (1 1 1 3 2 1 1) (1 1 3 2 1 1 1) (1 3 2 1 1 1 1) (3 2 1 1 1 1 1) (elems 7 sum 10 olaps 42))" "((2 1 1 1 1 2 2) (1 1 1 1 2 2 2) (1 1 1 2 2 2 1) (1 1 2 2 2 1 1) (1 2 2 2 1 1 1) (2 2 2 1 1 1 1) (2 2 1 1 1 1 2) (elems 7 sum 10 olaps 42))" "((2 1 1 1 1 3 1) (1 1 1 1 3 1 2) (1 1 1 3 1 2 1) (1 1 3 1 2 1 1) (1 3 1 2 1 1 1) (3 1 2 1 1 1 1) (1 2 1 1 1 1 3) (elems 7 sum 10 olaps 42))" "((2 1 1 1 2 1 2) (1 1 1 2 1 2 2) (1 1 2 1 2 2 1) (1 2 1 2 2 1 1) (2 1 2 2 1 1 1) (1 2 2 1 1 1 2) (2 2 1 1 1 2 1) (elems 7 sum 10 olaps 42))" "((2 1 1 1 2 2 1) (1 1 1 2 2 1 2) (1 1 2 2 1 2 1) (1 2 2 1 2 1 1) (2 2 1 2 1 1 1) (2 1 2 1 1 1 2) (1 2 1 1 1 2 2) (elems 7 sum 10 olaps 42))" "((2 1 1 1 3 1 1) (1 1 1 3 1 1 2) (1 1 3 1 1 2 1) (1 3 1 1 2 1 1) (3 1 1 2 1 1 1) (1 1 2 1 1 1 3) (1 2 1 1 1 3 1) (elems 7 sum 10 olaps 42))" "((2 1 1 2 1 1 2) (1 1 2 1 1 2 2) (1 2 1 1 2 2 1) (2 1 1 2 2 1 1) (1 1 2 2 1 1 2) (1 2 2 1 1 2 1) (2 2 1 1 2 1 1) (elems 7 sum 10 olaps 42))" "((2 1 1 2 1 2 1) (1 1 2 1 2 1 2) (1 2 1 2 1 2 1) (2 1 2 1 2 1 1) (1 2 1 2 1 1 2) (2 1 2 1 1 2 1) (1 2 1 1 2 1 2) (elems 7 sum 10 olaps 42))" "((2 1 1 2 2 1 1) (1 1 2 2 1 1 2) (1 2 2 1 1 2 1) (2 2 1 1 2 1 1) (2 1 1 2 1 1 2) (1 1 2 1 1 2 2) (1 2 1 1 2 2 1) (elems 7 sum 10 olaps 42))" "((2 1 1 3 1 1 1) (1 1 3 1 1 1 2) (1 3 1 1 1 2 1) (3 1 1 1 2 1 1) (1 1 1 2 1 1 3) (1 1 2 1 1 3 1) (1 2 1 1 3 1 1) (elems 7 sum 10 olaps 42))" "((2 1 2 1 1 1 2) (1 2 1 1 1 2 2) (2 1 1 1 2 2 1) (1 1 1 2 2 1 2) (1 1 2 2 1 2 1) (1 2 2 1 2 1 1) (2 2 1 2 1 1 1) (elems 7 sum 10 olaps 42))" "((2 1 2 1 1 2 1) (1 2 1 1 2 1 2) (2 1 1 2 1 2 1) (1 1 2 1 2 1 2) (1 2 1 2 1 2 1) (2 1 2 1 2 1 1) (1 2 1 2 1 1 2) (elems 7 sum 10 olaps 42))" "((2 1 2 1 2 1 1) (1 2 1 2 1 1 2) (2 1 2 1 1 2 1) (1 2 1 1 2 1 2) (2 1 1 2 1 2 1) (1 1 2 1 2 1 2) (1 2 1 2 1 2 1) (elems 7 sum 10 olaps 42))" "((2 1 2 2 1 1 1) (1 2 2 1 1 1 2) (2 2 1 1 1 2 1) (2 1 1 1 2 1 2) (1 1 1 2 1 2 2) (1 1 2 1 2 2 1) (1 2 1 2 2 1 1) (elems 7 sum 10 olaps 42))" "((2 1 3 1 1 1 1) (1 3 1 1 1 1 2) (3 1 1 1 1 2 1) (1 1 1 1 2 1 3) (1 1 1 2 1 3 1) (1 1 2 1 3 1 1) (1 2 1 3 1 1 1) (elems 7 sum 10 olaps 42))" "((2 2 1 1 1 1 2) (2 1 1 1 1 2 2) (1 1 1 1 2 2 2) (1 1 1 2 2 2 1) (1 1 2 2 2 1 1) (1 2 2 2 1 1 1) (2 2 2 1 1 1 1) (elems 7 sum 10 olaps 42))" "((2 2 1 1 1 2 1) (2 1 1 1 2 1 2) (1 1 1 2 1 2 2) (1 1 2 1 2 2 1) (1 2 1 2 2 1 1) (2 1 2 2 1 1 1) (1 2 2 1 1 1 2) (elems 7 sum 10 olaps 42))" "((2 2 1 1 2 1 1) (2 1 1 2 1 1 2) (1 1 2 1 1 2 2) (1 2 1 1 2 2 1) (2 1 1 2 2 1 1) (1 1 2 2 1 1 2) (1 2 2 1 1 2 1) (elems 7 sum 10 olaps 42))" "((2 2 1 2 1 1 1) (2 1 2 1 1 1 2) (1 2 1 1 1 2 2) (2 1 1 1 2 2 1) (1 1 1 2 2 1 2) (1 1 2 2 1 2 1) (1 2 2 1 2 1 1) (elems 7 sum 10 olaps 42))" "((2 2 2 1 1 1 1) (2 2 1 1 1 1 2) (2 1 1 1 1 2 2) (1 1 1 1 2 2 2) (1 1 1 2 2 2 1) (1 1 2 2 2 1 1) (1 2 2 2 1 1 1) (elems 7 sum 10 olaps 42))" "((2 3 1 1 1 1 1) (3 1 1 1 1 1 2) (1 1 1 1 1 2 3) (1 1 1 1 2 3 1) (1 1 1 2 3 1 1) (1 1 2 3 1 1 1) (1 2 3 1 1 1 1) (elems 7 sum 10 olaps 42))" "((3 1 1 1 1 1 2) (1 1 1 1 1 2 3) (1 1 1 1 2 3 1) (1 1 1 2 3 1 1) (1 1 2 3 1 1 1) (1 2 3 1 1 1 1) (2 3 1 1 1 1 1) (elems 7 sum 10 olaps 42))" "((3 1 1 1 1 2 1) (1 1 1 1 2 1 3) (1 1 1 2 1 3 1) (1 1 2 1 3 1 1) (1 2 1 3 1 1 1) (2 1 3 1 1 1 1) (1 3 1 1 1 1 2) (elems 7 sum 10 olaps 42))" "((3 1 1 1 2 1 1) (1 1 1 2 1 1 3) (1 1 2 1 1 3 1) (1 2 1 1 3 1 1) (2 1 1 3 1 1 1) (1 1 3 1 1 1 2) (1 3 1 1 1 2 1) (elems 7 sum 10 olaps 42))" "((3 1 1 2 1 1 1) (1 1 2 1 1 1 3) (1 2 1 1 1 3 1) (2 1 1 1 3 1 1) (1 1 1 3 1 1 2) (1 1 3 1 1 2 1) (1 3 1 1 2 1 1) (elems 7 sum 10 olaps 42))" "((3 1 2 1 1 1 1) (1 2 1 1 1 1 3) (2 1 1 1 1 3 1) (1 1 1 1 3 1 2) (1 1 1 3 1 2 1) (1 1 3 1 2 1 1) (1 3 1 2 1 1 1) (elems 7 sum 10 olaps 42))" "((3 2 1 1 1 1 1) (2 1 1 1 1 1 3) (1 1 1 1 1 3 2) (1 1 1 1 3 2 1) (1 1 1 3 2 1 1) (1 1 3 2 1 1 1) (1 3 2 1 1 1 1) (elems 7 sum 10 olaps 42))" "((4 1 1 1 1 1 1) (1 1 1 1 1 1 4) (1 1 1 1 1 4 1) (1 1 1 1 4 1 1) (1 1 1 4 1 1 1) (1 1 4 1 1 1 1) (1 4 1 1 1 1 1) (elems 7 sum 10 olaps 42))" "((1 1 1 1 1 1 6) (1 1 1 1 1 6 1) (1 1 1 1 6 1 1) (1 1 1 6 1 1 1) (1 1 6 1 1 1 1) (1 6 1 1 1 1 1) (6 1 1 1 1 1 1) (elems 7 sum 12 olaps 42))" "((1 1 1 1 1 2 5) (1 1 1 1 2 5 1) (1 1 1 2 5 1 1) (1 1 2 5 1 1 1) (1 2 5 1 1 1 1) (2 5 1 1 1 1 1) (5 1 1 1 1 1 2) (elems 7 sum 12 olaps 42))" "((1 1 1 1 1 3 4) (1 1 1 1 3 4 1) (1 1 1 3 4 1 1) (1 1 3 4 1 1 1) (1 3 4 1 1 1 1) (3 4 1 1 1 1 1) (4 1 1 1 1 1 3) (elems 7 sum 12 olaps 42))" "((1 1 1 1 1 4 3) (1 1 1 1 4 3 1) (1 1 1 4 3 1 1) (1 1 4 3 1 1 1) (1 4 3 1 1 1 1) (4 3 1 1 1 1 1) (3 1 1 1 1 1 4) (elems 7 sum 12 olaps 42))" "((1 1 1 1 1 5 2) (1 1 1 1 5 2 1) (1 1 1 5 2 1 1) (1 1 5 2 1 1 1) (1 5 2 1 1 1 1) (5 2 1 1 1 1 1) (2 1 1 1 1 1 5) (elems 7 sum 12 olaps 42))" "((1 1 1 1 1 6 1) (1 1 1 1 6 1 1) (1 1 1 6 1 1 1) (1 1 6 1 1 1 1) (1 6 1 1 1 1 1) (6 1 1 1 1 1 1) (1 1 1 1 1 1 6) (elems 7 sum 12 olaps 42))" "((1 1 1 1 2 1 5) (1 1 1 2 1 5 1) (1 1 2 1 5 1 1) (1 2 1 5 1 1 1) (2 1 5 1 1 1 1) (1 5 1 1 1 1 2) (5 1 1 1 1 2 1) (elems 7 sum 12 olaps 42))" "((1 1 1 1 2 2 4) (1 1 1 2 2 4 1) (1 1 2 2 4 1 1) (1 2 2 4 1 1 1) (2 2 4 1 1 1 1) (2 4 1 1 1 1 2) (4 1 1 1 1 2 2) (elems 7 sum 12 olaps 42))" "((1 1 1 1 2 3 3) (1 1 1 2 3 3 1) (1 1 2 3 3 1 1) (1 2 3 3 1 1 1) (2 3 3 1 1 1 1) (3 3 1 1 1 1 2) (3 1 1 1 1 2 3) (elems 7 sum 12 olaps 42))" "((1 1 1 1 2 4 2) (1 1 1 2 4 2 1) (1 1 2 4 2 1 1) (1 2 4 2 1 1 1) (2 4 2 1 1 1 1) (4 2 1 1 1 1 2) (2 1 1 1 1 2 4) (elems 7 sum 12 olaps 42))" "((1 1 1 1 2 5 1) (1 1 1 2 5 1 1) (1 1 2 5 1 1 1) (1 2 5 1 1 1 1) (2 5 1 1 1 1 1) (5 1 1 1 1 1 2) (1 1 1 1 1 2 5) (elems 7 sum 12 olaps 42))" "((1 1 1 1 3 1 4) (1 1 1 3 1 4 1) (1 1 3 1 4 1 1) (1 3 1 4 1 1 1) (3 1 4 1 1 1 1) (1 4 1 1 1 1 3) (4 1 1 1 1 3 1) (elems 7 sum 12 olaps 42))" "((1 1 1 1 3 2 3) (1 1 1 3 2 3 1) (1 1 3 2 3 1 1) (1 3 2 3 1 1 1) (3 2 3 1 1 1 1) (2 3 1 1 1 1 3) (3 1 1 1 1 3 2) (elems 7 sum 12 olaps 42))" "((1 1 1 1 3 3 2) (1 1 1 3 3 2 1) (1 1 3 3 2 1 1) (1 3 3 2 1 1 1) (3 3 2 1 1 1 1) (3 2 1 1 1 1 3) (2 1 1 1 1 3 3) (elems 7 sum 12 olaps 42))" "((1 1 1 1 3 4 1) (1 1 1 3 4 1 1) (1 1 3 4 1 1 1) (1 3 4 1 1 1 1) (3 4 1 1 1 1 1) (4 1 1 1 1 1 3) (1 1 1 1 1 3 4) (elems 7 sum 12 olaps 42))" "((1 1 1 1 4 1 3) (1 1 1 4 1 3 1) (1 1 4 1 3 1 1) (1 4 1 3 1 1 1) (4 1 3 1 1 1 1) (1 3 1 1 1 1 4) (3 1 1 1 1 4 1) (elems 7 sum 12 olaps 42))" "((1 1 1 1 4 2 2) (1 1 1 4 2 2 1) (1 1 4 2 2 1 1) (1 4 2 2 1 1 1) (4 2 2 1 1 1 1) (2 2 1 1 1 1 4) (2 1 1 1 1 4 2) (elems 7 sum 12 olaps 42))" "((1 1 1 1 4 3 1) (1 1 1 4 3 1 1) (1 1 4 3 1 1 1) (1 4 3 1 1 1 1) (4 3 1 1 1 1 1) (3 1 1 1 1 1 4) (1 1 1 1 1 4 3) (elems 7 sum 12 olaps 42))" "((1 1 1 1 5 1 2) (1 1 1 5 1 2 1) (1 1 5 1 2 1 1) (1 5 1 2 1 1 1) (5 1 2 1 1 1 1) (1 2 1 1 1 1 5) (2 1 1 1 1 5 1) (elems 7 sum 12 olaps 42))" "((1 1 1 1 5 2 1) (1 1 1 5 2 1 1) (1 1 5 2 1 1 1) (1 5 2 1 1 1 1) (5 2 1 1 1 1 1) (2 1 1 1 1 1 5) (1 1 1 1 1 5 2) (elems 7 sum 12 olaps 42))" "((1 1 1 1 6 1 1) (1 1 1 6 1 1 1) (1 1 6 1 1 1 1) (1 6 1 1 1 1 1) (6 1 1 1 1 1 1) (1 1 1 1 1 1 6) (1 1 1 1 1 6 1) (elems 7 sum 12 olaps 42))" "((1 1 1 2 1 1 5) (1 1 2 1 1 5 1) (1 2 1 1 5 1 1) (2 1 1 5 1 1 1) (1 1 5 1 1 1 2) (1 5 1 1 1 2 1) (5 1 1 1 2 1 1) (elems 7 sum 12 olaps 42))" "((1 1 1 2 1 2 4) (1 1 2 1 2 4 1) (1 2 1 2 4 1 1) (2 1 2 4 1 1 1) (1 2 4 1 1 1 2) (2 4 1 1 1 2 1) (4 1 1 1 2 1 2) (elems 7 sum 12 olaps 42))" "((1 1 1 2 1 3 3) (1 1 2 1 3 3 1) (1 2 1 3 3 1 1) (2 1 3 3 1 1 1) (1 3 3 1 1 1 2) (3 3 1 1 1 2 1) (3 1 1 1 2 1 3) (elems 7 sum 12 olaps 42))" "((1 1 1 2 1 4 2) (1 1 2 1 4 2 1) (1 2 1 4 2 1 1) (2 1 4 2 1 1 1) (1 4 2 1 1 1 2) (4 2 1 1 1 2 1) (2 1 1 1 2 1 4) (elems 7 sum 12 olaps 42))" "((1 1 1 2 1 5 1) (1 1 2 1 5 1 1) (1 2 1 5 1 1 1) (2 1 5 1 1 1 1) (1 5 1 1 1 1 2) (5 1 1 1 1 2 1) (1 1 1 1 2 1 5) (elems 7 sum 12 olaps 42))" "((1 1 1 2 2 1 4) (1 1 2 2 1 4 1) (1 2 2 1 4 1 1) (2 2 1 4 1 1 1) (2 1 4 1 1 1 2) (1 4 1 1 1 2 2) (4 1 1 1 2 2 1) (elems 7 sum 12 olaps 42))" "((1 1 1 2 2 2 3) (1 1 2 2 2 3 1) (1 2 2 2 3 1 1) (2 2 2 3 1 1 1) (2 2 3 1 1 1 2) (2 3 1 1 1 2 2) (3 1 1 1 2 2 2) (elems 7 sum 12 olaps 42))" "((1 1 1 2 2 3 2) (1 1 2 2 3 2 1) (1 2 2 3 2 1 1) (2 2 3 2 1 1 1) (2 3 2 1 1 1 2) (3 2 1 1 1 2 2) (2 1 1 1 2 2 3) (elems 7 sum 12 olaps 42))" "((1 1 1 2 2 4 1) (1 1 2 2 4 1 1) (1 2 2 4 1 1 1) (2 2 4 1 1 1 1) (2 4 1 1 1 1 2) (4 1 1 1 1 2 2) (1 1 1 1 2 2 4) (elems 7 sum 12 olaps 42))" "((1 1 1 2 3 1 3) (1 1 2 3 1 3 1) (1 2 3 1 3 1 1) (2 3 1 3 1 1 1) (3 1 3 1 1 1 2) (1 3 1 1 1 2 3) (3 1 1 1 2 3 1) (elems 7 sum 12 olaps 42))" "((1 1 1 2 3 2 2) (1 1 2 3 2 2 1) (1 2 3 2 2 1 1) (2 3 2 2 1 1 1) (3 2 2 1 1 1 2) (2 2 1 1 1 2 3) (2 1 1 1 2 3 2) (elems 7 sum 12 olaps 42))" "((1 1 1 2 3 3 1) (1 1 2 3 3 1 1) (1 2 3 3 1 1 1) (2 3 3 1 1 1 1) (3 3 1 1 1 1 2) (3 1 1 1 1 2 3) (1 1 1 1 2 3 3) (elems 7 sum 12 olaps 42))" "((1 1 1 2 4 1 2) (1 1 2 4 1 2 1) (1 2 4 1 2 1 1) (2 4 1 2 1 1 1) (4 1 2 1 1 1 2) (1 2 1 1 1 2 4) (2 1 1 1 2 4 1) (elems 7 sum 12 olaps 42))" "((1 1 1 2 4 2 1) (1 1 2 4 2 1 1) (1 2 4 2 1 1 1) (2 4 2 1 1 1 1) (4 2 1 1 1 1 2) (2 1 1 1 1 2 4) (1 1 1 1 2 4 2) (elems 7 sum 12 olaps 42))" "((1 1 1 2 5 1 1) (1 1 2 5 1 1 1) (1 2 5 1 1 1 1) (2 5 1 1 1 1 1) (5 1 1 1 1 1 2) (1 1 1 1 1 2 5) (1 1 1 1 2 5 1) (elems 7 sum 12 olaps 42))" "((1 1 1 3 1 1 4) (1 1 3 1 1 4 1) (1 3 1 1 4 1 1) (3 1 1 4 1 1 1) (1 1 4 1 1 1 3) (1 4 1 1 1 3 1) (4 1 1 1 3 1 1) (elems 7 sum 12 olaps 42))" "((1 1 1 3 1 2 3) (1 1 3 1 2 3 1) (1 3 1 2 3 1 1) (3 1 2 3 1 1 1) (1 2 3 1 1 1 3) (2 3 1 1 1 3 1) (3 1 1 1 3 1 2) (elems 7 sum 12 olaps 42))" "((1 1 1 3 1 3 2) (1 1 3 1 3 2 1) (1 3 1 3 2 1 1) (3 1 3 2 1 1 1) (1 3 2 1 1 1 3) (3 2 1 1 1 3 1) (2 1 1 1 3 1 3) (elems 7 sum 12 olaps 42))" "((1 1 1 3 1 4 1) (1 1 3 1 4 1 1) (1 3 1 4 1 1 1) (3 1 4 1 1 1 1) (1 4 1 1 1 1 3) (4 1 1 1 1 3 1) (1 1 1 1 3 1 4) (elems 7 sum 12 olaps 42))" "((1 1 1 3 2 1 3) (1 1 3 2 1 3 1) (1 3 2 1 3 1 1) (3 2 1 3 1 1 1) (2 1 3 1 1 1 3) (1 3 1 1 1 3 2) (3 1 1 1 3 2 1) (elems 7 sum 12 olaps 42))" "((1 1 1 3 2 2 2) (1 1 3 2 2 2 1) (1 3 2 2 2 1 1) (3 2 2 2 1 1 1) (2 2 2 1 1 1 3) (2 2 1 1 1 3 2) (2 1 1 1 3 2 2) (elems 7 sum 12 olaps 42))" "((1 1 1 3 2 3 1) (1 1 3 2 3 1 1) (1 3 2 3 1 1 1) (3 2 3 1 1 1 1) (2 3 1 1 1 1 3) (3 1 1 1 1 3 2) (1 1 1 1 3 2 3) (elems 7 sum 12 olaps 42))" "((1 1 1 3 3 1 2) (1 1 3 3 1 2 1) (1 3 3 1 2 1 1) (3 3 1 2 1 1 1) (3 1 2 1 1 1 3) (1 2 1 1 1 3 3) (2 1 1 1 3 3 1) (elems 7 sum 12 olaps 42))" "((1 1 1 3 3 2 1) (1 1 3 3 2 1 1) (1 3 3 2 1 1 1) (3 3 2 1 1 1 1) (3 2 1 1 1 1 3) (2 1 1 1 1 3 3) (1 1 1 1 3 3 2) (elems 7 sum 12 olaps 42))" "((1 1 1 3 4 1 1) (1 1 3 4 1 1 1) (1 3 4 1 1 1 1) (3 4 1 1 1 1 1) (4 1 1 1 1 1 3) (1 1 1 1 1 3 4) (1 1 1 1 3 4 1) (elems 7 sum 12 olaps 42))" "((1 1 1 4 1 1 3) (1 1 4 1 1 3 1) (1 4 1 1 3 1 1) (4 1 1 3 1 1 1) (1 1 3 1 1 1 4) (1 3 1 1 1 4 1) (3 1 1 1 4 1 1) (elems 7 sum 12 olaps 42))" "((1 1 1 4 1 2 2) (1 1 4 1 2 2 1) (1 4 1 2 2 1 1) (4 1 2 2 1 1 1) (1 2 2 1 1 1 4) (2 2 1 1 1 4 1) (2 1 1 1 4 1 2) (elems 7 sum 12 olaps 42))" "((1 1 1 4 1 3 1) (1 1 4 1 3 1 1) (1 4 1 3 1 1 1) (4 1 3 1 1 1 1) (1 3 1 1 1 1 4) (3 1 1 1 1 4 1) (1 1 1 1 4 1 3) (elems 7 sum 12 olaps 42))" "((1 1 1 4 2 1 2) (1 1 4 2 1 2 1) (1 4 2 1 2 1 1) (4 2 1 2 1 1 1) (2 1 2 1 1 1 4) (1 2 1 1 1 4 2) (2 1 1 1 4 2 1) (elems 7 sum 12 olaps 42))" "((1 1 1 4 2 2 1) (1 1 4 2 2 1 1) (1 4 2 2 1 1 1) (4 2 2 1 1 1 1) (2 2 1 1 1 1 4) (2 1 1 1 1 4 2) (1 1 1 1 4 2 2) (elems 7 sum 12 olaps 42))" "((1 1 1 4 3 1 1) (1 1 4 3 1 1 1) (1 4 3 1 1 1 1) (4 3 1 1 1 1 1) (3 1 1 1 1 1 4) (1 1 1 1 1 4 3) (1 1 1 1 4 3 1) (elems 7 sum 12 olaps 42))" "((1 1 1 5 1 1 2) (1 1 5 1 1 2 1) (1 5 1 1 2 1 1) (5 1 1 2 1 1 1) (1 1 2 1 1 1 5) (1 2 1 1 1 5 1) (2 1 1 1 5 1 1) (elems 7 sum 12 olaps 42))" "((1 1 1 5 1 2 1) (1 1 5 1 2 1 1) (1 5 1 2 1 1 1) (5 1 2 1 1 1 1) (1 2 1 1 1 1 5) (2 1 1 1 1 5 1) (1 1 1 1 5 1 2) (elems 7 sum 12 olaps 42))" "((1 1 1 5 2 1 1) (1 1 5 2 1 1 1) (1 5 2 1 1 1 1) (5 2 1 1 1 1 1) (2 1 1 1 1 1 5) (1 1 1 1 1 5 2) (1 1 1 1 5 2 1) (elems 7 sum 12 olaps 42))" "((1 1 1 6 1 1 1) (1 1 6 1 1 1 1) (1 6 1 1 1 1 1) (6 1 1 1 1 1 1) (1 1 1 1 1 1 6) (1 1 1 1 1 6 1) (1 1 1 1 6 1 1) (elems 7 sum 12 olaps 42))" "((1 1 2 1 1 1 5) (1 2 1 1 1 5 1) (2 1 1 1 5 1 1) (1 1 1 5 1 1 2) (1 1 5 1 1 2 1) (1 5 1 1 2 1 1) (5 1 1 2 1 1 1) (elems 7 sum 12 olaps 42))" "((1 1 2 1 1 2 4) (1 2 1 1 2 4 1) (2 1 1 2 4 1 1) (1 1 2 4 1 1 2) (1 2 4 1 1 2 1) (2 4 1 1 2 1 1) (4 1 1 2 1 1 2) (elems 7 sum 12 olaps 42))" "((1 1 2 1 1 3 3) (1 2 1 1 3 3 1) (2 1 1 3 3 1 1) (1 1 3 3 1 1 2) (1 3 3 1 1 2 1) (3 3 1 1 2 1 1) (3 1 1 2 1 1 3) (elems 7 sum 12 olaps 42))" "((1 1 2 1 1 4 2) (1 2 1 1 4 2 1) (2 1 1 4 2 1 1) (1 1 4 2 1 1 2) (1 4 2 1 1 2 1) (4 2 1 1 2 1 1) (2 1 1 2 1 1 4) (elems 7 sum 12 olaps 42))" "((1 1 2 1 1 5 1) (1 2 1 1 5 1 1) (2 1 1 5 1 1 1) (1 1 5 1 1 1 2) (1 5 1 1 1 2 1) (5 1 1 1 2 1 1) (1 1 1 2 1 1 5) (elems 7 sum 12 olaps 42))" "((1 1 2 1 2 1 4) (1 2 1 2 1 4 1) (2 1 2 1 4 1 1) (1 2 1 4 1 1 2) (2 1 4 1 1 2 1) (1 4 1 1 2 1 2) (4 1 1 2 1 2 1) (elems 7 sum 12 olaps 42))" "((1 1 2 1 2 2 3) (1 2 1 2 2 3 1) (2 1 2 2 3 1 1) (1 2 2 3 1 1 2) (2 2 3 1 1 2 1) (2 3 1 1 2 1 2) (3 1 1 2 1 2 2) (elems 7 sum 12 olaps 42))" "((1 1 2 1 2 3 2) (1 2 1 2 3 2 1) (2 1 2 3 2 1 1) (1 2 3 2 1 1 2) (2 3 2 1 1 2 1) (3 2 1 1 2 1 2) (2 1 1 2 1 2 3) (elems 7 sum 12 olaps 42))" "((1 1 2 1 2 4 1) (1 2 1 2 4 1 1) (2 1 2 4 1 1 1) (1 2 4 1 1 1 2) (2 4 1 1 1 2 1) (4 1 1 1 2 1 2) (1 1 1 2 1 2 4) (elems 7 sum 12 olaps 42))" "((1 1 2 1 3 1 3) (1 2 1 3 1 3 1) (2 1 3 1 3 1 1) (1 3 1 3 1 1 2) (3 1 3 1 1 2 1) (1 3 1 1 2 1 3) (3 1 1 2 1 3 1) (elems 7 sum 12 olaps 42))" "((1 1 2 1 3 2 2) (1 2 1 3 2 2 1) (2 1 3 2 2 1 1) (1 3 2 2 1 1 2) (3 2 2 1 1 2 1) (2 2 1 1 2 1 3) (2 1 1 2 1 3 2) (elems 7 sum 12 olaps 42))" "((1 1 2 1 3 3 1) (1 2 1 3 3 1 1) (2 1 3 3 1 1 1) (1 3 3 1 1 1 2) (3 3 1 1 1 2 1) (3 1 1 1 2 1 3) (1 1 1 2 1 3 3) (elems 7 sum 12 olaps 42))" "((1 1 2 1 4 1 2) (1 2 1 4 1 2 1) (2 1 4 1 2 1 1) (1 4 1 2 1 1 2) (4 1 2 1 1 2 1) (1 2 1 1 2 1 4) (2 1 1 2 1 4 1) (elems 7 sum 12 olaps 42))" "((1 1 2 1 4 2 1) (1 2 1 4 2 1 1) (2 1 4 2 1 1 1) (1 4 2 1 1 1 2) (4 2 1 1 1 2 1) (2 1 1 1 2 1 4) (1 1 1 2 1 4 2) (elems 7 sum 12 olaps 42))" "((1 1 2 1 5 1 1) (1 2 1 5 1 1 1) (2 1 5 1 1 1 1) (1 5 1 1 1 1 2) (5 1 1 1 1 2 1) (1 1 1 1 2 1 5) (1 1 1 2 1 5 1) (elems 7 sum 12 olaps 42))" "((1 1 2 2 1 1 4) (1 2 2 1 1 4 1) (2 2 1 1 4 1 1) (2 1 1 4 1 1 2) (1 1 4 1 1 2 2) (1 4 1 1 2 2 1) (4 1 1 2 2 1 1) (elems 7 sum 12 olaps 42))" "((1 1 2 2 1 2 3) (1 2 2 1 2 3 1) (2 2 1 2 3 1 1) (2 1 2 3 1 1 2) (1 2 3 1 1 2 2) (2 3 1 1 2 2 1) (3 1 1 2 2 1 2) (elems 7 sum 12 olaps 42))" "((1 1 2 2 1 3 2) (1 2 2 1 3 2 1) (2 2 1 3 2 1 1) (2 1 3 2 1 1 2) (1 3 2 1 1 2 2) (3 2 1 1 2 2 1) (2 1 1 2 2 1 3) (elems 7 sum 12 olaps 42))" "((1 1 2 2 1 4 1) (1 2 2 1 4 1 1) (2 2 1 4 1 1 1) (2 1 4 1 1 1 2) (1 4 1 1 1 2 2) (4 1 1 1 2 2 1) (1 1 1 2 2 1 4) (elems 7 sum 12 olaps 42))" "((1 1 2 2 2 1 3) (1 2 2 2 1 3 1) (2 2 2 1 3 1 1) (2 2 1 3 1 1 2) (2 1 3 1 1 2 2) (1 3 1 1 2 2 2) (3 1 1 2 2 2 1) (elems 7 sum 12 olaps 42))" "((1 1 2 2 2 2 2) (1 2 2 2 2 2 1) (2 2 2 2 2 1 1) (2 2 2 2 1 1 2) (2 2 2 1 1 2 2) (2 2 1 1 2 2 2) (2 1 1 2 2 2 2) (elems 7 sum 12 olaps 42))" "((1 1 2 2 2 3 1) (1 2 2 2 3 1 1) (2 2 2 3 1 1 1) (2 2 3 1 1 1 2) (2 3 1 1 1 2 2) (3 1 1 1 2 2 2) (1 1 1 2 2 2 3) (elems 7 sum 12 olaps 42))" "((1 1 2 2 3 1 2) (1 2 2 3 1 2 1) (2 2 3 1 2 1 1) (2 3 1 2 1 1 2) (3 1 2 1 1 2 2) (1 2 1 1 2 2 3) (2 1 1 2 2 3 1) (elems 7 sum 12 olaps 42))" "((1 1 2 2 3 2 1) (1 2 2 3 2 1 1) (2 2 3 2 1 1 1) (2 3 2 1 1 1 2) (3 2 1 1 1 2 2) (2 1 1 1 2 2 3) (1 1 1 2 2 3 2) (elems 7 sum 12 olaps 42))" "((1 1 2 2 4 1 1) (1 2 2 4 1 1 1) (2 2 4 1 1 1 1) (2 4 1 1 1 1 2) (4 1 1 1 1 2 2) (1 1 1 1 2 2 4) (1 1 1 2 2 4 1) (elems 7 sum 12 olaps 42))" "((1 1 2 3 1 1 3) (1 2 3 1 1 3 1) (2 3 1 1 3 1 1) (3 1 1 3 1 1 2) (1 1 3 1 1 2 3) (1 3 1 1 2 3 1) (3 1 1 2 3 1 1) (elems 7 sum 12 olaps 42))" "((1 1 2 3 1 2 2) (1 2 3 1 2 2 1) (2 3 1 2 2 1 1) (3 1 2 2 1 1 2) (1 2 2 1 1 2 3) (2 2 1 1 2 3 1) (2 1 1 2 3 1 2) (elems 7 sum 12 olaps 42))" "((1 1 2 3 1 3 1) (1 2 3 1 3 1 1) (2 3 1 3 1 1 1) (3 1 3 1 1 1 2) (1 3 1 1 1 2 3) (3 1 1 1 2 3 1) (1 1 1 2 3 1 3) (elems 7 sum 12 olaps 42))" "((1 1 2 3 2 1 2) (1 2 3 2 1 2 1) (2 3 2 1 2 1 1) (3 2 1 2 1 1 2) (2 1 2 1 1 2 3) (1 2 1 1 2 3 2) (2 1 1 2 3 2 1) (elems 7 sum 12 olaps 42))" "((1 1 2 3 2 2 1) (1 2 3 2 2 1 1) (2 3 2 2 1 1 1) (3 2 2 1 1 1 2) (2 2 1 1 1 2 3) (2 1 1 1 2 3 2) (1 1 1 2 3 2 2) (elems 7 sum 12 olaps 42))" "((1 1 2 3 3 1 1) (1 2 3 3 1 1 1) (2 3 3 1 1 1 1) (3 3 1 1 1 1 2) (3 1 1 1 1 2 3) (1 1 1 1 2 3 3) (1 1 1 2 3 3 1) (elems 7 sum 12 olaps 42))" "((1 1 2 4 1 1 2) (1 2 4 1 1 2 1) (2 4 1 1 2 1 1) (4 1 1 2 1 1 2) (1 1 2 1 1 2 4) (1 2 1 1 2 4 1) (2 1 1 2 4 1 1) (elems 7 sum 12 olaps 42))" "((1 1 2 4 1 2 1) (1 2 4 1 2 1 1) (2 4 1 2 1 1 1) (4 1 2 1 1 1 2) (1 2 1 1 1 2 4) (2 1 1 1 2 4 1) (1 1 1 2 4 1 2) (elems 7 sum 12 olaps 42))" "((1 1 2 4 2 1 1) (1 2 4 2 1 1 1) (2 4 2 1 1 1 1) (4 2 1 1 1 1 2) (2 1 1 1 1 2 4) (1 1 1 1 2 4 2) (1 1 1 2 4 2 1) (elems 7 sum 12 olaps 42))" "((1 1 2 5 1 1 1) (1 2 5 1 1 1 1) (2 5 1 1 1 1 1) (5 1 1 1 1 1 2) (1 1 1 1 1 2 5) (1 1 1 1 2 5 1) (1 1 1 2 5 1 1) (elems 7 sum 12 olaps 42))" "((1 1 3 1 1 1 4) (1 3 1 1 1 4 1) (3 1 1 1 4 1 1) (1 1 1 4 1 1 3) (1 1 4 1 1 3 1) (1 4 1 1 3 1 1) (4 1 1 3 1 1 1) (elems 7 sum 12 olaps 42))" "((1 1 3 1 1 2 3) (1 3 1 1 2 3 1) (3 1 1 2 3 1 1) (1 1 2 3 1 1 3) (1 2 3 1 1 3 1) (2 3 1 1 3 1 1) (3 1 1 3 1 1 2) (elems 7 sum 12 olaps 42))" "((1 1 3 1 1 3 2) (1 3 1 1 3 2 1) (3 1 1 3 2 1 1) (1 1 3 2 1 1 3) (1 3 2 1 1 3 1) (3 2 1 1 3 1 1) (2 1 1 3 1 1 3) (elems 7 sum 12 olaps 42))" "((1 1 3 1 1 4 1) (1 3 1 1 4 1 1) (3 1 1 4 1 1 1) (1 1 4 1 1 1 3) (1 4 1 1 1 3 1) (4 1 1 1 3 1 1) (1 1 1 3 1 1 4) (elems 7 sum 12 olaps 42))" "((1 1 3 1 2 1 3) (1 3 1 2 1 3 1) (3 1 2 1 3 1 1) (1 2 1 3 1 1 3) (2 1 3 1 1 3 1) (1 3 1 1 3 1 2) (3 1 1 3 1 2 1) (elems 7 sum 12 olaps 42))" "((1 1 3 1 2 2 2) (1 3 1 2 2 2 1) (3 1 2 2 2 1 1) (1 2 2 2 1 1 3) (2 2 2 1 1 3 1) (2 2 1 1 3 1 2) (2 1 1 3 1 2 2) (elems 7 sum 12 olaps 42))" "((1 1 3 1 2 3 1) (1 3 1 2 3 1 1) (3 1 2 3 1 1 1) (1 2 3 1 1 1 3) (2 3 1 1 1 3 1) (3 1 1 1 3 1 2) (1 1 1 3 1 2 3) (elems 7 sum 12 olaps 42))" "((1 1 3 1 3 1 2) (1 3 1 3 1 2 1) (3 1 3 1 2 1 1) (1 3 1 2 1 1 3) (3 1 2 1 1 3 1) (1 2 1 1 3 1 3) (2 1 1 3 1 3 1) (elems 7 sum 12 olaps 42))" "((1 1 3 1 3 2 1) (1 3 1 3 2 1 1) (3 1 3 2 1 1 1) (1 3 2 1 1 1 3) (3 2 1 1 1 3 1) (2 1 1 1 3 1 3) (1 1 1 3 1 3 2) (elems 7 sum 12 olaps 42))" "((1 1 3 1 4 1 1) (1 3 1 4 1 1 1) (3 1 4 1 1 1 1) (1 4 1 1 1 1 3) (4 1 1 1 1 3 1) (1 1 1 1 3 1 4) (1 1 1 3 1 4 1) (elems 7 sum 12 olaps 42))" "((1 1 3 2 1 1 3) (1 3 2 1 1 3 1) (3 2 1 1 3 1 1) (2 1 1 3 1 1 3) (1 1 3 1 1 3 2) (1 3 1 1 3 2 1) (3 1 1 3 2 1 1) (elems 7 sum 12 olaps 42))" "((1 1 3 2 1 2 2) (1 3 2 1 2 2 1) (3 2 1 2 2 1 1) (2 1 2 2 1 1 3) (1 2 2 1 1 3 2) (2 2 1 1 3 2 1) (2 1 1 3 2 1 2) (elems 7 sum 12 olaps 42))" "((1 1 3 2 1 3 1) (1 3 2 1 3 1 1) (3 2 1 3 1 1 1) (2 1 3 1 1 1 3) (1 3 1 1 1 3 2) (3 1 1 1 3 2 1) (1 1 1 3 2 1 3) (elems 7 sum 12 olaps 42))" "((1 1 3 2 2 1 2) (1 3 2 2 1 2 1) (3 2 2 1 2 1 1) (2 2 1 2 1 1 3) (2 1 2 1 1 3 2) (1 2 1 1 3 2 2) (2 1 1 3 2 2 1) (elems 7 sum 12 olaps 42))" "((1 1 3 2 2 2 1) (1 3 2 2 2 1 1) (3 2 2 2 1 1 1) (2 2 2 1 1 1 3) (2 2 1 1 1 3 2) (2 1 1 1 3 2 2) (1 1 1 3 2 2 2) (elems 7 sum 12 olaps 42))" "((1 1 3 2 3 1 1) (1 3 2 3 1 1 1) (3 2 3 1 1 1 1) (2 3 1 1 1 1 3) (3 1 1 1 1 3 2) (1 1 1 1 3 2 3) (1 1 1 3 2 3 1) (elems 7 sum 12 olaps 42))" "((1 1 3 3 1 1 2) (1 3 3 1 1 2 1) (3 3 1 1 2 1 1) (3 1 1 2 1 1 3) (1 1 2 1 1 3 3) (1 2 1 1 3 3 1) (2 1 1 3 3 1 1) (elems 7 sum 12 olaps 42))" "((1 1 3 3 1 2 1) (1 3 3 1 2 1 1) (3 3 1 2 1 1 1) (3 1 2 1 1 1 3) (1 2 1 1 1 3 3) (2 1 1 1 3 3 1) (1 1 1 3 3 1 2) (elems 7 sum 12 olaps 42))" "((1 1 3 3 2 1 1) (1 3 3 2 1 1 1) (3 3 2 1 1 1 1) (3 2 1 1 1 1 3) (2 1 1 1 1 3 3) (1 1 1 1 3 3 2) (1 1 1 3 3 2 1) (elems 7 sum 12 olaps 42))" "((1 1 3 4 1 1 1) (1 3 4 1 1 1 1) (3 4 1 1 1 1 1) (4 1 1 1 1 1 3) (1 1 1 1 1 3 4) (1 1 1 1 3 4 1) (1 1 1 3 4 1 1) (elems 7 sum 12 olaps 42))" "((1 1 4 1 1 1 3) (1 4 1 1 1 3 1) (4 1 1 1 3 1 1) (1 1 1 3 1 1 4) (1 1 3 1 1 4 1) (1 3 1 1 4 1 1) (3 1 1 4 1 1 1) (elems 7 sum 12 olaps 42))" "((1 1 4 1 1 2 2) (1 4 1 1 2 2 1) (4 1 1 2 2 1 1) (1 1 2 2 1 1 4) (1 2 2 1 1 4 1) (2 2 1 1 4 1 1) (2 1 1 4 1 1 2) (elems 7 sum 12 olaps 42))" "((1 1 4 1 1 3 1) (1 4 1 1 3 1 1) (4 1 1 3 1 1 1) (1 1 3 1 1 1 4) (1 3 1 1 1 4 1) (3 1 1 1 4 1 1) (1 1 1 4 1 1 3) (elems 7 sum 12 olaps 42))" "((1 1 4 1 2 1 2) (1 4 1 2 1 2 1) (4 1 2 1 2 1 1) (1 2 1 2 1 1 4) (2 1 2 1 1 4 1) (1 2 1 1 4 1 2) (2 1 1 4 1 2 1) (elems 7 sum 12 olaps 42))" "((1 1 4 1 2 2 1) (1 4 1 2 2 1 1) (4 1 2 2 1 1 1) (1 2 2 1 1 1 4) (2 2 1 1 1 4 1) (2 1 1 1 4 1 2) (1 1 1 4 1 2 2) (elems 7 sum 12 olaps 42))" "((1 1 4 1 3 1 1) (1 4 1 3 1 1 1) (4 1 3 1 1 1 1) (1 3 1 1 1 1 4) (3 1 1 1 1 4 1) (1 1 1 1 4 1 3) (1 1 1 4 1 3 1) (elems 7 sum 12 olaps 42))" "((1 1 4 2 1 1 2) (1 4 2 1 1 2 1) (4 2 1 1 2 1 1) (2 1 1 2 1 1 4) (1 1 2 1 1 4 2) (1 2 1 1 4 2 1) (2 1 1 4 2 1 1) (elems 7 sum 12 olaps 42))" "((1 1 4 2 1 2 1) (1 4 2 1 2 1 1) (4 2 1 2 1 1 1) (2 1 2 1 1 1 4) (1 2 1 1 1 4 2) (2 1 1 1 4 2 1) (1 1 1 4 2 1 2) (elems 7 sum 12 olaps 42))" "((1 1 4 2 2 1 1) (1 4 2 2 1 1 1) (4 2 2 1 1 1 1) (2 2 1 1 1 1 4) (2 1 1 1 1 4 2) (1 1 1 1 4 2 2) (1 1 1 4 2 2 1) (elems 7 sum 12 olaps 42))" "((1 1 4 3 1 1 1) (1 4 3 1 1 1 1) (4 3 1 1 1 1 1) (3 1 1 1 1 1 4) (1 1 1 1 1 4 3) (1 1 1 1 4 3 1) (1 1 1 4 3 1 1) (elems 7 sum 12 olaps 42))" "((1 1 5 1 1 1 2) (1 5 1 1 1 2 1) (5 1 1 1 2 1 1) (1 1 1 2 1 1 5) (1 1 2 1 1 5 1) (1 2 1 1 5 1 1) (2 1 1 5 1 1 1) (elems 7 sum 12 olaps 42))" "((1 1 5 1 1 2 1) (1 5 1 1 2 1 1) (5 1 1 2 1 1 1) (1 1 2 1 1 1 5) (1 2 1 1 1 5 1) (2 1 1 1 5 1 1) (1 1 1 5 1 1 2) (elems 7 sum 12 olaps 42))" "((1 1 5 1 2 1 1) (1 5 1 2 1 1 1) (5 1 2 1 1 1 1) (1 2 1 1 1 1 5) (2 1 1 1 1 5 1) (1 1 1 1 5 1 2) (1 1 1 5 1 2 1) (elems 7 sum 12 olaps 42))" "((1 1 5 2 1 1 1) (1 5 2 1 1 1 1) (5 2 1 1 1 1 1) (2 1 1 1 1 1 5) (1 1 1 1 1 5 2) (1 1 1 1 5 2 1) (1 1 1 5 2 1 1) (elems 7 sum 12 olaps 42))" "((1 1 6 1 1 1 1) (1 6 1 1 1 1 1) (6 1 1 1 1 1 1) (1 1 1 1 1 1 6) (1 1 1 1 1 6 1) (1 1 1 1 6 1 1) (1 1 1 6 1 1 1) (elems 7 sum 12 olaps 42))" "((1 2 1 1 1 1 5) (2 1 1 1 1 5 1) (1 1 1 1 5 1 2) (1 1 1 5 1 2 1) (1 1 5 1 2 1 1) (1 5 1 2 1 1 1) (5 1 2 1 1 1 1) (elems 7 sum 12 olaps 42))" "((1 2 1 1 1 2 4) (2 1 1 1 2 4 1) (1 1 1 2 4 1 2) (1 1 2 4 1 2 1) (1 2 4 1 2 1 1) (2 4 1 2 1 1 1) (4 1 2 1 1 1 2) (elems 7 sum 12 olaps 42))" "((1 2 1 1 1 3 3) (2 1 1 1 3 3 1) (1 1 1 3 3 1 2) (1 1 3 3 1 2 1) (1 3 3 1 2 1 1) (3 3 1 2 1 1 1) (3 1 2 1 1 1 3) (elems 7 sum 12 olaps 42))" "((1 2 1 1 1 4 2) (2 1 1 1 4 2 1) (1 1 1 4 2 1 2) (1 1 4 2 1 2 1) (1 4 2 1 2 1 1) (4 2 1 2 1 1 1) (2 1 2 1 1 1 4) (elems 7 sum 12 olaps 42))" "((1 2 1 1 1 5 1) (2 1 1 1 5 1 1) (1 1 1 5 1 1 2) (1 1 5 1 1 2 1) (1 5 1 1 2 1 1) (5 1 1 2 1 1 1) (1 1 2 1 1 1 5) (elems 7 sum 12 olaps 42))" "((1 2 1 1 2 1 4) (2 1 1 2 1 4 1) (1 1 2 1 4 1 2) (1 2 1 4 1 2 1) (2 1 4 1 2 1 1) (1 4 1 2 1 1 2) (4 1 2 1 1 2 1) (elems 7 sum 12 olaps 42))" "((1 2 1 1 2 2 3) (2 1 1 2 2 3 1) (1 1 2 2 3 1 2) (1 2 2 3 1 2 1) (2 2 3 1 2 1 1) (2 3 1 2 1 1 2) (3 1 2 1 1 2 2) (elems 7 sum 12 olaps 42))" "((1 2 1 1 2 3 2) (2 1 1 2 3 2 1) (1 1 2 3 2 1 2) (1 2 3 2 1 2 1) (2 3 2 1 2 1 1) (3 2 1 2 1 1 2) (2 1 2 1 1 2 3) (elems 7 sum 12 olaps 42))" "((1 2 1 1 2 4 1) (2 1 1 2 4 1 1) (1 1 2 4 1 1 2) (1 2 4 1 1 2 1) (2 4 1 1 2 1 1) (4 1 1 2 1 1 2) (1 1 2 1 1 2 4) (elems 7 sum 12 olaps 42))" "((1 2 1 1 3 1 3) (2 1 1 3 1 3 1) (1 1 3 1 3 1 2) (1 3 1 3 1 2 1) (3 1 3 1 2 1 1) (1 3 1 2 1 1 3) (3 1 2 1 1 3 1) (elems 7 sum 12 olaps 42))" "((1 2 1 1 3 2 2) (2 1 1 3 2 2 1) (1 1 3 2 2 1 2) (1 3 2 2 1 2 1) (3 2 2 1 2 1 1) (2 2 1 2 1 1 3) (2 1 2 1 1 3 2) (elems 7 sum 12 olaps 42))" "((1 2 1 1 3 3 1) (2 1 1 3 3 1 1) (1 1 3 3 1 1 2) (1 3 3 1 1 2 1) (3 3 1 1 2 1 1) (3 1 1 2 1 1 3) (1 1 2 1 1 3 3) (elems 7 sum 12 olaps 42))" "((1 2 1 1 4 1 2) (2 1 1 4 1 2 1) (1 1 4 1 2 1 2) (1 4 1 2 1 2 1) (4 1 2 1 2 1 1) (1 2 1 2 1 1 4) (2 1 2 1 1 4 1) (elems 7 sum 12 olaps 42))" "((1 2 1 1 4 2 1) (2 1 1 4 2 1 1) (1 1 4 2 1 1 2) (1 4 2 1 1 2 1) (4 2 1 1 2 1 1) (2 1 1 2 1 1 4) (1 1 2 1 1 4 2) (elems 7 sum 12 olaps 42))" "((1 2 1 1 5 1 1) (2 1 1 5 1 1 1) (1 1 5 1 1 1 2) (1 5 1 1 1 2 1) (5 1 1 1 2 1 1) (1 1 1 2 1 1 5) (1 1 2 1 1 5 1) (elems 7 sum 12 olaps 42))" "((1 2 1 2 1 1 4) (2 1 2 1 1 4 1) (1 2 1 1 4 1 2) (2 1 1 4 1 2 1) (1 1 4 1 2 1 2) (1 4 1 2 1 2 1) (4 1 2 1 2 1 1) (elems 7 sum 12 olaps 42))" "((1 2 1 2 1 2 3) (2 1 2 1 2 3 1) (1 2 1 2 3 1 2) (2 1 2 3 1 2 1) (1 2 3 1 2 1 2) (2 3 1 2 1 2 1) (3 1 2 1 2 1 2) (elems 7 sum 12 olaps 42))" "((1 2 1 2 1 3 2) (2 1 2 1 3 2 1) (1 2 1 3 2 1 2) (2 1 3 2 1 2 1) (1 3 2 1 2 1 2) (3 2 1 2 1 2 1) (2 1 2 1 2 1 3) (elems 7 sum 12 olaps 42))" "((1 2 1 2 1 4 1) (2 1 2 1 4 1 1) (1 2 1 4 1 1 2) (2 1 4 1 1 2 1) (1 4 1 1 2 1 2) (4 1 1 2 1 2 1) (1 1 2 1 2 1 4) (elems 7 sum 12 olaps 42))" "((1 2 1 2 2 1 3) (2 1 2 2 1 3 1) (1 2 2 1 3 1 2) (2 2 1 3 1 2 1) (2 1 3 1 2 1 2) (1 3 1 2 1 2 2) (3 1 2 1 2 2 1) (elems 7 sum 12 olaps 42))" "((1 2 1 2 2 2 2) (2 1 2 2 2 2 1) (1 2 2 2 2 1 2) (2 2 2 2 1 2 1) (2 2 2 1 2 1 2) (2 2 1 2 1 2 2) (2 1 2 1 2 2 2) (elems 7 sum 12 olaps 42))" "((1 2 1 2 2 3 1) (2 1 2 2 3 1 1) (1 2 2 3 1 1 2) (2 2 3 1 1 2 1) (2 3 1 1 2 1 2) (3 1 1 2 1 2 2) (1 1 2 1 2 2 3) (elems 7 sum 12 olaps 42))" "((1 2 1 2 3 1 2) (2 1 2 3 1 2 1) (1 2 3 1 2 1 2) (2 3 1 2 1 2 1) (3 1 2 1 2 1 2) (1 2 1 2 1 2 3) (2 1 2 1 2 3 1) (elems 7 sum 12 olaps 42))" "((1 2 1 2 3 2 1) (2 1 2 3 2 1 1) (1 2 3 2 1 1 2) (2 3 2 1 1 2 1) (3 2 1 1 2 1 2) (2 1 1 2 1 2 3) (1 1 2 1 2 3 2) (elems 7 sum 12 olaps 42))" "((1 2 1 2 4 1 1) (2 1 2 4 1 1 1) (1 2 4 1 1 1 2) (2 4 1 1 1 2 1) (4 1 1 1 2 1 2) (1 1 1 2 1 2 4) (1 1 2 1 2 4 1) (elems 7 sum 12 olaps 42))" "((1 2 1 3 1 1 3) (2 1 3 1 1 3 1) (1 3 1 1 3 1 2) (3 1 1 3 1 2 1) (1 1 3 1 2 1 3) (1 3 1 2 1 3 1) (3 1 2 1 3 1 1) (elems 7 sum 12 olaps 42))" "((1 2 1 3 1 2 2) (2 1 3 1 2 2 1) (1 3 1 2 2 1 2) (3 1 2 2 1 2 1) (1 2 2 1 2 1 3) (2 2 1 2 1 3 1) (2 1 2 1 3 1 2) (elems 7 sum 12 olaps 42))" "((1 2 1 3 1 3 1) (2 1 3 1 3 1 1) (1 3 1 3 1 1 2) (3 1 3 1 1 2 1) (1 3 1 1 2 1 3) (3 1 1 2 1 3 1) (1 1 2 1 3 1 3) (elems 7 sum 12 olaps 42))" "((1 2 1 3 2 1 2) (2 1 3 2 1 2 1) (1 3 2 1 2 1 2) (3 2 1 2 1 2 1) (2 1 2 1 2 1 3) (1 2 1 2 1 3 2) (2 1 2 1 3 2 1) (elems 7 sum 12 olaps 42))" "((1 2 1 3 2 2 1) (2 1 3 2 2 1 1) (1 3 2 2 1 1 2) (3 2 2 1 1 2 1) (2 2 1 1 2 1 3) (2 1 1 2 1 3 2) (1 1 2 1 3 2 2) (elems 7 sum 12 olaps 42))" "((1 2 1 3 3 1 1) (2 1 3 3 1 1 1) (1 3 3 1 1 1 2) (3 3 1 1 1 2 1) (3 1 1 1 2 1 3) (1 1 1 2 1 3 3) (1 1 2 1 3 3 1) (elems 7 sum 12 olaps 42))" "((1 2 1 4 1 1 2) (2 1 4 1 1 2 1) (1 4 1 1 2 1 2) (4 1 1 2 1 2 1) (1 1 2 1 2 1 4) (1 2 1 2 1 4 1) (2 1 2 1 4 1 1) (elems 7 sum 12 olaps 42))" "((1 2 1 4 1 2 1) (2 1 4 1 2 1 1) (1 4 1 2 1 1 2) (4 1 2 1 1 2 1) (1 2 1 1 2 1 4) (2 1 1 2 1 4 1) (1 1 2 1 4 1 2) (elems 7 sum 12 olaps 42))" "((1 2 1 4 2 1 1) (2 1 4 2 1 1 1) (1 4 2 1 1 1 2) (4 2 1 1 1 2 1) (2 1 1 1 2 1 4) (1 1 1 2 1 4 2) (1 1 2 1 4 2 1) (elems 7 sum 12 olaps 42))" "((1 2 1 5 1 1 1) (2 1 5 1 1 1 1) (1 5 1 1 1 1 2) (5 1 1 1 1 2 1) (1 1 1 1 2 1 5) (1 1 1 2 1 5 1) (1 1 2 1 5 1 1) (elems 7 sum 12 olaps 42))" "((1 2 2 1 1 1 4) (2 2 1 1 1 4 1) (2 1 1 1 4 1 2) (1 1 1 4 1 2 2) (1 1 4 1 2 2 1) (1 4 1 2 2 1 1) (4 1 2 2 1 1 1) (elems 7 sum 12 olaps 42))" "((1 2 2 1 1 2 3) (2 2 1 1 2 3 1) (2 1 1 2 3 1 2) (1 1 2 3 1 2 2) (1 2 3 1 2 2 1) (2 3 1 2 2 1 1) (3 1 2 2 1 1 2) (elems 7 sum 12 olaps 42))" "((1 2 2 1 1 3 2) (2 2 1 1 3 2 1) (2 1 1 3 2 1 2) (1 1 3 2 1 2 2) (1 3 2 1 2 2 1) (3 2 1 2 2 1 1) (2 1 2 2 1 1 3) (elems 7 sum 12 olaps 42))" "((1 2 2 1 1 4 1) (2 2 1 1 4 1 1) (2 1 1 4 1 1 2) (1 1 4 1 1 2 2) (1 4 1 1 2 2 1) (4 1 1 2 2 1 1) (1 1 2 2 1 1 4) (elems 7 sum 12 olaps 42))" "((1 2 2 1 2 1 3) (2 2 1 2 1 3 1) (2 1 2 1 3 1 2) (1 2 1 3 1 2 2) (2 1 3 1 2 2 1) (1 3 1 2 2 1 2) (3 1 2 2 1 2 1) (elems 7 sum 12 olaps 42))" "((1 2 2 1 2 2 2) (2 2 1 2 2 2 1) (2 1 2 2 2 1 2) (1 2 2 2 1 2 2) (2 2 2 1 2 2 1) (2 2 1 2 2 1 2) (2 1 2 2 1 2 2) (elems 7 sum 12 olaps 42))" "((1 2 2 1 2 3 1) (2 2 1 2 3 1 1) (2 1 2 3 1 1 2) (1 2 3 1 1 2 2) (2 3 1 1 2 2 1) (3 1 1 2 2 1 2) (1 1 2 2 1 2 3) (elems 7 sum 12 olaps 42))" "((1 2 2 1 3 1 2) (2 2 1 3 1 2 1) (2 1 3 1 2 1 2) (1 3 1 2 1 2 2) (3 1 2 1 2 2 1) (1 2 1 2 2 1 3) (2 1 2 2 1 3 1) (elems 7 sum 12 olaps 42))" "((1 2 2 1 3 2 1) (2 2 1 3 2 1 1) (2 1 3 2 1 1 2) (1 3 2 1 1 2 2) (3 2 1 1 2 2 1) (2 1 1 2 2 1 3) (1 1 2 2 1 3 2) (elems 7 sum 12 olaps 42))" "((1 2 2 1 4 1 1) (2 2 1 4 1 1 1) (2 1 4 1 1 1 2) (1 4 1 1 1 2 2) (4 1 1 1 2 2 1) (1 1 1 2 2 1 4) (1 1 2 2 1 4 1) (elems 7 sum 12 olaps 42))" "((1 2 2 2 1 1 3) (2 2 2 1 1 3 1) (2 2 1 1 3 1 2) (2 1 1 3 1 2 2) (1 1 3 1 2 2 2) (1 3 1 2 2 2 1) (3 1 2 2 2 1 1) (elems 7 sum 12 olaps 42))" "((1 2 2 2 1 2 2) (2 2 2 1 2 2 1) (2 2 1 2 2 1 2) (2 1 2 2 1 2 2) (1 2 2 1 2 2 2) (2 2 1 2 2 2 1) (2 1 2 2 2 1 2) (elems 7 sum 12 olaps 42))" "((1 2 2 2 1 3 1) (2 2 2 1 3 1 1) (2 2 1 3 1 1 2) (2 1 3 1 1 2 2) (1 3 1 1 2 2 2) (3 1 1 2 2 2 1) (1 1 2 2 2 1 3) (elems 7 sum 12 olaps 42))" "((1 2 2 2 2 1 2) (2 2 2 2 1 2 1) (2 2 2 1 2 1 2) (2 2 1 2 1 2 2) (2 1 2 1 2 2 2) (1 2 1 2 2 2 2) (2 1 2 2 2 2 1) (elems 7 sum 12 olaps 42))" "((1 2 2 2 2 2 1) (2 2 2 2 2 1 1) (2 2 2 2 1 1 2) (2 2 2 1 1 2 2) (2 2 1 1 2 2 2) (2 1 1 2 2 2 2) (1 1 2 2 2 2 2) (elems 7 sum 12 olaps 42))" "((1 2 2 2 3 1 1) (2 2 2 3 1 1 1) (2 2 3 1 1 1 2) (2 3 1 1 1 2 2) (3 1 1 1 2 2 2) (1 1 1 2 2 2 3) (1 1 2 2 2 3 1) (elems 7 sum 12 olaps 42))" "((1 2 2 3 1 1 2) (2 2 3 1 1 2 1) (2 3 1 1 2 1 2) (3 1 1 2 1 2 2) (1 1 2 1 2 2 3) (1 2 1 2 2 3 1) (2 1 2 2 3 1 1) (elems 7 sum 12 olaps 42))" "((1 2 2 3 1 2 1) (2 2 3 1 2 1 1) (2 3 1 2 1 1 2) (3 1 2 1 1 2 2) (1 2 1 1 2 2 3) (2 1 1 2 2 3 1) (1 1 2 2 3 1 2) (elems 7 sum 12 olaps 42))" "((1 2 2 3 2 1 1) (2 2 3 2 1 1 1) (2 3 2 1 1 1 2) (3 2 1 1 1 2 2) (2 1 1 1 2 2 3) (1 1 1 2 2 3 2) (1 1 2 2 3 2 1) (elems 7 sum 12 olaps 42))" "((1 2 2 4 1 1 1) (2 2 4 1 1 1 1) (2 4 1 1 1 1 2) (4 1 1 1 1 2 2) (1 1 1 1 2 2 4) (1 1 1 2 2 4 1) (1 1 2 2 4 1 1) (elems 7 sum 12 olaps 42))" "((1 2 3 1 1 1 3) (2 3 1 1 1 3 1) (3 1 1 1 3 1 2) (1 1 1 3 1 2 3) (1 1 3 1 2 3 1) (1 3 1 2 3 1 1) (3 1 2 3 1 1 1) (elems 7 sum 12 olaps 42))" "((1 2 3 1 1 2 2) (2 3 1 1 2 2 1) (3 1 1 2 2 1 2) (1 1 2 2 1 2 3) (1 2 2 1 2 3 1) (2 2 1 2 3 1 1) (2 1 2 3 1 1 2) (elems 7 sum 12 olaps 42))" "((1 2 3 1 1 3 1) (2 3 1 1 3 1 1) (3 1 1 3 1 1 2) (1 1 3 1 1 2 3) (1 3 1 1 2 3 1) (3 1 1 2 3 1 1) (1 1 2 3 1 1 3) (elems 7 sum 12 olaps 42))" "((1 2 3 1 2 1 2) (2 3 1 2 1 2 1) (3 1 2 1 2 1 2) (1 2 1 2 1 2 3) (2 1 2 1 2 3 1) (1 2 1 2 3 1 2) (2 1 2 3 1 2 1) (elems 7 sum 12 olaps 42))" "((1 2 3 1 2 2 1) (2 3 1 2 2 1 1) (3 1 2 2 1 1 2) (1 2 2 1 1 2 3) (2 2 1 1 2 3 1) (2 1 1 2 3 1 2) (1 1 2 3 1 2 2) (elems 7 sum 12 olaps 42))" "((1 2 3 1 3 1 1) (2 3 1 3 1 1 1) (3 1 3 1 1 1 2) (1 3 1 1 1 2 3) (3 1 1 1 2 3 1) (1 1 1 2 3 1 3) (1 1 2 3 1 3 1) (elems 7 sum 12 olaps 42))" "((1 2 3 2 1 1 2) (2 3 2 1 1 2 1) (3 2 1 1 2 1 2) (2 1 1 2 1 2 3) (1 1 2 1 2 3 2) (1 2 1 2 3 2 1) (2 1 2 3 2 1 1) (elems 7 sum 12 olaps 42))" "((1 2 3 2 1 2 1) (2 3 2 1 2 1 1) (3 2 1 2 1 1 2) (2 1 2 1 1 2 3) (1 2 1 1 2 3 2) (2 1 1 2 3 2 1) (1 1 2 3 2 1 2) (elems 7 sum 12 olaps 42))" "((1 2 3 2 2 1 1) (2 3 2 2 1 1 1) (3 2 2 1 1 1 2) (2 2 1 1 1 2 3) (2 1 1 1 2 3 2) (1 1 1 2 3 2 2) (1 1 2 3 2 2 1) (elems 7 sum 12 olaps 42))" "((1 2 3 3 1 1 1) (2 3 3 1 1 1 1) (3 3 1 1 1 1 2) (3 1 1 1 1 2 3) (1 1 1 1 2 3 3) (1 1 1 2 3 3 1) (1 1 2 3 3 1 1) (elems 7 sum 12 olaps 42))" "((1 2 4 1 1 1 2) (2 4 1 1 1 2 1) (4 1 1 1 2 1 2) (1 1 1 2 1 2 4) (1 1 2 1 2 4 1) (1 2 1 2 4 1 1) (2 1 2 4 1 1 1) (elems 7 sum 12 olaps 42))" "((1 2 4 1 1 2 1) (2 4 1 1 2 1 1) (4 1 1 2 1 1 2) (1 1 2 1 1 2 4) (1 2 1 1 2 4 1) (2 1 1 2 4 1 1) (1 1 2 4 1 1 2) (elems 7 sum 12 olaps 42))" "((1 2 4 1 2 1 1) (2 4 1 2 1 1 1) (4 1 2 1 1 1 2) (1 2 1 1 1 2 4) (2 1 1 1 2 4 1) (1 1 1 2 4 1 2) (1 1 2 4 1 2 1) (elems 7 sum 12 olaps 42))" "((1 2 4 2 1 1 1) (2 4 2 1 1 1 1) (4 2 1 1 1 1 2) (2 1 1 1 1 2 4) (1 1 1 1 2 4 2) (1 1 1 2 4 2 1) (1 1 2 4 2 1 1) (elems 7 sum 12 olaps 42))" "((1 2 5 1 1 1 1) (2 5 1 1 1 1 1) (5 1 1 1 1 1 2) (1 1 1 1 1 2 5) (1 1 1 1 2 5 1) (1 1 1 2 5 1 1) (1 1 2 5 1 1 1) (elems 7 sum 12 olaps 42))" "((1 3 1 1 1 1 4) (3 1 1 1 1 4 1) (1 1 1 1 4 1 3) (1 1 1 4 1 3 1) (1 1 4 1 3 1 1) (1 4 1 3 1 1 1) (4 1 3 1 1 1 1) (elems 7 sum 12 olaps 42))" "((1 3 1 1 1 2 3) (3 1 1 1 2 3 1) (1 1 1 2 3 1 3) (1 1 2 3 1 3 1) (1 2 3 1 3 1 1) (2 3 1 3 1 1 1) (3 1 3 1 1 1 2) (elems 7 sum 12 olaps 42))" "((1 3 1 1 1 3 2) (3 1 1 1 3 2 1) (1 1 1 3 2 1 3) (1 1 3 2 1 3 1) (1 3 2 1 3 1 1) (3 2 1 3 1 1 1) (2 1 3 1 1 1 3) (elems 7 sum 12 olaps 42))" "((1 3 1 1 1 4 1) (3 1 1 1 4 1 1) (1 1 1 4 1 1 3) (1 1 4 1 1 3 1) (1 4 1 1 3 1 1) (4 1 1 3 1 1 1) (1 1 3 1 1 1 4) (elems 7 sum 12 olaps 42))" "((1 3 1 1 2 1 3) (3 1 1 2 1 3 1) (1 1 2 1 3 1 3) (1 2 1 3 1 3 1) (2 1 3 1 3 1 1) (1 3 1 3 1 1 2) (3 1 3 1 1 2 1) (elems 7 sum 12 olaps 42))" "((1 3 1 1 2 2 2) (3 1 1 2 2 2 1) (1 1 2 2 2 1 3) (1 2 2 2 1 3 1) (2 2 2 1 3 1 1) (2 2 1 3 1 1 2) (2 1 3 1 1 2 2) (elems 7 sum 12 olaps 42))" "((1 3 1 1 2 3 1) (3 1 1 2 3 1 1) (1 1 2 3 1 1 3) (1 2 3 1 1 3 1) (2 3 1 1 3 1 1) (3 1 1 3 1 1 2) (1 1 3 1 1 2 3) (elems 7 sum 12 olaps 42))" "((1 3 1 1 3 1 2) (3 1 1 3 1 2 1) (1 1 3 1 2 1 3) (1 3 1 2 1 3 1) (3 1 2 1 3 1 1) (1 2 1 3 1 1 3) (2 1 3 1 1 3 1) (elems 7 sum 12 olaps 42))" "((1 3 1 1 3 2 1) (3 1 1 3 2 1 1) (1 1 3 2 1 1 3) (1 3 2 1 1 3 1) (3 2 1 1 3 1 1) (2 1 1 3 1 1 3) (1 1 3 1 1 3 2) (elems 7 sum 12 olaps 42))" "((1 3 1 1 4 1 1) (3 1 1 4 1 1 1) (1 1 4 1 1 1 3) (1 4 1 1 1 3 1) (4 1 1 1 3 1 1) (1 1 1 3 1 1 4) (1 1 3 1 1 4 1) (elems 7 sum 12 olaps 42))" "((1 3 1 2 1 1 3) (3 1 2 1 1 3 1) (1 2 1 1 3 1 3) (2 1 1 3 1 3 1) (1 1 3 1 3 1 2) (1 3 1 3 1 2 1) (3 1 3 1 2 1 1) (elems 7 sum 12 olaps 42))" "((1 3 1 2 1 2 2) (3 1 2 1 2 2 1) (1 2 1 2 2 1 3) (2 1 2 2 1 3 1) (1 2 2 1 3 1 2) (2 2 1 3 1 2 1) (2 1 3 1 2 1 2) (elems 7 sum 12 olaps 42))" "((1 3 1 2 1 3 1) (3 1 2 1 3 1 1) (1 2 1 3 1 1 3) (2 1 3 1 1 3 1) (1 3 1 1 3 1 2) (3 1 1 3 1 2 1) (1 1 3 1 2 1 3) (elems 7 sum 12 olaps 42))" "((1 3 1 2 2 1 2) (3 1 2 2 1 2 1) (1 2 2 1 2 1 3) (2 2 1 2 1 3 1) (2 1 2 1 3 1 2) (1 2 1 3 1 2 2) (2 1 3 1 2 2 1) (elems 7 sum 12 olaps 42))" "((1 3 1 2 2 2 1) (3 1 2 2 2 1 1) (1 2 2 2 1 1 3) (2 2 2 1 1 3 1) (2 2 1 1 3 1 2) (2 1 1 3 1 2 2) (1 1 3 1 2 2 2) (elems 7 sum 12 olaps 42))" "((1 3 1 2 3 1 1) (3 1 2 3 1 1 1) (1 2 3 1 1 1 3) (2 3 1 1 1 3 1) (3 1 1 1 3 1 2) (1 1 1 3 1 2 3) (1 1 3 1 2 3 1) (elems 7 sum 12 olaps 42))" "((1 3 1 3 1 1 2) (3 1 3 1 1 2 1) (1 3 1 1 2 1 3) (3 1 1 2 1 3 1) (1 1 2 1 3 1 3) (1 2 1 3 1 3 1) (2 1 3 1 3 1 1) (elems 7 sum 12 olaps 42))" "((1 3 1 3 1 2 1) (3 1 3 1 2 1 1) (1 3 1 2 1 1 3) (3 1 2 1 1 3 1) (1 2 1 1 3 1 3) (2 1 1 3 1 3 1) (1 1 3 1 3 1 2) (elems 7 sum 12 olaps 42))" "((1 3 1 3 2 1 1) (3 1 3 2 1 1 1) (1 3 2 1 1 1 3) (3 2 1 1 1 3 1) (2 1 1 1 3 1 3) (1 1 1 3 1 3 2) (1 1 3 1 3 2 1) (elems 7 sum 12 olaps 42))" "((1 3 1 4 1 1 1) (3 1 4 1 1 1 1) (1 4 1 1 1 1 3) (4 1 1 1 1 3 1) (1 1 1 1 3 1 4) (1 1 1 3 1 4 1) (1 1 3 1 4 1 1) (elems 7 sum 12 olaps 42))" "((1 3 2 1 1 1 3) (3 2 1 1 1 3 1) (2 1 1 1 3 1 3) (1 1 1 3 1 3 2) (1 1 3 1 3 2 1) (1 3 1 3 2 1 1) (3 1 3 2 1 1 1) (elems 7 sum 12 olaps 42))" "((1 3 2 1 1 2 2) (3 2 1 1 2 2 1) (2 1 1 2 2 1 3) (1 1 2 2 1 3 2) (1 2 2 1 3 2 1) (2 2 1 3 2 1 1) (2 1 3 2 1 1 2) (elems 7 sum 12 olaps 42))" "((1 3 2 1 1 3 1) (3 2 1 1 3 1 1) (2 1 1 3 1 1 3) (1 1 3 1 1 3 2) (1 3 1 1 3 2 1) (3 1 1 3 2 1 1) (1 1 3 2 1 1 3) (elems 7 sum 12 olaps 42))" "((1 3 2 1 2 1 2) (3 2 1 2 1 2 1) (2 1 2 1 2 1 3) (1 2 1 2 1 3 2) (2 1 2 1 3 2 1) (1 2 1 3 2 1 2) (2 1 3 2 1 2 1) (elems 7 sum 12 olaps 42))" "((1 3 2 1 2 2 1) (3 2 1 2 2 1 1) (2 1 2 2 1 1 3) (1 2 2 1 1 3 2) (2 2 1 1 3 2 1) (2 1 1 3 2 1 2) (1 1 3 2 1 2 2) (elems 7 sum 12 olaps 42))" "((1 3 2 1 3 1 1) (3 2 1 3 1 1 1) (2 1 3 1 1 1 3) (1 3 1 1 1 3 2) (3 1 1 1 3 2 1) (1 1 1 3 2 1 3) (1 1 3 2 1 3 1) (elems 7 sum 12 olaps 42))" "((1 3 2 2 1 1 2) (3 2 2 1 1 2 1) (2 2 1 1 2 1 3) (2 1 1 2 1 3 2) (1 1 2 1 3 2 2) (1 2 1 3 2 2 1) (2 1 3 2 2 1 1) (elems 7 sum 12 olaps 42))" "((1 3 2 2 1 2 1) (3 2 2 1 2 1 1) (2 2 1 2 1 1 3) (2 1 2 1 1 3 2) (1 2 1 1 3 2 2) (2 1 1 3 2 2 1) (1 1 3 2 2 1 2) (elems 7 sum 12 olaps 42))" "((1 3 2 2 2 1 1) (3 2 2 2 1 1 1) (2 2 2 1 1 1 3) (2 2 1 1 1 3 2) (2 1 1 1 3 2 2) (1 1 1 3 2 2 2) (1 1 3 2 2 2 1) (elems 7 sum 12 olaps 42))" "((1 3 2 3 1 1 1) (3 2 3 1 1 1 1) (2 3 1 1 1 1 3) (3 1 1 1 1 3 2) (1 1 1 1 3 2 3) (1 1 1 3 2 3 1) (1 1 3 2 3 1 1) (elems 7 sum 12 olaps 42))" "((1 3 3 1 1 1 2) (3 3 1 1 1 2 1) (3 1 1 1 2 1 3) (1 1 1 2 1 3 3) (1 1 2 1 3 3 1) (1 2 1 3 3 1 1) (2 1 3 3 1 1 1) (elems 7 sum 12 olaps 42))" "((1 3 3 1 1 2 1) (3 3 1 1 2 1 1) (3 1 1 2 1 1 3) (1 1 2 1 1 3 3) (1 2 1 1 3 3 1) (2 1 1 3 3 1 1) (1 1 3 3 1 1 2) (elems 7 sum 12 olaps 42))" "((1 3 3 1 2 1 1) (3 3 1 2 1 1 1) (3 1 2 1 1 1 3) (1 2 1 1 1 3 3) (2 1 1 1 3 3 1) (1 1 1 3 3 1 2) (1 1 3 3 1 2 1) (elems 7 sum 12 olaps 42))" "((1 3 3 2 1 1 1) (3 3 2 1 1 1 1) (3 2 1 1 1 1 3) (2 1 1 1 1 3 3) (1 1 1 1 3 3 2) (1 1 1 3 3 2 1) (1 1 3 3 2 1 1) (elems 7 sum 12 olaps 42))" "((1 3 4 1 1 1 1) (3 4 1 1 1 1 1) (4 1 1 1 1 1 3) (1 1 1 1 1 3 4) (1 1 1 1 3 4 1) (1 1 1 3 4 1 1) (1 1 3 4 1 1 1) (elems 7 sum 12 olaps 42))" "((1 4 1 1 1 1 3) (4 1 1 1 1 3 1) (1 1 1 1 3 1 4) (1 1 1 3 1 4 1) (1 1 3 1 4 1 1) (1 3 1 4 1 1 1) (3 1 4 1 1 1 1) (elems 7 sum 12 olaps 42))" "((1 4 1 1 1 2 2) (4 1 1 1 2 2 1) (1 1 1 2 2 1 4) (1 1 2 2 1 4 1) (1 2 2 1 4 1 1) (2 2 1 4 1 1 1) (2 1 4 1 1 1 2) (elems 7 sum 12 olaps 42))" "((1 4 1 1 1 3 1) (4 1 1 1 3 1 1) (1 1 1 3 1 1 4) (1 1 3 1 1 4 1) (1 3 1 1 4 1 1) (3 1 1 4 1 1 1) (1 1 4 1 1 1 3) (elems 7 sum 12 olaps 42))" "((1 4 1 1 2 1 2) (4 1 1 2 1 2 1) (1 1 2 1 2 1 4) (1 2 1 2 1 4 1) (2 1 2 1 4 1 1) (1 2 1 4 1 1 2) (2 1 4 1 1 2 1) (elems 7 sum 12 olaps 42))" "((1 4 1 1 2 2 1) (4 1 1 2 2 1 1) (1 1 2 2 1 1 4) (1 2 2 1 1 4 1) (2 2 1 1 4 1 1) (2 1 1 4 1 1 2) (1 1 4 1 1 2 2) (elems 7 sum 12 olaps 42))" "((1 4 1 1 3 1 1) (4 1 1 3 1 1 1) (1 1 3 1 1 1 4) (1 3 1 1 1 4 1) (3 1 1 1 4 1 1) (1 1 1 4 1 1 3) (1 1 4 1 1 3 1) (elems 7 sum 12 olaps 42))" "((1 4 1 2 1 1 2) (4 1 2 1 1 2 1) (1 2 1 1 2 1 4) (2 1 1 2 1 4 1) (1 1 2 1 4 1 2) (1 2 1 4 1 2 1) (2 1 4 1 2 1 1) (elems 7 sum 12 olaps 42))" "((1 4 1 2 1 2 1) (4 1 2 1 2 1 1) (1 2 1 2 1 1 4) (2 1 2 1 1 4 1) (1 2 1 1 4 1 2) (2 1 1 4 1 2 1) (1 1 4 1 2 1 2) (elems 7 sum 12 olaps 42))" "((1 4 1 2 2 1 1) (4 1 2 2 1 1 1) (1 2 2 1 1 1 4) (2 2 1 1 1 4 1) (2 1 1 1 4 1 2) (1 1 1 4 1 2 2) (1 1 4 1 2 2 1) (elems 7 sum 12 olaps 42))" "((1 4 1 3 1 1 1) (4 1 3 1 1 1 1) (1 3 1 1 1 1 4) (3 1 1 1 1 4 1) (1 1 1 1 4 1 3) (1 1 1 4 1 3 1) (1 1 4 1 3 1 1) (elems 7 sum 12 olaps 42))" "((1 4 2 1 1 1 2) (4 2 1 1 1 2 1) (2 1 1 1 2 1 4) (1 1 1 2 1 4 2) (1 1 2 1 4 2 1) (1 2 1 4 2 1 1) (2 1 4 2 1 1 1) (elems 7 sum 12 olaps 42))" "((1 4 2 1 1 2 1) (4 2 1 1 2 1 1) (2 1 1 2 1 1 4) (1 1 2 1 1 4 2) (1 2 1 1 4 2 1) (2 1 1 4 2 1 1) (1 1 4 2 1 1 2) (elems 7 sum 12 olaps 42))" "((1 4 2 1 2 1 1) (4 2 1 2 1 1 1) (2 1 2 1 1 1 4) (1 2 1 1 1 4 2) (2 1 1 1 4 2 1) (1 1 1 4 2 1 2) (1 1 4 2 1 2 1) (elems 7 sum 12 olaps 42))" "((1 4 2 2 1 1 1) (4 2 2 1 1 1 1) (2 2 1 1 1 1 4) (2 1 1 1 1 4 2) (1 1 1 1 4 2 2) (1 1 1 4 2 2 1) (1 1 4 2 2 1 1) (elems 7 sum 12 olaps 42))" "((1 4 3 1 1 1 1) (4 3 1 1 1 1 1) (3 1 1 1 1 1 4) (1 1 1 1 1 4 3) (1 1 1 1 4 3 1) (1 1 1 4 3 1 1) (1 1 4 3 1 1 1) (elems 7 sum 12 olaps 42))" "((1 5 1 1 1 1 2) (5 1 1 1 1 2 1) (1 1 1 1 2 1 5) (1 1 1 2 1 5 1) (1 1 2 1 5 1 1) (1 2 1 5 1 1 1) (2 1 5 1 1 1 1) (elems 7 sum 12 olaps 42))" "((1 5 1 1 1 2 1) (5 1 1 1 2 1 1) (1 1 1 2 1 1 5) (1 1 2 1 1 5 1) (1 2 1 1 5 1 1) (2 1 1 5 1 1 1) (1 1 5 1 1 1 2) (elems 7 sum 12 olaps 42))" "((1 5 1 1 2 1 1) (5 1 1 2 1 1 1) (1 1 2 1 1 1 5) (1 2 1 1 1 5 1) (2 1 1 1 5 1 1) (1 1 1 5 1 1 2) (1 1 5 1 1 2 1) (elems 7 sum 12 olaps 42))" "((1 5 1 2 1 1 1) (5 1 2 1 1 1 1) (1 2 1 1 1 1 5) (2 1 1 1 1 5 1) (1 1 1 1 5 1 2) (1 1 1 5 1 2 1) (1 1 5 1 2 1 1) (elems 7 sum 12 olaps 42))" "((1 5 2 1 1 1 1) (5 2 1 1 1 1 1) (2 1 1 1 1 1 5) (1 1 1 1 1 5 2) (1 1 1 1 5 2 1) (1 1 1 5 2 1 1) (1 1 5 2 1 1 1) (elems 7 sum 12 olaps 42))" "((1 6 1 1 1 1 1) (6 1 1 1 1 1 1) (1 1 1 1 1 1 6) (1 1 1 1 1 6 1) (1 1 1 1 6 1 1) (1 1 1 6 1 1 1) (1 1 6 1 1 1 1) (elems 7 sum 12 olaps 42))" "((2 1 1 1 1 1 5) (1 1 1 1 1 5 2) (1 1 1 1 5 2 1) (1 1 1 5 2 1 1) (1 1 5 2 1 1 1) (1 5 2 1 1 1 1) (5 2 1 1 1 1 1) (elems 7 sum 12 olaps 42))" "((2 1 1 1 1 2 4) (1 1 1 1 2 4 2) (1 1 1 2 4 2 1) (1 1 2 4 2 1 1) (1 2 4 2 1 1 1) (2 4 2 1 1 1 1) (4 2 1 1 1 1 2) (elems 7 sum 12 olaps 42))" "((2 1 1 1 1 3 3) (1 1 1 1 3 3 2) (1 1 1 3 3 2 1) (1 1 3 3 2 1 1) (1 3 3 2 1 1 1) (3 3 2 1 1 1 1) (3 2 1 1 1 1 3) (elems 7 sum 12 olaps 42))" "((2 1 1 1 1 4 2) (1 1 1 1 4 2 2) (1 1 1 4 2 2 1) (1 1 4 2 2 1 1) (1 4 2 2 1 1 1) (4 2 2 1 1 1 1) (2 2 1 1 1 1 4) (elems 7 sum 12 olaps 42))" "((2 1 1 1 1 5 1) (1 1 1 1 5 1 2) (1 1 1 5 1 2 1) (1 1 5 1 2 1 1) (1 5 1 2 1 1 1) (5 1 2 1 1 1 1) (1 2 1 1 1 1 5) (elems 7 sum 12 olaps 42))" "((2 1 1 1 2 1 4) (1 1 1 2 1 4 2) (1 1 2 1 4 2 1) (1 2 1 4 2 1 1) (2 1 4 2 1 1 1) (1 4 2 1 1 1 2) (4 2 1 1 1 2 1) (elems 7 sum 12 olaps 42))" "((2 1 1 1 2 2 3) (1 1 1 2 2 3 2) (1 1 2 2 3 2 1) (1 2 2 3 2 1 1) (2 2 3 2 1 1 1) (2 3 2 1 1 1 2) (3 2 1 1 1 2 2) (elems 7 sum 12 olaps 42))" "((2 1 1 1 2 3 2) (1 1 1 2 3 2 2) (1 1 2 3 2 2 1) (1 2 3 2 2 1 1) (2 3 2 2 1 1 1) (3 2 2 1 1 1 2) (2 2 1 1 1 2 3) (elems 7 sum 12 olaps 42))" "((2 1 1 1 2 4 1) (1 1 1 2 4 1 2) (1 1 2 4 1 2 1) (1 2 4 1 2 1 1) (2 4 1 2 1 1 1) (4 1 2 1 1 1 2) (1 2 1 1 1 2 4) (elems 7 sum 12 olaps 42))" "((2 1 1 1 3 1 3) (1 1 1 3 1 3 2) (1 1 3 1 3 2 1) (1 3 1 3 2 1 1) (3 1 3 2 1 1 1) (1 3 2 1 1 1 3) (3 2 1 1 1 3 1) (elems 7 sum 12 olaps 42))" "((2 1 1 1 3 2 2) (1 1 1 3 2 2 2) (1 1 3 2 2 2 1) (1 3 2 2 2 1 1) (3 2 2 2 1 1 1) (2 2 2 1 1 1 3) (2 2 1 1 1 3 2) (elems 7 sum 12 olaps 42))" "((2 1 1 1 3 3 1) (1 1 1 3 3 1 2) (1 1 3 3 1 2 1) (1 3 3 1 2 1 1) (3 3 1 2 1 1 1) (3 1 2 1 1 1 3) (1 2 1 1 1 3 3) (elems 7 sum 12 olaps 42))" "((2 1 1 1 4 1 2) (1 1 1 4 1 2 2) (1 1 4 1 2 2 1) (1 4 1 2 2 1 1) (4 1 2 2 1 1 1) (1 2 2 1 1 1 4) (2 2 1 1 1 4 1) (elems 7 sum 12 olaps 42))" "((2 1 1 1 4 2 1) (1 1 1 4 2 1 2) (1 1 4 2 1 2 1) (1 4 2 1 2 1 1) (4 2 1 2 1 1 1) (2 1 2 1 1 1 4) (1 2 1 1 1 4 2) (elems 7 sum 12 olaps 42))" "((2 1 1 1 5 1 1) (1 1 1 5 1 1 2) (1 1 5 1 1 2 1) (1 5 1 1 2 1 1) (5 1 1 2 1 1 1) (1 1 2 1 1 1 5) (1 2 1 1 1 5 1) (elems 7 sum 12 olaps 42))" "((2 1 1 2 1 1 4) (1 1 2 1 1 4 2) (1 2 1 1 4 2 1) (2 1 1 4 2 1 1) (1 1 4 2 1 1 2) (1 4 2 1 1 2 1) (4 2 1 1 2 1 1) (elems 7 sum 12 olaps 42))" "((2 1 1 2 1 2 3) (1 1 2 1 2 3 2) (1 2 1 2 3 2 1) (2 1 2 3 2 1 1) (1 2 3 2 1 1 2) (2 3 2 1 1 2 1) (3 2 1 1 2 1 2) (elems 7 sum 12 olaps 42))" "((2 1 1 2 1 3 2) (1 1 2 1 3 2 2) (1 2 1 3 2 2 1) (2 1 3 2 2 1 1) (1 3 2 2 1 1 2) (3 2 2 1 1 2 1) (2 2 1 1 2 1 3) (elems 7 sum 12 olaps 42))" "((2 1 1 2 1 4 1) (1 1 2 1 4 1 2) (1 2 1 4 1 2 1) (2 1 4 1 2 1 1) (1 4 1 2 1 1 2) (4 1 2 1 1 2 1) (1 2 1 1 2 1 4) (elems 7 sum 12 olaps 42))" "((2 1 1 2 2 1 3) (1 1 2 2 1 3 2) (1 2 2 1 3 2 1) (2 2 1 3 2 1 1) (2 1 3 2 1 1 2) (1 3 2 1 1 2 2) (3 2 1 1 2 2 1) (elems 7 sum 12 olaps 42))" "((2 1 1 2 2 2 2) (1 1 2 2 2 2 2) (1 2 2 2 2 2 1) (2 2 2 2 2 1 1) (2 2 2 2 1 1 2) (2 2 2 1 1 2 2) (2 2 1 1 2 2 2) (elems 7 sum 12 olaps 42))" "((2 1 1 2 2 3 1) (1 1 2 2 3 1 2) (1 2 2 3 1 2 1) (2 2 3 1 2 1 1) (2 3 1 2 1 1 2) (3 1 2 1 1 2 2) (1 2 1 1 2 2 3) (elems 7 sum 12 olaps 42))" "((2 1 1 2 3 1 2) (1 1 2 3 1 2 2) (1 2 3 1 2 2 1) (2 3 1 2 2 1 1) (3 1 2 2 1 1 2) (1 2 2 1 1 2 3) (2 2 1 1 2 3 1) (elems 7 sum 12 olaps 42))" "((2 1 1 2 3 2 1) (1 1 2 3 2 1 2) (1 2 3 2 1 2 1) (2 3 2 1 2 1 1) (3 2 1 2 1 1 2) (2 1 2 1 1 2 3) (1 2 1 1 2 3 2) (elems 7 sum 12 olaps 42))" "((2 1 1 2 4 1 1) (1 1 2 4 1 1 2) (1 2 4 1 1 2 1) (2 4 1 1 2 1 1) (4 1 1 2 1 1 2) (1 1 2 1 1 2 4) (1 2 1 1 2 4 1) (elems 7 sum 12 olaps 42))" "((2 1 1 3 1 1 3) (1 1 3 1 1 3 2) (1 3 1 1 3 2 1) (3 1 1 3 2 1 1) (1 1 3 2 1 1 3) (1 3 2 1 1 3 1) (3 2 1 1 3 1 1) (elems 7 sum 12 olaps 42))" "((2 1 1 3 1 2 2) (1 1 3 1 2 2 2) (1 3 1 2 2 2 1) (3 1 2 2 2 1 1) (1 2 2 2 1 1 3) (2 2 2 1 1 3 1) (2 2 1 1 3 1 2) (elems 7 sum 12 olaps 42))" "((2 1 1 3 1 3 1) (1 1 3 1 3 1 2) (1 3 1 3 1 2 1) (3 1 3 1 2 1 1) (1 3 1 2 1 1 3) (3 1 2 1 1 3 1) (1 2 1 1 3 1 3) (elems 7 sum 12 olaps 42))" "((2 1 1 3 2 1 2) (1 1 3 2 1 2 2) (1 3 2 1 2 2 1) (3 2 1 2 2 1 1) (2 1 2 2 1 1 3) (1 2 2 1 1 3 2) (2 2 1 1 3 2 1) (elems 7 sum 12 olaps 42))" "((2 1 1 3 2 2 1) (1 1 3 2 2 1 2) (1 3 2 2 1 2 1) (3 2 2 1 2 1 1) (2 2 1 2 1 1 3) (2 1 2 1 1 3 2) (1 2 1 1 3 2 2) (elems 7 sum 12 olaps 42))" "((2 1 1 3 3 1 1) (1 1 3 3 1 1 2) (1 3 3 1 1 2 1) (3 3 1 1 2 1 1) (3 1 1 2 1 1 3) (1 1 2 1 1 3 3) (1 2 1 1 3 3 1) (elems 7 sum 12 olaps 42))" "((2 1 1 4 1 1 2) (1 1 4 1 1 2 2) (1 4 1 1 2 2 1) (4 1 1 2 2 1 1) (1 1 2 2 1 1 4) (1 2 2 1 1 4 1) (2 2 1 1 4 1 1) (elems 7 sum 12 olaps 42))" "((2 1 1 4 1 2 1) (1 1 4 1 2 1 2) (1 4 1 2 1 2 1) (4 1 2 1 2 1 1) (1 2 1 2 1 1 4) (2 1 2 1 1 4 1) (1 2 1 1 4 1 2) (elems 7 sum 12 olaps 42))" "((2 1 1 4 2 1 1) (1 1 4 2 1 1 2) (1 4 2 1 1 2 1) (4 2 1 1 2 1 1) (2 1 1 2 1 1 4) (1 1 2 1 1 4 2) (1 2 1 1 4 2 1) (elems 7 sum 12 olaps 42))" "((2 1 1 5 1 1 1) (1 1 5 1 1 1 2) (1 5 1 1 1 2 1) (5 1 1 1 2 1 1) (1 1 1 2 1 1 5) (1 1 2 1 1 5 1) (1 2 1 1 5 1 1) (elems 7 sum 12 olaps 42))" "((2 1 2 1 1 1 4) (1 2 1 1 1 4 2) (2 1 1 1 4 2 1) (1 1 1 4 2 1 2) (1 1 4 2 1 2 1) (1 4 2 1 2 1 1) (4 2 1 2 1 1 1) (elems 7 sum 12 olaps 42))" "((2 1 2 1 1 2 3) (1 2 1 1 2 3 2) (2 1 1 2 3 2 1) (1 1 2 3 2 1 2) (1 2 3 2 1 2 1) (2 3 2 1 2 1 1) (3 2 1 2 1 1 2) (elems 7 sum 12 olaps 42))" "((2 1 2 1 1 3 2) (1 2 1 1 3 2 2) (2 1 1 3 2 2 1) (1 1 3 2 2 1 2) (1 3 2 2 1 2 1) (3 2 2 1 2 1 1) (2 2 1 2 1 1 3) (elems 7 sum 12 olaps 42))" "((2 1 2 1 1 4 1) (1 2 1 1 4 1 2) (2 1 1 4 1 2 1) (1 1 4 1 2 1 2) (1 4 1 2 1 2 1) (4 1 2 1 2 1 1) (1 2 1 2 1 1 4) (elems 7 sum 12 olaps 42))" "((2 1 2 1 2 1 3) (1 2 1 2 1 3 2) (2 1 2 1 3 2 1) (1 2 1 3 2 1 2) (2 1 3 2 1 2 1) (1 3 2 1 2 1 2) (3 2 1 2 1 2 1) (elems 7 sum 12 olaps 42))" "((2 1 2 1 2 2 2) (1 2 1 2 2 2 2) (2 1 2 2 2 2 1) (1 2 2 2 2 1 2) (2 2 2 2 1 2 1) (2 2 2 1 2 1 2) (2 2 1 2 1 2 2) (elems 7 sum 12 olaps 42))" "((2 1 2 1 2 3 1) (1 2 1 2 3 1 2) (2 1 2 3 1 2 1) (1 2 3 1 2 1 2) (2 3 1 2 1 2 1) (3 1 2 1 2 1 2) (1 2 1 2 1 2 3) (elems 7 sum 12 olaps 42))" "((2 1 2 1 3 1 2) (1 2 1 3 1 2 2) (2 1 3 1 2 2 1) (1 3 1 2 2 1 2) (3 1 2 2 1 2 1) (1 2 2 1 2 1 3) (2 2 1 2 1 3 1) (elems 7 sum 12 olaps 42))" "((2 1 2 1 3 2 1) (1 2 1 3 2 1 2) (2 1 3 2 1 2 1) (1 3 2 1 2 1 2) (3 2 1 2 1 2 1) (2 1 2 1 2 1 3) (1 2 1 2 1 3 2) (elems 7 sum 12 olaps 42))" "((2 1 2 1 4 1 1) (1 2 1 4 1 1 2) (2 1 4 1 1 2 1) (1 4 1 1 2 1 2) (4 1 1 2 1 2 1) (1 1 2 1 2 1 4) (1 2 1 2 1 4 1) (elems 7 sum 12 olaps 42))" "((2 1 2 2 1 1 3) (1 2 2 1 1 3 2) (2 2 1 1 3 2 1) (2 1 1 3 2 1 2) (1 1 3 2 1 2 2) (1 3 2 1 2 2 1) (3 2 1 2 2 1 1) (elems 7 sum 12 olaps 42))" "((2 1 2 2 1 2 2) (1 2 2 1 2 2 2) (2 2 1 2 2 2 1) (2 1 2 2 2 1 2) (1 2 2 2 1 2 2) (2 2 2 1 2 2 1) (2 2 1 2 2 1 2) (elems 7 sum 12 olaps 42))" "((2 1 2 2 1 3 1) (1 2 2 1 3 1 2) (2 2 1 3 1 2 1) (2 1 3 1 2 1 2) (1 3 1 2 1 2 2) (3 1 2 1 2 2 1) (1 2 1 2 2 1 3) (elems 7 sum 12 olaps 42))" "((2 1 2 2 2 1 2) (1 2 2 2 1 2 2) (2 2 2 1 2 2 1) (2 2 1 2 2 1 2) (2 1 2 2 1 2 2) (1 2 2 1 2 2 2) (2 2 1 2 2 2 1) (elems 7 sum 12 olaps 42))" "((2 1 2 2 2 2 1) (1 2 2 2 2 1 2) (2 2 2 2 1 2 1) (2 2 2 1 2 1 2) (2 2 1 2 1 2 2) (2 1 2 1 2 2 2) (1 2 1 2 2 2 2) (elems 7 sum 12 olaps 42))" "((2 1 2 2 3 1 1) (1 2 2 3 1 1 2) (2 2 3 1 1 2 1) (2 3 1 1 2 1 2) (3 1 1 2 1 2 2) (1 1 2 1 2 2 3) (1 2 1 2 2 3 1) (elems 7 sum 12 olaps 42))" "((2 1 2 3 1 1 2) (1 2 3 1 1 2 2) (2 3 1 1 2 2 1) (3 1 1 2 2 1 2) (1 1 2 2 1 2 3) (1 2 2 1 2 3 1) (2 2 1 2 3 1 1) (elems 7 sum 12 olaps 42))" "((2 1 2 3 1 2 1) (1 2 3 1 2 1 2) (2 3 1 2 1 2 1) (3 1 2 1 2 1 2) (1 2 1 2 1 2 3) (2 1 2 1 2 3 1) (1 2 1 2 3 1 2) (elems 7 sum 12 olaps 42))" "((2 1 2 3 2 1 1) (1 2 3 2 1 1 2) (2 3 2 1 1 2 1) (3 2 1 1 2 1 2) (2 1 1 2 1 2 3) (1 1 2 1 2 3 2) (1 2 1 2 3 2 1) (elems 7 sum 12 olaps 42))" "((2 1 2 4 1 1 1) (1 2 4 1 1 1 2) (2 4 1 1 1 2 1) (4 1 1 1 2 1 2) (1 1 1 2 1 2 4) (1 1 2 1 2 4 1) (1 2 1 2 4 1 1) (elems 7 sum 12 olaps 42))" "((2 1 3 1 1 1 3) (1 3 1 1 1 3 2) (3 1 1 1 3 2 1) (1 1 1 3 2 1 3) (1 1 3 2 1 3 1) (1 3 2 1 3 1 1) (3 2 1 3 1 1 1) (elems 7 sum 12 olaps 42))" "((2 1 3 1 1 2 2) (1 3 1 1 2 2 2) (3 1 1 2 2 2 1) (1 1 2 2 2 1 3) (1 2 2 2 1 3 1) (2 2 2 1 3 1 1) (2 2 1 3 1 1 2) (elems 7 sum 12 olaps 42))" "((2 1 3 1 1 3 1) (1 3 1 1 3 1 2) (3 1 1 3 1 2 1) (1 1 3 1 2 1 3) (1 3 1 2 1 3 1) (3 1 2 1 3 1 1) (1 2 1 3 1 1 3) (elems 7 sum 12 olaps 42))" "((2 1 3 1 2 1 2) (1 3 1 2 1 2 2) (3 1 2 1 2 2 1) (1 2 1 2 2 1 3) (2 1 2 2 1 3 1) (1 2 2 1 3 1 2) (2 2 1 3 1 2 1) (elems 7 sum 12 olaps 42))" "((2 1 3 1 2 2 1) (1 3 1 2 2 1 2) (3 1 2 2 1 2 1) (1 2 2 1 2 1 3) (2 2 1 2 1 3 1) (2 1 2 1 3 1 2) (1 2 1 3 1 2 2) (elems 7 sum 12 olaps 42))" "((2 1 3 1 3 1 1) (1 3 1 3 1 1 2) (3 1 3 1 1 2 1) (1 3 1 1 2 1 3) (3 1 1 2 1 3 1) (1 1 2 1 3 1 3) (1 2 1 3 1 3 1) (elems 7 sum 12 olaps 42))" "((2 1 3 2 1 1 2) (1 3 2 1 1 2 2) (3 2 1 1 2 2 1) (2 1 1 2 2 1 3) (1 1 2 2 1 3 2) (1 2 2 1 3 2 1) (2 2 1 3 2 1 1) (elems 7 sum 12 olaps 42))" "((2 1 3 2 1 2 1) (1 3 2 1 2 1 2) (3 2 1 2 1 2 1) (2 1 2 1 2 1 3) (1 2 1 2 1 3 2) (2 1 2 1 3 2 1) (1 2 1 3 2 1 2) (elems 7 sum 12 olaps 42))" "((2 1 3 2 2 1 1) (1 3 2 2 1 1 2) (3 2 2 1 1 2 1) (2 2 1 1 2 1 3) (2 1 1 2 1 3 2) (1 1 2 1 3 2 2) (1 2 1 3 2 2 1) (elems 7 sum 12 olaps 42))" "((2 1 3 3 1 1 1) (1 3 3 1 1 1 2) (3 3 1 1 1 2 1) (3 1 1 1 2 1 3) (1 1 1 2 1 3 3) (1 1 2 1 3 3 1) (1 2 1 3 3 1 1) (elems 7 sum 12 olaps 42))" "((2 1 4 1 1 1 2) (1 4 1 1 1 2 2) (4 1 1 1 2 2 1) (1 1 1 2 2 1 4) (1 1 2 2 1 4 1) (1 2 2 1 4 1 1) (2 2 1 4 1 1 1) (elems 7 sum 12 olaps 42))" "((2 1 4 1 1 2 1) (1 4 1 1 2 1 2) (4 1 1 2 1 2 1) (1 1 2 1 2 1 4) (1 2 1 2 1 4 1) (2 1 2 1 4 1 1) (1 2 1 4 1 1 2) (elems 7 sum 12 olaps 42))" "((2 1 4 1 2 1 1) (1 4 1 2 1 1 2) (4 1 2 1 1 2 1) (1 2 1 1 2 1 4) (2 1 1 2 1 4 1) (1 1 2 1 4 1 2) (1 2 1 4 1 2 1) (elems 7 sum 12 olaps 42))" "((2 1 4 2 1 1 1) (1 4 2 1 1 1 2) (4 2 1 1 1 2 1) (2 1 1 1 2 1 4) (1 1 1 2 1 4 2) (1 1 2 1 4 2 1) (1 2 1 4 2 1 1) (elems 7 sum 12 olaps 42))" "((2 1 5 1 1 1 1) (1 5 1 1 1 1 2) (5 1 1 1 1 2 1) (1 1 1 1 2 1 5) (1 1 1 2 1 5 1) (1 1 2 1 5 1 1) (1 2 1 5 1 1 1) (elems 7 sum 12 olaps 42))" "((2 2 1 1 1 1 4) (2 1 1 1 1 4 2) (1 1 1 1 4 2 2) (1 1 1 4 2 2 1) (1 1 4 2 2 1 1) (1 4 2 2 1 1 1) (4 2 2 1 1 1 1) (elems 7 sum 12 olaps 42))" "((2 2 1 1 1 2 3) (2 1 1 1 2 3 2) (1 1 1 2 3 2 2) (1 1 2 3 2 2 1) (1 2 3 2 2 1 1) (2 3 2 2 1 1 1) (3 2 2 1 1 1 2) (elems 7 sum 12 olaps 42))" "((2 2 1 1 1 3 2) (2 1 1 1 3 2 2) (1 1 1 3 2 2 2) (1 1 3 2 2 2 1) (1 3 2 2 2 1 1) (3 2 2 2 1 1 1) (2 2 2 1 1 1 3) (elems 7 sum 12 olaps 42))" "((2 2 1 1 1 4 1) (2 1 1 1 4 1 2) (1 1 1 4 1 2 2) (1 1 4 1 2 2 1) (1 4 1 2 2 1 1) (4 1 2 2 1 1 1) (1 2 2 1 1 1 4) (elems 7 sum 12 olaps 42))" "((2 2 1 1 2 1 3) (2 1 1 2 1 3 2) (1 1 2 1 3 2 2) (1 2 1 3 2 2 1) (2 1 3 2 2 1 1) (1 3 2 2 1 1 2) (3 2 2 1 1 2 1) (elems 7 sum 12 olaps 42))" "((2 2 1 1 2 2 2) (2 1 1 2 2 2 2) (1 1 2 2 2 2 2) (1 2 2 2 2 2 1) (2 2 2 2 2 1 1) (2 2 2 2 1 1 2) (2 2 2 1 1 2 2) (elems 7 sum 12 olaps 42))" "((2 2 1 1 2 3 1) (2 1 1 2 3 1 2) (1 1 2 3 1 2 2) (1 2 3 1 2 2 1) (2 3 1 2 2 1 1) (3 1 2 2 1 1 2) (1 2 2 1 1 2 3) (elems 7 sum 12 olaps 42))" "((2 2 1 1 3 1 2) (2 1 1 3 1 2 2) (1 1 3 1 2 2 2) (1 3 1 2 2 2 1) (3 1 2 2 2 1 1) (1 2 2 2 1 1 3) (2 2 2 1 1 3 1) (elems 7 sum 12 olaps 42))" "((2 2 1 1 3 2 1) (2 1 1 3 2 1 2) (1 1 3 2 1 2 2) (1 3 2 1 2 2 1) (3 2 1 2 2 1 1) (2 1 2 2 1 1 3) (1 2 2 1 1 3 2) (elems 7 sum 12 olaps 42))" "((2 2 1 1 4 1 1) (2 1 1 4 1 1 2) (1 1 4 1 1 2 2) (1 4 1 1 2 2 1) (4 1 1 2 2 1 1) (1 1 2 2 1 1 4) (1 2 2 1 1 4 1) (elems 7 sum 12 olaps 42))" "((2 2 1 2 1 1 3) (2 1 2 1 1 3 2) (1 2 1 1 3 2 2) (2 1 1 3 2 2 1) (1 1 3 2 2 1 2) (1 3 2 2 1 2 1) (3 2 2 1 2 1 1) (elems 7 sum 12 olaps 42))" "((2 2 1 2 1 2 2) (2 1 2 1 2 2 2) (1 2 1 2 2 2 2) (2 1 2 2 2 2 1) (1 2 2 2 2 1 2) (2 2 2 2 1 2 1) (2 2 2 1 2 1 2) (elems 7 sum 12 olaps 42))" "((2 2 1 2 1 3 1) (2 1 2 1 3 1 2) (1 2 1 3 1 2 2) (2 1 3 1 2 2 1) (1 3 1 2 2 1 2) (3 1 2 2 1 2 1) (1 2 2 1 2 1 3) (elems 7 sum 12 olaps 42))" "((2 2 1 2 2 1 2) (2 1 2 2 1 2 2) (1 2 2 1 2 2 2) (2 2 1 2 2 2 1) (2 1 2 2 2 1 2) (1 2 2 2 1 2 2) (2 2 2 1 2 2 1) (elems 7 sum 12 olaps 42))" "((2 2 1 2 2 2 1) (2 1 2 2 2 1 2) (1 2 2 2 1 2 2) (2 2 2 1 2 2 1) (2 2 1 2 2 1 2) (2 1 2 2 1 2 2) (1 2 2 1 2 2 2) (elems 7 sum 12 olaps 42))" "((2 2 1 2 3 1 1) (2 1 2 3 1 1 2) (1 2 3 1 1 2 2) (2 3 1 1 2 2 1) (3 1 1 2 2 1 2) (1 1 2 2 1 2 3) (1 2 2 1 2 3 1) (elems 7 sum 12 olaps 42))" "((2 2 1 3 1 1 2) (2 1 3 1 1 2 2) (1 3 1 1 2 2 2) (3 1 1 2 2 2 1) (1 1 2 2 2 1 3) (1 2 2 2 1 3 1) (2 2 2 1 3 1 1) (elems 7 sum 12 olaps 42))" "((2 2 1 3 1 2 1) (2 1 3 1 2 1 2) (1 3 1 2 1 2 2) (3 1 2 1 2 2 1) (1 2 1 2 2 1 3) (2 1 2 2 1 3 1) (1 2 2 1 3 1 2) (elems 7 sum 12 olaps 42))" "((2 2 1 3 2 1 1) (2 1 3 2 1 1 2) (1 3 2 1 1 2 2) (3 2 1 1 2 2 1) (2 1 1 2 2 1 3) (1 1 2 2 1 3 2) (1 2 2 1 3 2 1) (elems 7 sum 12 olaps 42))" "((2 2 1 4 1 1 1) (2 1 4 1 1 1 2) (1 4 1 1 1 2 2) (4 1 1 1 2 2 1) (1 1 1 2 2 1 4) (1 1 2 2 1 4 1) (1 2 2 1 4 1 1) (elems 7 sum 12 olaps 42))" "((2 2 2 1 1 1 3) (2 2 1 1 1 3 2) (2 1 1 1 3 2 2) (1 1 1 3 2 2 2) (1 1 3 2 2 2 1) (1 3 2 2 2 1 1) (3 2 2 2 1 1 1) (elems 7 sum 12 olaps 42))" "((2 2 2 1 1 2 2) (2 2 1 1 2 2 2) (2 1 1 2 2 2 2) (1 1 2 2 2 2 2) (1 2 2 2 2 2 1) (2 2 2 2 2 1 1) (2 2 2 2 1 1 2) (elems 7 sum 12 olaps 42))" "((2 2 2 1 1 3 1) (2 2 1 1 3 1 2) (2 1 1 3 1 2 2) (1 1 3 1 2 2 2) (1 3 1 2 2 2 1) (3 1 2 2 2 1 1) (1 2 2 2 1 1 3) (elems 7 sum 12 olaps 42))" "((2 2 2 1 2 1 2) (2 2 1 2 1 2 2) (2 1 2 1 2 2 2) (1 2 1 2 2 2 2) (2 1 2 2 2 2 1) (1 2 2 2 2 1 2) (2 2 2 2 1 2 1) (elems 7 sum 12 olaps 42))" "((2 2 2 1 2 2 1) (2 2 1 2 2 1 2) (2 1 2 2 1 2 2) (1 2 2 1 2 2 2) (2 2 1 2 2 2 1) (2 1 2 2 2 1 2) (1 2 2 2 1 2 2) (elems 7 sum 12 olaps 42))" "((2 2 2 1 3 1 1) (2 2 1 3 1 1 2) (2 1 3 1 1 2 2) (1 3 1 1 2 2 2) (3 1 1 2 2 2 1) (1 1 2 2 2 1 3) (1 2 2 2 1 3 1) (elems 7 sum 12 olaps 42))" "((2 2 2 2 1 1 2) (2 2 2 1 1 2 2) (2 2 1 1 2 2 2) (2 1 1 2 2 2 2) (1 1 2 2 2 2 2) (1 2 2 2 2 2 1) (2 2 2 2 2 1 1) (elems 7 sum 12 olaps 42))" "((2 2 2 2 1 2 1) (2 2 2 1 2 1 2) (2 2 1 2 1 2 2) (2 1 2 1 2 2 2) (1 2 1 2 2 2 2) (2 1 2 2 2 2 1) (1 2 2 2 2 1 2) (elems 7 sum 12 olaps 42))" "((2 2 2 2 2 1 1) (2 2 2 2 1 1 2) (2 2 2 1 1 2 2) (2 2 1 1 2 2 2) (2 1 1 2 2 2 2) (1 1 2 2 2 2 2) (1 2 2 2 2 2 1) (elems 7 sum 12 olaps 42))" "((2 2 2 3 1 1 1) (2 2 3 1 1 1 2) (2 3 1 1 1 2 2) (3 1 1 1 2 2 2) (1 1 1 2 2 2 3) (1 1 2 2 2 3 1) (1 2 2 2 3 1 1) (elems 7 sum 12 olaps 42))" "((2 2 3 1 1 1 2) (2 3 1 1 1 2 2) (3 1 1 1 2 2 2) (1 1 1 2 2 2 3) (1 1 2 2 2 3 1) (1 2 2 2 3 1 1) (2 2 2 3 1 1 1) (elems 7 sum 12 olaps 42))" "((2 2 3 1 1 2 1) (2 3 1 1 2 1 2) (3 1 1 2 1 2 2) (1 1 2 1 2 2 3) (1 2 1 2 2 3 1) (2 1 2 2 3 1 1) (1 2 2 3 1 1 2) (elems 7 sum 12 olaps 42))" "((2 2 3 1 2 1 1) (2 3 1 2 1 1 2) (3 1 2 1 1 2 2) (1 2 1 1 2 2 3) (2 1 1 2 2 3 1) (1 1 2 2 3 1 2) (1 2 2 3 1 2 1) (elems 7 sum 12 olaps 42))" "((2 2 3 2 1 1 1) (2 3 2 1 1 1 2) (3 2 1 1 1 2 2) (2 1 1 1 2 2 3) (1 1 1 2 2 3 2) (1 1 2 2 3 2 1) (1 2 2 3 2 1 1) (elems 7 sum 12 olaps 42))" "((2 2 4 1 1 1 1) (2 4 1 1 1 1 2) (4 1 1 1 1 2 2) (1 1 1 1 2 2 4) (1 1 1 2 2 4 1) (1 1 2 2 4 1 1) (1 2 2 4 1 1 1) (elems 7 sum 12 olaps 42))" "((2 3 1 1 1 1 3) (3 1 1 1 1 3 2) (1 1 1 1 3 2 3) (1 1 1 3 2 3 1) (1 1 3 2 3 1 1) (1 3 2 3 1 1 1) (3 2 3 1 1 1 1) (elems 7 sum 12 olaps 42))" "((2 3 1 1 1 2 2) (3 1 1 1 2 2 2) (1 1 1 2 2 2 3) (1 1 2 2 2 3 1) (1 2 2 2 3 1 1) (2 2 2 3 1 1 1) (2 2 3 1 1 1 2) (elems 7 sum 12 olaps 42))" "((2 3 1 1 1 3 1) (3 1 1 1 3 1 2) (1 1 1 3 1 2 3) (1 1 3 1 2 3 1) (1 3 1 2 3 1 1) (3 1 2 3 1 1 1) (1 2 3 1 1 1 3) (elems 7 sum 12 olaps 42))" "((2 3 1 1 2 1 2) (3 1 1 2 1 2 2) (1 1 2 1 2 2 3) (1 2 1 2 2 3 1) (2 1 2 2 3 1 1) (1 2 2 3 1 1 2) (2 2 3 1 1 2 1) (elems 7 sum 12 olaps 42))" "((2 3 1 1 2 2 1) (3 1 1 2 2 1 2) (1 1 2 2 1 2 3) (1 2 2 1 2 3 1) (2 2 1 2 3 1 1) (2 1 2 3 1 1 2) (1 2 3 1 1 2 2) (elems 7 sum 12 olaps 42))" "((2 3 1 1 3 1 1) (3 1 1 3 1 1 2) (1 1 3 1 1 2 3) (1 3 1 1 2 3 1) (3 1 1 2 3 1 1) (1 1 2 3 1 1 3) (1 2 3 1 1 3 1) (elems 7 sum 12 olaps 42))" "((2 3 1 2 1 1 2) (3 1 2 1 1 2 2) (1 2 1 1 2 2 3) (2 1 1 2 2 3 1) (1 1 2 2 3 1 2) (1 2 2 3 1 2 1) (2 2 3 1 2 1 1) (elems 7 sum 12 olaps 42))" "((2 3 1 2 1 2 1) (3 1 2 1 2 1 2) (1 2 1 2 1 2 3) (2 1 2 1 2 3 1) (1 2 1 2 3 1 2) (2 1 2 3 1 2 1) (1 2 3 1 2 1 2) (elems 7 sum 12 olaps 42))" "((2 3 1 2 2 1 1) (3 1 2 2 1 1 2) (1 2 2 1 1 2 3) (2 2 1 1 2 3 1) (2 1 1 2 3 1 2) (1 1 2 3 1 2 2) (1 2 3 1 2 2 1) (elems 7 sum 12 olaps 42))" "((2 3 1 3 1 1 1) (3 1 3 1 1 1 2) (1 3 1 1 1 2 3) (3 1 1 1 2 3 1) (1 1 1 2 3 1 3) (1 1 2 3 1 3 1) (1 2 3 1 3 1 1) (elems 7 sum 12 olaps 42))" "((2 3 2 1 1 1 2) (3 2 1 1 1 2 2) (2 1 1 1 2 2 3) (1 1 1 2 2 3 2) (1 1 2 2 3 2 1) (1 2 2 3 2 1 1) (2 2 3 2 1 1 1) (elems 7 sum 12 olaps 42))" "((2 3 2 1 1 2 1) (3 2 1 1 2 1 2) (2 1 1 2 1 2 3) (1 1 2 1 2 3 2) (1 2 1 2 3 2 1) (2 1 2 3 2 1 1) (1 2 3 2 1 1 2) (elems 7 sum 12 olaps 42))" "((2 3 2 1 2 1 1) (3 2 1 2 1 1 2) (2 1 2 1 1 2 3) (1 2 1 1 2 3 2) (2 1 1 2 3 2 1) (1 1 2 3 2 1 2) (1 2 3 2 1 2 1) (elems 7 sum 12 olaps 42))" "((2 3 2 2 1 1 1) (3 2 2 1 1 1 2) (2 2 1 1 1 2 3) (2 1 1 1 2 3 2) (1 1 1 2 3 2 2) (1 1 2 3 2 2 1) (1 2 3 2 2 1 1) (elems 7 sum 12 olaps 42))" "((2 3 3 1 1 1 1) (3 3 1 1 1 1 2) (3 1 1 1 1 2 3) (1 1 1 1 2 3 3) (1 1 1 2 3 3 1) (1 1 2 3 3 1 1) (1 2 3 3 1 1 1) (elems 7 sum 12 olaps 42))" "((2 4 1 1 1 1 2) (4 1 1 1 1 2 2) (1 1 1 1 2 2 4) (1 1 1 2 2 4 1) (1 1 2 2 4 1 1) (1 2 2 4 1 1 1) (2 2 4 1 1 1 1) (elems 7 sum 12 olaps 42))" "((2 4 1 1 1 2 1) (4 1 1 1 2 1 2) (1 1 1 2 1 2 4) (1 1 2 1 2 4 1) (1 2 1 2 4 1 1) (2 1 2 4 1 1 1) (1 2 4 1 1 1 2) (elems 7 sum 12 olaps 42))" "((2 4 1 1 2 1 1) (4 1 1 2 1 1 2) (1 1 2 1 1 2 4) (1 2 1 1 2 4 1) (2 1 1 2 4 1 1) (1 1 2 4 1 1 2) (1 2 4 1 1 2 1) (elems 7 sum 12 olaps 42))" "((2 4 1 2 1 1 1) (4 1 2 1 1 1 2) (1 2 1 1 1 2 4) (2 1 1 1 2 4 1) (1 1 1 2 4 1 2) (1 1 2 4 1 2 1) (1 2 4 1 2 1 1) (elems 7 sum 12 olaps 42))" "((2 4 2 1 1 1 1) (4 2 1 1 1 1 2) (2 1 1 1 1 2 4) (1 1 1 1 2 4 2) (1 1 1 2 4 2 1) (1 1 2 4 2 1 1) (1 2 4 2 1 1 1) (elems 7 sum 12 olaps 42))" "((2 5 1 1 1 1 1) (5 1 1 1 1 1 2) (1 1 1 1 1 2 5) (1 1 1 1 2 5 1) (1 1 1 2 5 1 1) (1 1 2 5 1 1 1) (1 2 5 1 1 1 1) (elems 7 sum 12 olaps 42))" "((3 1 1 1 1 1 4) (1 1 1 1 1 4 3) (1 1 1 1 4 3 1) (1 1 1 4 3 1 1) (1 1 4 3 1 1 1) (1 4 3 1 1 1 1) (4 3 1 1 1 1 1) (elems 7 sum 12 olaps 42))" "((3 1 1 1 1 2 3) (1 1 1 1 2 3 3) (1 1 1 2 3 3 1) (1 1 2 3 3 1 1) (1 2 3 3 1 1 1) (2 3 3 1 1 1 1) (3 3 1 1 1 1 2) (elems 7 sum 12 olaps 42))" "((3 1 1 1 1 3 2) (1 1 1 1 3 2 3) (1 1 1 3 2 3 1) (1 1 3 2 3 1 1) (1 3 2 3 1 1 1) (3 2 3 1 1 1 1) (2 3 1 1 1 1 3) (elems 7 sum 12 olaps 42))" "((3 1 1 1 1 4 1) (1 1 1 1 4 1 3) (1 1 1 4 1 3 1) (1 1 4 1 3 1 1) (1 4 1 3 1 1 1) (4 1 3 1 1 1 1) (1 3 1 1 1 1 4) (elems 7 sum 12 olaps 42))" "((3 1 1 1 2 1 3) (1 1 1 2 1 3 3) (1 1 2 1 3 3 1) (1 2 1 3 3 1 1) (2 1 3 3 1 1 1) (1 3 3 1 1 1 2) (3 3 1 1 1 2 1) (elems 7 sum 12 olaps 42))" "((3 1 1 1 2 2 2) (1 1 1 2 2 2 3) (1 1 2 2 2 3 1) (1 2 2 2 3 1 1) (2 2 2 3 1 1 1) (2 2 3 1 1 1 2) (2 3 1 1 1 2 2) (elems 7 sum 12 olaps 42))" "((3 1 1 1 2 3 1) (1 1 1 2 3 1 3) (1 1 2 3 1 3 1) (1 2 3 1 3 1 1) (2 3 1 3 1 1 1) (3 1 3 1 1 1 2) (1 3 1 1 1 2 3) (elems 7 sum 12 olaps 42))" "((3 1 1 1 3 1 2) (1 1 1 3 1 2 3) (1 1 3 1 2 3 1) (1 3 1 2 3 1 1) (3 1 2 3 1 1 1) (1 2 3 1 1 1 3) (2 3 1 1 1 3 1) (elems 7 sum 12 olaps 42))" "((3 1 1 1 3 2 1) (1 1 1 3 2 1 3) (1 1 3 2 1 3 1) (1 3 2 1 3 1 1) (3 2 1 3 1 1 1) (2 1 3 1 1 1 3) (1 3 1 1 1 3 2) (elems 7 sum 12 olaps 42))" "((3 1 1 1 4 1 1) (1 1 1 4 1 1 3) (1 1 4 1 1 3 1) (1 4 1 1 3 1 1) (4 1 1 3 1 1 1) (1 1 3 1 1 1 4) (1 3 1 1 1 4 1) (elems 7 sum 12 olaps 42))" "((3 1 1 2 1 1 3) (1 1 2 1 1 3 3) (1 2 1 1 3 3 1) (2 1 1 3 3 1 1) (1 1 3 3 1 1 2) (1 3 3 1 1 2 1) (3 3 1 1 2 1 1) (elems 7 sum 12 olaps 42))" "((3 1 1 2 1 2 2) (1 1 2 1 2 2 3) (1 2 1 2 2 3 1) (2 1 2 2 3 1 1) (1 2 2 3 1 1 2) (2 2 3 1 1 2 1) (2 3 1 1 2 1 2) (elems 7 sum 12 olaps 42))" "((3 1 1 2 1 3 1) (1 1 2 1 3 1 3) (1 2 1 3 1 3 1) (2 1 3 1 3 1 1) (1 3 1 3 1 1 2) (3 1 3 1 1 2 1) (1 3 1 1 2 1 3) (elems 7 sum 12 olaps 42))" "((3 1 1 2 2 1 2) (1 1 2 2 1 2 3) (1 2 2 1 2 3 1) (2 2 1 2 3 1 1) (2 1 2 3 1 1 2) (1 2 3 1 1 2 2) (2 3 1 1 2 2 1) (elems 7 sum 12 olaps 42))" "((3 1 1 2 2 2 1) (1 1 2 2 2 1 3) (1 2 2 2 1 3 1) (2 2 2 1 3 1 1) (2 2 1 3 1 1 2) (2 1 3 1 1 2 2) (1 3 1 1 2 2 2) (elems 7 sum 12 olaps 42))" "((3 1 1 2 3 1 1) (1 1 2 3 1 1 3) (1 2 3 1 1 3 1) (2 3 1 1 3 1 1) (3 1 1 3 1 1 2) (1 1 3 1 1 2 3) (1 3 1 1 2 3 1) (elems 7 sum 12 olaps 42))" "((3 1 1 3 1 1 2) (1 1 3 1 1 2 3) (1 3 1 1 2 3 1) (3 1 1 2 3 1 1) (1 1 2 3 1 1 3) (1 2 3 1 1 3 1) (2 3 1 1 3 1 1) (elems 7 sum 12 olaps 42))" "((3 1 1 3 1 2 1) (1 1 3 1 2 1 3) (1 3 1 2 1 3 1) (3 1 2 1 3 1 1) (1 2 1 3 1 1 3) (2 1 3 1 1 3 1) (1 3 1 1 3 1 2) (elems 7 sum 12 olaps 42))" "((3 1 1 3 2 1 1) (1 1 3 2 1 1 3) (1 3 2 1 1 3 1) (3 2 1 1 3 1 1) (2 1 1 3 1 1 3) (1 1 3 1 1 3 2) (1 3 1 1 3 2 1) (elems 7 sum 12 olaps 42))" "((3 1 1 4 1 1 1) (1 1 4 1 1 1 3) (1 4 1 1 1 3 1) (4 1 1 1 3 1 1) (1 1 1 3 1 1 4) (1 1 3 1 1 4 1) (1 3 1 1 4 1 1) (elems 7 sum 12 olaps 42))" "((3 1 2 1 1 1 3) (1 2 1 1 1 3 3) (2 1 1 1 3 3 1) (1 1 1 3 3 1 2) (1 1 3 3 1 2 1) (1 3 3 1 2 1 1) (3 3 1 2 1 1 1) (elems 7 sum 12 olaps 42))" "((3 1 2 1 1 2 2) (1 2 1 1 2 2 3) (2 1 1 2 2 3 1) (1 1 2 2 3 1 2) (1 2 2 3 1 2 1) (2 2 3 1 2 1 1) (2 3 1 2 1 1 2) (elems 7 sum 12 olaps 42))" "((3 1 2 1 1 3 1) (1 2 1 1 3 1 3) (2 1 1 3 1 3 1) (1 1 3 1 3 1 2) (1 3 1 3 1 2 1) (3 1 3 1 2 1 1) (1 3 1 2 1 1 3) (elems 7 sum 12 olaps 42))" "((3 1 2 1 2 1 2) (1 2 1 2 1 2 3) (2 1 2 1 2 3 1) (1 2 1 2 3 1 2) (2 1 2 3 1 2 1) (1 2 3 1 2 1 2) (2 3 1 2 1 2 1) (elems 7 sum 12 olaps 42))" "((3 1 2 1 2 2 1) (1 2 1 2 2 1 3) (2 1 2 2 1 3 1) (1 2 2 1 3 1 2) (2 2 1 3 1 2 1) (2 1 3 1 2 1 2) (1 3 1 2 1 2 2) (elems 7 sum 12 olaps 42))" "((3 1 2 1 3 1 1) (1 2 1 3 1 1 3) (2 1 3 1 1 3 1) (1 3 1 1 3 1 2) (3 1 1 3 1 2 1) (1 1 3 1 2 1 3) (1 3 1 2 1 3 1) (elems 7 sum 12 olaps 42))" "((3 1 2 2 1 1 2) (1 2 2 1 1 2 3) (2 2 1 1 2 3 1) (2 1 1 2 3 1 2) (1 1 2 3 1 2 2) (1 2 3 1 2 2 1) (2 3 1 2 2 1 1) (elems 7 sum 12 olaps 42))" "((3 1 2 2 1 2 1) (1 2 2 1 2 1 3) (2 2 1 2 1 3 1) (2 1 2 1 3 1 2) (1 2 1 3 1 2 2) (2 1 3 1 2 2 1) (1 3 1 2 2 1 2) (elems 7 sum 12 olaps 42))" "((3 1 2 2 2 1 1) (1 2 2 2 1 1 3) (2 2 2 1 1 3 1) (2 2 1 1 3 1 2) (2 1 1 3 1 2 2) (1 1 3 1 2 2 2) (1 3 1 2 2 2 1) (elems 7 sum 12 olaps 42))" "((3 1 2 3 1 1 1) (1 2 3 1 1 1 3) (2 3 1 1 1 3 1) (3 1 1 1 3 1 2) (1 1 1 3 1 2 3) (1 1 3 1 2 3 1) (1 3 1 2 3 1 1) (elems 7 sum 12 olaps 42))" "((3 1 3 1 1 1 2) (1 3 1 1 1 2 3) (3 1 1 1 2 3 1) (1 1 1 2 3 1 3) (1 1 2 3 1 3 1) (1 2 3 1 3 1 1) (2 3 1 3 1 1 1) (elems 7 sum 12 olaps 42))" "((3 1 3 1 1 2 1) (1 3 1 1 2 1 3) (3 1 1 2 1 3 1) (1 1 2 1 3 1 3) (1 2 1 3 1 3 1) (2 1 3 1 3 1 1) (1 3 1 3 1 1 2) (elems 7 sum 12 olaps 42))" "((3 1 3 1 2 1 1) (1 3 1 2 1 1 3) (3 1 2 1 1 3 1) (1 2 1 1 3 1 3) (2 1 1 3 1 3 1) (1 1 3 1 3 1 2) (1 3 1 3 1 2 1) (elems 7 sum 12 olaps 42))" "((3 1 3 2 1 1 1) (1 3 2 1 1 1 3) (3 2 1 1 1 3 1) (2 1 1 1 3 1 3) (1 1 1 3 1 3 2) (1 1 3 1 3 2 1) (1 3 1 3 2 1 1) (elems 7 sum 12 olaps 42))" "((3 1 4 1 1 1 1) (1 4 1 1 1 1 3) (4 1 1 1 1 3 1) (1 1 1 1 3 1 4) (1 1 1 3 1 4 1) (1 1 3 1 4 1 1) (1 3 1 4 1 1 1) (elems 7 sum 12 olaps 42))" "((3 2 1 1 1 1 3) (2 1 1 1 1 3 3) (1 1 1 1 3 3 2) (1 1 1 3 3 2 1) (1 1 3 3 2 1 1) (1 3 3 2 1 1 1) (3 3 2 1 1 1 1) (elems 7 sum 12 olaps 42))" "((3 2 1 1 1 2 2) (2 1 1 1 2 2 3) (1 1 1 2 2 3 2) (1 1 2 2 3 2 1) (1 2 2 3 2 1 1) (2 2 3 2 1 1 1) (2 3 2 1 1 1 2) (elems 7 sum 12 olaps 42))" "((3 2 1 1 1 3 1) (2 1 1 1 3 1 3) (1 1 1 3 1 3 2) (1 1 3 1 3 2 1) (1 3 1 3 2 1 1) (3 1 3 2 1 1 1) (1 3 2 1 1 1 3) (elems 7 sum 12 olaps 42))" "((3 2 1 1 2 1 2) (2 1 1 2 1 2 3) (1 1 2 1 2 3 2) (1 2 1 2 3 2 1) (2 1 2 3 2 1 1) (1 2 3 2 1 1 2) (2 3 2 1 1 2 1) (elems 7 sum 12 olaps 42))" "((3 2 1 1 2 2 1) (2 1 1 2 2 1 3) (1 1 2 2 1 3 2) (1 2 2 1 3 2 1) (2 2 1 3 2 1 1) (2 1 3 2 1 1 2) (1 3 2 1 1 2 2) (elems 7 sum 12 olaps 42))" "((3 2 1 1 3 1 1) (2 1 1 3 1 1 3) (1 1 3 1 1 3 2) (1 3 1 1 3 2 1) (3 1 1 3 2 1 1) (1 1 3 2 1 1 3) (1 3 2 1 1 3 1) (elems 7 sum 12 olaps 42))" "((3 2 1 2 1 1 2) (2 1 2 1 1 2 3) (1 2 1 1 2 3 2) (2 1 1 2 3 2 1) (1 1 2 3 2 1 2) (1 2 3 2 1 2 1) (2 3 2 1 2 1 1) (elems 7 sum 12 olaps 42))" "((3 2 1 2 1 2 1) (2 1 2 1 2 1 3) (1 2 1 2 1 3 2) (2 1 2 1 3 2 1) (1 2 1 3 2 1 2) (2 1 3 2 1 2 1) (1 3 2 1 2 1 2) (elems 7 sum 12 olaps 42))" "((3 2 1 2 2 1 1) (2 1 2 2 1 1 3) (1 2 2 1 1 3 2) (2 2 1 1 3 2 1) (2 1 1 3 2 1 2) (1 1 3 2 1 2 2) (1 3 2 1 2 2 1) (elems 7 sum 12 olaps 42))" "((3 2 1 3 1 1 1) (2 1 3 1 1 1 3) (1 3 1 1 1 3 2) (3 1 1 1 3 2 1) (1 1 1 3 2 1 3) (1 1 3 2 1 3 1) (1 3 2 1 3 1 1) (elems 7 sum 12 olaps 42))" "((3 2 2 1 1 1 2) (2 2 1 1 1 2 3) (2 1 1 1 2 3 2) (1 1 1 2 3 2 2) (1 1 2 3 2 2 1) (1 2 3 2 2 1 1) (2 3 2 2 1 1 1) (elems 7 sum 12 olaps 42))" "((3 2 2 1 1 2 1) (2 2 1 1 2 1 3) (2 1 1 2 1 3 2) (1 1 2 1 3 2 2) (1 2 1 3 2 2 1) (2 1 3 2 2 1 1) (1 3 2 2 1 1 2) (elems 7 sum 12 olaps 42))" "((3 2 2 1 2 1 1) (2 2 1 2 1 1 3) (2 1 2 1 1 3 2) (1 2 1 1 3 2 2) (2 1 1 3 2 2 1) (1 1 3 2 2 1 2) (1 3 2 2 1 2 1) (elems 7 sum 12 olaps 42))" "((3 2 2 2 1 1 1) (2 2 2 1 1 1 3) (2 2 1 1 1 3 2) (2 1 1 1 3 2 2) (1 1 1 3 2 2 2) (1 1 3 2 2 2 1) (1 3 2 2 2 1 1) (elems 7 sum 12 olaps 42))" "((3 2 3 1 1 1 1) (2 3 1 1 1 1 3) (3 1 1 1 1 3 2) (1 1 1 1 3 2 3) (1 1 1 3 2 3 1) (1 1 3 2 3 1 1) (1 3 2 3 1 1 1) (elems 7 sum 12 olaps 42))" "((3 3 1 1 1 1 2) (3 1 1 1 1 2 3) (1 1 1 1 2 3 3) (1 1 1 2 3 3 1) (1 1 2 3 3 1 1) (1 2 3 3 1 1 1) (2 3 3 1 1 1 1) (elems 7 sum 12 olaps 42))" "((3 3 1 1 1 2 1) (3 1 1 1 2 1 3) (1 1 1 2 1 3 3) (1 1 2 1 3 3 1) (1 2 1 3 3 1 1) (2 1 3 3 1 1 1) (1 3 3 1 1 1 2) (elems 7 sum 12 olaps 42))" "((3 3 1 1 2 1 1) (3 1 1 2 1 1 3) (1 1 2 1 1 3 3) (1 2 1 1 3 3 1) (2 1 1 3 3 1 1) (1 1 3 3 1 1 2) (1 3 3 1 1 2 1) (elems 7 sum 12 olaps 42))" "((3 3 1 2 1 1 1) (3 1 2 1 1 1 3) (1 2 1 1 1 3 3) (2 1 1 1 3 3 1) (1 1 1 3 3 1 2) (1 1 3 3 1 2 1) (1 3 3 1 2 1 1) (elems 7 sum 12 olaps 42))" "((3 3 2 1 1 1 1) (3 2 1 1 1 1 3) (2 1 1 1 1 3 3) (1 1 1 1 3 3 2) (1 1 1 3 3 2 1) (1 1 3 3 2 1 1) (1 3 3 2 1 1 1) (elems 7 sum 12 olaps 42))" "((3 4 1 1 1 1 1) (4 1 1 1 1 1 3) (1 1 1 1 1 3 4) (1 1 1 1 3 4 1) (1 1 1 3 4 1 1) (1 1 3 4 1 1 1) (1 3 4 1 1 1 1) (elems 7 sum 12 olaps 42))" "((4 1 1 1 1 1 3) (1 1 1 1 1 3 4) (1 1 1 1 3 4 1) (1 1 1 3 4 1 1) (1 1 3 4 1 1 1) (1 3 4 1 1 1 1) (3 4 1 1 1 1 1) (elems 7 sum 12 olaps 42))" "((4 1 1 1 1 2 2) (1 1 1 1 2 2 4) (1 1 1 2 2 4 1) (1 1 2 2 4 1 1) (1 2 2 4 1 1 1) (2 2 4 1 1 1 1) (2 4 1 1 1 1 2) (elems 7 sum 12 olaps 42))" "((4 1 1 1 1 3 1) (1 1 1 1 3 1 4) (1 1 1 3 1 4 1) (1 1 3 1 4 1 1) (1 3 1 4 1 1 1) (3 1 4 1 1 1 1) (1 4 1 1 1 1 3) (elems 7 sum 12 olaps 42))" "((4 1 1 1 2 1 2) (1 1 1 2 1 2 4) (1 1 2 1 2 4 1) (1 2 1 2 4 1 1) (2 1 2 4 1 1 1) (1 2 4 1 1 1 2) (2 4 1 1 1 2 1) (elems 7 sum 12 olaps 42))" "((4 1 1 1 2 2 1) (1 1 1 2 2 1 4) (1 1 2 2 1 4 1) (1 2 2 1 4 1 1) (2 2 1 4 1 1 1) (2 1 4 1 1 1 2) (1 4 1 1 1 2 2) (elems 7 sum 12 olaps 42))" "((4 1 1 1 3 1 1) (1 1 1 3 1 1 4) (1 1 3 1 1 4 1) (1 3 1 1 4 1 1) (3 1 1 4 1 1 1) (1 1 4 1 1 1 3) (1 4 1 1 1 3 1) (elems 7 sum 12 olaps 42))" "((4 1 1 2 1 1 2) (1 1 2 1 1 2 4) (1 2 1 1 2 4 1) (2 1 1 2 4 1 1) (1 1 2 4 1 1 2) (1 2 4 1 1 2 1) (2 4 1 1 2 1 1) (elems 7 sum 12 olaps 42))" "((4 1 1 2 1 2 1) (1 1 2 1 2 1 4) (1 2 1 2 1 4 1) (2 1 2 1 4 1 1) (1 2 1 4 1 1 2) (2 1 4 1 1 2 1) (1 4 1 1 2 1 2) (elems 7 sum 12 olaps 42))" "((4 1 1 2 2 1 1) (1 1 2 2 1 1 4) (1 2 2 1 1 4 1) (2 2 1 1 4 1 1) (2 1 1 4 1 1 2) (1 1 4 1 1 2 2) (1 4 1 1 2 2 1) (elems 7 sum 12 olaps 42))" "((4 1 1 3 1 1 1) (1 1 3 1 1 1 4) (1 3 1 1 1 4 1) (3 1 1 1 4 1 1) (1 1 1 4 1 1 3) (1 1 4 1 1 3 1) (1 4 1 1 3 1 1) (elems 7 sum 12 olaps 42))" "((4 1 2 1 1 1 2) (1 2 1 1 1 2 4) (2 1 1 1 2 4 1) (1 1 1 2 4 1 2) (1 1 2 4 1 2 1) (1 2 4 1 2 1 1) (2 4 1 2 1 1 1) (elems 7 sum 12 olaps 42))" "((4 1 2 1 1 2 1) (1 2 1 1 2 1 4) (2 1 1 2 1 4 1) (1 1 2 1 4 1 2) (1 2 1 4 1 2 1) (2 1 4 1 2 1 1) (1 4 1 2 1 1 2) (elems 7 sum 12 olaps 42))" "((4 1 2 1 2 1 1) (1 2 1 2 1 1 4) (2 1 2 1 1 4 1) (1 2 1 1 4 1 2) (2 1 1 4 1 2 1) (1 1 4 1 2 1 2) (1 4 1 2 1 2 1) (elems 7 sum 12 olaps 42))" "((4 1 2 2 1 1 1) (1 2 2 1 1 1 4) (2 2 1 1 1 4 1) (2 1 1 1 4 1 2) (1 1 1 4 1 2 2) (1 1 4 1 2 2 1) (1 4 1 2 2 1 1) (elems 7 sum 12 olaps 42))" "((4 1 3 1 1 1 1) (1 3 1 1 1 1 4) (3 1 1 1 1 4 1) (1 1 1 1 4 1 3) (1 1 1 4 1 3 1) (1 1 4 1 3 1 1) (1 4 1 3 1 1 1) (elems 7 sum 12 olaps 42))" "((4 2 1 1 1 1 2) (2 1 1 1 1 2 4) (1 1 1 1 2 4 2) (1 1 1 2 4 2 1) (1 1 2 4 2 1 1) (1 2 4 2 1 1 1) (2 4 2 1 1 1 1) (elems 7 sum 12 olaps 42))" "((4 2 1 1 1 2 1) (2 1 1 1 2 1 4) (1 1 1 2 1 4 2) (1 1 2 1 4 2 1) (1 2 1 4 2 1 1) (2 1 4 2 1 1 1) (1 4 2 1 1 1 2) (elems 7 sum 12 olaps 42))" "((4 2 1 1 2 1 1) (2 1 1 2 1 1 4) (1 1 2 1 1 4 2) (1 2 1 1 4 2 1) (2 1 1 4 2 1 1) (1 1 4 2 1 1 2) (1 4 2 1 1 2 1) (elems 7 sum 12 olaps 42))" "((4 2 1 2 1 1 1) (2 1 2 1 1 1 4) (1 2 1 1 1 4 2) (2 1 1 1 4 2 1) (1 1 1 4 2 1 2) (1 1 4 2 1 2 1) (1 4 2 1 2 1 1) (elems 7 sum 12 olaps 42))" "((4 2 2 1 1 1 1) (2 2 1 1 1 1 4) (2 1 1 1 1 4 2) (1 1 1 1 4 2 2) (1 1 1 4 2 2 1) (1 1 4 2 2 1 1) (1 4 2 2 1 1 1) (elems 7 sum 12 olaps 42))" "((4 3 1 1 1 1 1) (3 1 1 1 1 1 4) (1 1 1 1 1 4 3) (1 1 1 1 4 3 1) (1 1 1 4 3 1 1) (1 1 4 3 1 1 1) (1 4 3 1 1 1 1) (elems 7 sum 12 olaps 42))" "((5 1 1 1 1 1 2) (1 1 1 1 1 2 5) (1 1 1 1 2 5 1) (1 1 1 2 5 1 1) (1 1 2 5 1 1 1) (1 2 5 1 1 1 1) (2 5 1 1 1 1 1) (elems 7 sum 12 olaps 42))" "((5 1 1 1 1 2 1) (1 1 1 1 2 1 5) (1 1 1 2 1 5 1) (1 1 2 1 5 1 1) (1 2 1 5 1 1 1) (2 1 5 1 1 1 1) (1 5 1 1 1 1 2) (elems 7 sum 12 olaps 42))" "((5 1 1 1 2 1 1) (1 1 1 2 1 1 5) (1 1 2 1 1 5 1) (1 2 1 1 5 1 1) (2 1 1 5 1 1 1) (1 1 5 1 1 1 2) (1 5 1 1 1 2 1) (elems 7 sum 12 olaps 42))" "((5 1 1 2 1 1 1) (1 1 2 1 1 1 5) (1 2 1 1 1 5 1) (2 1 1 1 5 1 1) (1 1 1 5 1 1 2) (1 1 5 1 1 2 1) (1 5 1 1 2 1 1) (elems 7 sum 12 olaps 42))" "((5 1 2 1 1 1 1) (1 2 1 1 1 1 5) (2 1 1 1 1 5 1) (1 1 1 1 5 1 2) (1 1 1 5 1 2 1) (1 1 5 1 2 1 1) (1 5 1 2 1 1 1) (elems 7 sum 12 olaps 42))" "((5 2 1 1 1 1 1) (2 1 1 1 1 1 5) (1 1 1 1 1 5 2) (1 1 1 1 5 2 1) (1 1 1 5 2 1 1) (1 1 5 2 1 1 1) (1 5 2 1 1 1 1) (elems 7 sum 12 olaps 42))" "((6 1 1 1 1 1 1) (1 1 1 1 1 1 6) (1 1 1 1 1 6 1) (1 1 1 1 6 1 1) (1 1 1 6 1 1 1) (1 1 6 1 1 1 1) (1 6 1 1 1 1 1) (elems 7 sum 12 olaps 42))" "((1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (elems 8 sum 8 olaps 56))" "((1 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 1) (elems 8 sum 10 olaps 56))" "((1 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 2) (elems 8 sum 10 olaps 56))" "((1 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 3) (elems 8 sum 10 olaps 56))" "((1 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 1) (elems 8 sum 10 olaps 56))" "((1 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 2) (elems 8 sum 10 olaps 56))" "((1 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 1) (elems 8 sum 10 olaps 56))" "((1 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 1) (elems 8 sum 10 olaps 56))" "((1 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 2) (elems 8 sum 10 olaps 56))" "((1 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 1) (elems 8 sum 10 olaps 56))" "((1 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 1) (elems 8 sum 10 olaps 56))" "((1 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 1) (elems 8 sum 10 olaps 56))" "((1 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 2) (elems 8 sum 10 olaps 56))" "((1 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 1) (elems 8 sum 10 olaps 56))" "((1 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 1) (elems 8 sum 10 olaps 56))" "((1 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 1) (elems 8 sum 10 olaps 56))" "((1 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 1) (elems 8 sum 10 olaps 56))" "((1 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 2) (elems 8 sum 10 olaps 56))" "((1 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 1) (elems 8 sum 10 olaps 56))" "((1 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 1) (elems 8 sum 10 olaps 56))" "((1 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 1) (elems 8 sum 10 olaps 56))" "((1 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 1) (elems 8 sum 10 olaps 56))" "((1 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 1) (elems 8 sum 10 olaps 56))" "((1 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 2) (elems 8 sum 10 olaps 56))" "((1 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 1) (elems 8 sum 10 olaps 56))" "((1 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 1) (elems 8 sum 10 olaps 56))" "((1 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 1) (elems 8 sum 10 olaps 56))" "((1 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 1) (elems 8 sum 10 olaps 56))" "((1 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 1) (elems 8 sum 10 olaps 56))" "((2 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 1) (elems 8 sum 10 olaps 56))" "((2 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 2) (elems 8 sum 10 olaps 56))" "((2 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 1) (elems 8 sum 10 olaps 56))" "((2 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 1) (elems 8 sum 10 olaps 56))" "((2 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 1) (elems 8 sum 10 olaps 56))" "((2 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 1) (elems 8 sum 10 olaps 56))" "((2 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 1) (elems 8 sum 10 olaps 56))" "((3 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 1) (elems 8 sum 10 olaps 56))" "((1 1 1 1 1 1 1 5) (1 1 1 1 1 1 5 1) (1 1 1 1 1 5 1 1) (1 1 1 1 5 1 1 1) (1 1 1 5 1 1 1 1) (1 1 5 1 1 1 1 1) (1 5 1 1 1 1 1 1) (5 1 1 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 1 2 4) (1 1 1 1 1 2 4 1) (1 1 1 1 2 4 1 1) (1 1 1 2 4 1 1 1) (1 1 2 4 1 1 1 1) (1 2 4 1 1 1 1 1) (2 4 1 1 1 1 1 1) (4 1 1 1 1 1 1 2) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 1 3 3) (1 1 1 1 1 3 3 1) (1 1 1 1 3 3 1 1) (1 1 1 3 3 1 1 1) (1 1 3 3 1 1 1 1) (1 3 3 1 1 1 1 1) (3 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 3) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 1 4 2) (1 1 1 1 1 4 2 1) (1 1 1 1 4 2 1 1) (1 1 1 4 2 1 1 1) (1 1 4 2 1 1 1 1) (1 4 2 1 1 1 1 1) (4 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 4) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 1 5 1) (1 1 1 1 1 5 1 1) (1 1 1 1 5 1 1 1) (1 1 1 5 1 1 1 1) (1 1 5 1 1 1 1 1) (1 5 1 1 1 1 1 1) (5 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 5) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 2 1 4) (1 1 1 1 2 1 4 1) (1 1 1 2 1 4 1 1) (1 1 2 1 4 1 1 1) (1 2 1 4 1 1 1 1) (2 1 4 1 1 1 1 1) (1 4 1 1 1 1 1 2) (4 1 1 1 1 1 2 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 2 2 3) (1 1 1 1 2 2 3 1) (1 1 1 2 2 3 1 1) (1 1 2 2 3 1 1 1) (1 2 2 3 1 1 1 1) (2 2 3 1 1 1 1 1) (2 3 1 1 1 1 1 2) (3 1 1 1 1 1 2 2) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 2 3 2) (1 1 1 1 2 3 2 1) (1 1 1 2 3 2 1 1) (1 1 2 3 2 1 1 1) (1 2 3 2 1 1 1 1) (2 3 2 1 1 1 1 1) (3 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 3) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 2 4 1) (1 1 1 1 2 4 1 1) (1 1 1 2 4 1 1 1) (1 1 2 4 1 1 1 1) (1 2 4 1 1 1 1 1) (2 4 1 1 1 1 1 1) (4 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 4) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 3 1 3) (1 1 1 1 3 1 3 1) (1 1 1 3 1 3 1 1) (1 1 3 1 3 1 1 1) (1 3 1 3 1 1 1 1) (3 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 3) (3 1 1 1 1 1 3 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 3 2 2) (1 1 1 1 3 2 2 1) (1 1 1 3 2 2 1 1) (1 1 3 2 2 1 1 1) (1 3 2 2 1 1 1 1) (3 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 3) (2 1 1 1 1 1 3 2) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 3 3 1) (1 1 1 1 3 3 1 1) (1 1 1 3 3 1 1 1) (1 1 3 3 1 1 1 1) (1 3 3 1 1 1 1 1) (3 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 3) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 4 1 2) (1 1 1 1 4 1 2 1) (1 1 1 4 1 2 1 1) (1 1 4 1 2 1 1 1) (1 4 1 2 1 1 1 1) (4 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 4) (2 1 1 1 1 1 4 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 4 2 1) (1 1 1 1 4 2 1 1) (1 1 1 4 2 1 1 1) (1 1 4 2 1 1 1 1) (1 4 2 1 1 1 1 1) (4 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 4) (1 1 1 1 1 1 4 2) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 5 1 1) (1 1 1 1 5 1 1 1) (1 1 1 5 1 1 1 1) (1 1 5 1 1 1 1 1) (1 5 1 1 1 1 1 1) (5 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 5) (1 1 1 1 1 1 5 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 2 1 1 4) (1 1 1 2 1 1 4 1) (1 1 2 1 1 4 1 1) (1 2 1 1 4 1 1 1) (2 1 1 4 1 1 1 1) (1 1 4 1 1 1 1 2) (1 4 1 1 1 1 2 1) (4 1 1 1 1 2 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 2 1 2 3) (1 1 1 2 1 2 3 1) (1 1 2 1 2 3 1 1) (1 2 1 2 3 1 1 1) (2 1 2 3 1 1 1 1) (1 2 3 1 1 1 1 2) (2 3 1 1 1 1 2 1) (3 1 1 1 1 2 1 2) (elems 8 sum 12 olaps 56))" "((1 1 1 1 2 1 3 2) (1 1 1 2 1 3 2 1) (1 1 2 1 3 2 1 1) (1 2 1 3 2 1 1 1) (2 1 3 2 1 1 1 1) (1 3 2 1 1 1 1 2) (3 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 3) (elems 8 sum 12 olaps 56))" "((1 1 1 1 2 1 4 1) (1 1 1 2 1 4 1 1) (1 1 2 1 4 1 1 1) (1 2 1 4 1 1 1 1) (2 1 4 1 1 1 1 1) (1 4 1 1 1 1 1 2) (4 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 4) (elems 8 sum 12 olaps 56))" "((1 1 1 1 2 2 1 3) (1 1 1 2 2 1 3 1) (1 1 2 2 1 3 1 1) (1 2 2 1 3 1 1 1) (2 2 1 3 1 1 1 1) (2 1 3 1 1 1 1 2) (1 3 1 1 1 1 2 2) (3 1 1 1 1 2 2 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 2 2 2 2) (1 1 1 2 2 2 2 1) (1 1 2 2 2 2 1 1) (1 2 2 2 2 1 1 1) (2 2 2 2 1 1 1 1) (2 2 2 1 1 1 1 2) (2 2 1 1 1 1 2 2) (2 1 1 1 1 2 2 2) (elems 8 sum 12 olaps 56))" "((1 1 1 1 2 2 3 1) (1 1 1 2 2 3 1 1) (1 1 2 2 3 1 1 1) (1 2 2 3 1 1 1 1) (2 2 3 1 1 1 1 1) (2 3 1 1 1 1 1 2) (3 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 3) (elems 8 sum 12 olaps 56))" "((1 1 1 1 2 3 1 2) (1 1 1 2 3 1 2 1) (1 1 2 3 1 2 1 1) (1 2 3 1 2 1 1 1) (2 3 1 2 1 1 1 1) (3 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 3) (2 1 1 1 1 2 3 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 2 3 2 1) (1 1 1 2 3 2 1 1) (1 1 2 3 2 1 1 1) (1 2 3 2 1 1 1 1) (2 3 2 1 1 1 1 1) (3 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 3) (1 1 1 1 1 2 3 2) (elems 8 sum 12 olaps 56))" "((1 1 1 1 2 4 1 1) (1 1 1 2 4 1 1 1) (1 1 2 4 1 1 1 1) (1 2 4 1 1 1 1 1) (2 4 1 1 1 1 1 1) (4 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 4) (1 1 1 1 1 2 4 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 3 1 1 3) (1 1 1 3 1 1 3 1) (1 1 3 1 1 3 1 1) (1 3 1 1 3 1 1 1) (3 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 3) (1 3 1 1 1 1 3 1) (3 1 1 1 1 3 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 3 1 2 2) (1 1 1 3 1 2 2 1) (1 1 3 1 2 2 1 1) (1 3 1 2 2 1 1 1) (3 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 3) (2 2 1 1 1 1 3 1) (2 1 1 1 1 3 1 2) (elems 8 sum 12 olaps 56))" "((1 1 1 1 3 1 3 1) (1 1 1 3 1 3 1 1) (1 1 3 1 3 1 1 1) (1 3 1 3 1 1 1 1) (3 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 3) (3 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 3) (elems 8 sum 12 olaps 56))" "((1 1 1 1 3 2 1 2) (1 1 1 3 2 1 2 1) (1 1 3 2 1 2 1 1) (1 3 2 1 2 1 1 1) (3 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 3) (1 2 1 1 1 1 3 2) (2 1 1 1 1 3 2 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 3 2 2 1) (1 1 1 3 2 2 1 1) (1 1 3 2 2 1 1 1) (1 3 2 2 1 1 1 1) (3 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 3) (2 1 1 1 1 1 3 2) (1 1 1 1 1 3 2 2) (elems 8 sum 12 olaps 56))" "((1 1 1 1 3 3 1 1) (1 1 1 3 3 1 1 1) (1 1 3 3 1 1 1 1) (1 3 3 1 1 1 1 1) (3 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 3) (1 1 1 1 1 3 3 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 4 1 1 2) (1 1 1 4 1 1 2 1) (1 1 4 1 1 2 1 1) (1 4 1 1 2 1 1 1) (4 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 4) (1 2 1 1 1 1 4 1) (2 1 1 1 1 4 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 4 1 2 1) (1 1 1 4 1 2 1 1) (1 1 4 1 2 1 1 1) (1 4 1 2 1 1 1 1) (4 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 4) (2 1 1 1 1 1 4 1) (1 1 1 1 1 4 1 2) (elems 8 sum 12 olaps 56))" "((1 1 1 1 4 2 1 1) (1 1 1 4 2 1 1 1) (1 1 4 2 1 1 1 1) (1 4 2 1 1 1 1 1) (4 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 4) (1 1 1 1 1 1 4 2) (1 1 1 1 1 4 2 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 5 1 1 1) (1 1 1 5 1 1 1 1) (1 1 5 1 1 1 1 1) (1 5 1 1 1 1 1 1) (5 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 5) (1 1 1 1 1 1 5 1) (1 1 1 1 1 5 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 2 1 1 1 4) (1 1 2 1 1 1 4 1) (1 2 1 1 1 4 1 1) (2 1 1 1 4 1 1 1) (1 1 1 4 1 1 1 2) (1 1 4 1 1 1 2 1) (1 4 1 1 1 2 1 1) (4 1 1 1 2 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 2 1 1 2 3) (1 1 2 1 1 2 3 1) (1 2 1 1 2 3 1 1) (2 1 1 2 3 1 1 1) (1 1 2 3 1 1 1 2) (1 2 3 1 1 1 2 1) (2 3 1 1 1 2 1 1) (3 1 1 1 2 1 1 2) (elems 8 sum 12 olaps 56))" "((1 1 1 2 1 1 3 2) (1 1 2 1 1 3 2 1) (1 2 1 1 3 2 1 1) (2 1 1 3 2 1 1 1) (1 1 3 2 1 1 1 2) (1 3 2 1 1 1 2 1) (3 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 3) (elems 8 sum 12 olaps 56))" "((1 1 1 2 1 1 4 1) (1 1 2 1 1 4 1 1) (1 2 1 1 4 1 1 1) (2 1 1 4 1 1 1 1) (1 1 4 1 1 1 1 2) (1 4 1 1 1 1 2 1) (4 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 4) (elems 8 sum 12 olaps 56))" "((1 1 1 2 1 2 1 3) (1 1 2 1 2 1 3 1) (1 2 1 2 1 3 1 1) (2 1 2 1 3 1 1 1) (1 2 1 3 1 1 1 2) (2 1 3 1 1 1 2 1) (1 3 1 1 1 2 1 2) (3 1 1 1 2 1 2 1) (elems 8 sum 12 olaps 56))" "((1 1 1 2 1 2 2 2) (1 1 2 1 2 2 2 1) (1 2 1 2 2 2 1 1) (2 1 2 2 2 1 1 1) (1 2 2 2 1 1 1 2) (2 2 2 1 1 1 2 1) (2 2 1 1 1 2 1 2) (2 1 1 1 2 1 2 2) (elems 8 sum 12 olaps 56))" "((1 1 1 2 1 2 3 1) (1 1 2 1 2 3 1 1) (1 2 1 2 3 1 1 1) (2 1 2 3 1 1 1 1) (1 2 3 1 1 1 1 2) (2 3 1 1 1 1 2 1) (3 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 3) (elems 8 sum 12 olaps 56))" "((1 1 1 2 1 3 1 2) (1 1 2 1 3 1 2 1) (1 2 1 3 1 2 1 1) (2 1 3 1 2 1 1 1) (1 3 1 2 1 1 1 2) (3 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 3) (2 1 1 1 2 1 3 1) (elems 8 sum 12 olaps 56))" "((1 1 1 2 1 3 2 1) (1 1 2 1 3 2 1 1) (1 2 1 3 2 1 1 1) (2 1 3 2 1 1 1 1) (1 3 2 1 1 1 1 2) (3 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 3) (1 1 1 1 2 1 3 2) (elems 8 sum 12 olaps 56))" "((1 1 1 2 1 4 1 1) (1 1 2 1 4 1 1 1) (1 2 1 4 1 1 1 1) (2 1 4 1 1 1 1 1) (1 4 1 1 1 1 1 2) (4 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 4) (1 1 1 1 2 1 4 1) (elems 8 sum 12 olaps 56))" "((1 1 1 2 2 1 1 3) (1 1 2 2 1 1 3 1) (1 2 2 1 1 3 1 1) (2 2 1 1 3 1 1 1) (2 1 1 3 1 1 1 2) (1 1 3 1 1 1 2 2) (1 3 1 1 1 2 2 1) (3 1 1 1 2 2 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 2 2 1 2 2) (1 1 2 2 1 2 2 1) (1 2 2 1 2 2 1 1) (2 2 1 2 2 1 1 1) (2 1 2 2 1 1 1 2) (1 2 2 1 1 1 2 2) (2 2 1 1 1 2 2 1) (2 1 1 1 2 2 1 2) (elems 8 sum 12 olaps 56))" "((1 1 1 2 2 1 3 1) (1 1 2 2 1 3 1 1) (1 2 2 1 3 1 1 1) (2 2 1 3 1 1 1 1) (2 1 3 1 1 1 1 2) (1 3 1 1 1 1 2 2) (3 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 3) (elems 8 sum 12 olaps 56))" "((1 1 1 2 2 2 1 2) (1 1 2 2 2 1 2 1) (1 2 2 2 1 2 1 1) (2 2 2 1 2 1 1 1) (2 2 1 2 1 1 1 2) (2 1 2 1 1 1 2 2) (1 2 1 1 1 2 2 2) (2 1 1 1 2 2 2 1) (elems 8 sum 12 olaps 56))" "((1 1 1 2 2 2 2 1) (1 1 2 2 2 2 1 1) (1 2 2 2 2 1 1 1) (2 2 2 2 1 1 1 1) (2 2 2 1 1 1 1 2) (2 2 1 1 1 1 2 2) (2 1 1 1 1 2 2 2) (1 1 1 1 2 2 2 2) (elems 8 sum 12 olaps 56))" "((1 1 1 2 2 3 1 1) (1 1 2 2 3 1 1 1) (1 2 2 3 1 1 1 1) (2 2 3 1 1 1 1 1) (2 3 1 1 1 1 1 2) (3 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 3) (1 1 1 1 2 2 3 1) (elems 8 sum 12 olaps 56))" "((1 1 1 2 3 1 1 2) (1 1 2 3 1 1 2 1) (1 2 3 1 1 2 1 1) (2 3 1 1 2 1 1 1) (3 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 3) (1 2 1 1 1 2 3 1) (2 1 1 1 2 3 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 2 3 1 2 1) (1 1 2 3 1 2 1 1) (1 2 3 1 2 1 1 1) (2 3 1 2 1 1 1 1) (3 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 3) (2 1 1 1 1 2 3 1) (1 1 1 1 2 3 1 2) (elems 8 sum 12 olaps 56))" "((1 1 1 2 3 2 1 1) (1 1 2 3 2 1 1 1) (1 2 3 2 1 1 1 1) (2 3 2 1 1 1 1 1) (3 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 3) (1 1 1 1 1 2 3 2) (1 1 1 1 2 3 2 1) (elems 8 sum 12 olaps 56))" "((1 1 1 2 4 1 1 1) (1 1 2 4 1 1 1 1) (1 2 4 1 1 1 1 1) (2 4 1 1 1 1 1 1) (4 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 4) (1 1 1 1 1 2 4 1) (1 1 1 1 2 4 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 3 1 1 1 3) (1 1 3 1 1 1 3 1) (1 3 1 1 1 3 1 1) (3 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 3) (1 1 3 1 1 1 3 1) (1 3 1 1 1 3 1 1) (3 1 1 1 3 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 3 1 1 2 2) (1 1 3 1 1 2 2 1) (1 3 1 1 2 2 1 1) (3 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 3) (1 2 2 1 1 1 3 1) (2 2 1 1 1 3 1 1) (2 1 1 1 3 1 1 2) (elems 8 sum 12 olaps 56))" "((1 1 1 3 1 1 3 1) (1 1 3 1 1 3 1 1) (1 3 1 1 3 1 1 1) (3 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 3) (1 3 1 1 1 1 3 1) (3 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 3) (elems 8 sum 12 olaps 56))" "((1 1 1 3 1 2 1 2) (1 1 3 1 2 1 2 1) (1 3 1 2 1 2 1 1) (3 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 3) (2 1 2 1 1 1 3 1) (1 2 1 1 1 3 1 2) (2 1 1 1 3 1 2 1) (elems 8 sum 12 olaps 56))" "((1 1 1 3 1 2 2 1) (1 1 3 1 2 2 1 1) (1 3 1 2 2 1 1 1) (3 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 3) (2 2 1 1 1 1 3 1) (2 1 1 1 1 3 1 2) (1 1 1 1 3 1 2 2) (elems 8 sum 12 olaps 56))" "((1 1 1 3 1 3 1 1) (1 1 3 1 3 1 1 1) (1 3 1 3 1 1 1 1) (3 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 3) (3 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 3) (1 1 1 1 3 1 3 1) (elems 8 sum 12 olaps 56))" "((1 1 1 3 2 1 1 2) (1 1 3 2 1 1 2 1) (1 3 2 1 1 2 1 1) (3 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 3) (1 1 2 1 1 1 3 2) (1 2 1 1 1 3 2 1) (2 1 1 1 3 2 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 3 2 1 2 1) (1 1 3 2 1 2 1 1) (1 3 2 1 2 1 1 1) (3 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 3) (1 2 1 1 1 1 3 2) (2 1 1 1 1 3 2 1) (1 1 1 1 3 2 1 2) (elems 8 sum 12 olaps 56))" "((1 1 1 3 2 2 1 1) (1 1 3 2 2 1 1 1) (1 3 2 2 1 1 1 1) (3 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 3) (2 1 1 1 1 1 3 2) (1 1 1 1 1 3 2 2) (1 1 1 1 3 2 2 1) (elems 8 sum 12 olaps 56))" "((1 1 1 3 3 1 1 1) (1 1 3 3 1 1 1 1) (1 3 3 1 1 1 1 1) (3 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 3) (1 1 1 1 1 3 3 1) (1 1 1 1 3 3 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 4 1 1 1 2) (1 1 4 1 1 1 2 1) (1 4 1 1 1 2 1 1) (4 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 4) (1 1 2 1 1 1 4 1) (1 2 1 1 1 4 1 1) (2 1 1 1 4 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 4 1 1 2 1) (1 1 4 1 1 2 1 1) (1 4 1 1 2 1 1 1) (4 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 4) (1 2 1 1 1 1 4 1) (2 1 1 1 1 4 1 1) (1 1 1 1 4 1 1 2) (elems 8 sum 12 olaps 56))" "((1 1 1 4 1 2 1 1) (1 1 4 1 2 1 1 1) (1 4 1 2 1 1 1 1) (4 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 4) (2 1 1 1 1 1 4 1) (1 1 1 1 1 4 1 2) (1 1 1 1 4 1 2 1) (elems 8 sum 12 olaps 56))" "((1 1 1 4 2 1 1 1) (1 1 4 2 1 1 1 1) (1 4 2 1 1 1 1 1) (4 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 4) (1 1 1 1 1 1 4 2) (1 1 1 1 1 4 2 1) (1 1 1 1 4 2 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 5 1 1 1 1) (1 1 5 1 1 1 1 1) (1 5 1 1 1 1 1 1) (5 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 5) (1 1 1 1 1 1 5 1) (1 1 1 1 1 5 1 1) (1 1 1 1 5 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 2 1 1 1 1 4) (1 2 1 1 1 1 4 1) (2 1 1 1 1 4 1 1) (1 1 1 1 4 1 1 2) (1 1 1 4 1 1 2 1) (1 1 4 1 1 2 1 1) (1 4 1 1 2 1 1 1) (4 1 1 2 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 2 1 1 1 2 3) (1 2 1 1 1 2 3 1) (2 1 1 1 2 3 1 1) (1 1 1 2 3 1 1 2) (1 1 2 3 1 1 2 1) (1 2 3 1 1 2 1 1) (2 3 1 1 2 1 1 1) (3 1 1 2 1 1 1 2) (elems 8 sum 12 olaps 56))" "((1 1 2 1 1 1 3 2) (1 2 1 1 1 3 2 1) (2 1 1 1 3 2 1 1) (1 1 1 3 2 1 1 2) (1 1 3 2 1 1 2 1) (1 3 2 1 1 2 1 1) (3 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 3) (elems 8 sum 12 olaps 56))" "((1 1 2 1 1 1 4 1) (1 2 1 1 1 4 1 1) (2 1 1 1 4 1 1 1) (1 1 1 4 1 1 1 2) (1 1 4 1 1 1 2 1) (1 4 1 1 1 2 1 1) (4 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 4) (elems 8 sum 12 olaps 56))" "((1 1 2 1 1 2 1 3) (1 2 1 1 2 1 3 1) (2 1 1 2 1 3 1 1) (1 1 2 1 3 1 1 2) (1 2 1 3 1 1 2 1) (2 1 3 1 1 2 1 1) (1 3 1 1 2 1 1 2) (3 1 1 2 1 1 2 1) (elems 8 sum 12 olaps 56))" "((1 1 2 1 1 2 2 2) (1 2 1 1 2 2 2 1) (2 1 1 2 2 2 1 1) (1 1 2 2 2 1 1 2) (1 2 2 2 1 1 2 1) (2 2 2 1 1 2 1 1) (2 2 1 1 2 1 1 2) (2 1 1 2 1 1 2 2) (elems 8 sum 12 olaps 56))" "((1 1 2 1 1 2 3 1) (1 2 1 1 2 3 1 1) (2 1 1 2 3 1 1 1) (1 1 2 3 1 1 1 2) (1 2 3 1 1 1 2 1) (2 3 1 1 1 2 1 1) (3 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 3) (elems 8 sum 12 olaps 56))" "((1 1 2 1 1 3 1 2) (1 2 1 1 3 1 2 1) (2 1 1 3 1 2 1 1) (1 1 3 1 2 1 1 2) (1 3 1 2 1 1 2 1) (3 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 3) (2 1 1 2 1 1 3 1) (elems 8 sum 12 olaps 56))" "((1 1 2 1 1 3 2 1) (1 2 1 1 3 2 1 1) (2 1 1 3 2 1 1 1) (1 1 3 2 1 1 1 2) (1 3 2 1 1 1 2 1) (3 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 3) (1 1 1 2 1 1 3 2) (elems 8 sum 12 olaps 56))" "((1 1 2 1 1 4 1 1) (1 2 1 1 4 1 1 1) (2 1 1 4 1 1 1 1) (1 1 4 1 1 1 1 2) (1 4 1 1 1 1 2 1) (4 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 4) (1 1 1 2 1 1 4 1) (elems 8 sum 12 olaps 56))" "((1 1 2 1 2 1 1 3) (1 2 1 2 1 1 3 1) (2 1 2 1 1 3 1 1) (1 2 1 1 3 1 1 2) (2 1 1 3 1 1 2 1) (1 1 3 1 1 2 1 2) (1 3 1 1 2 1 2 1) (3 1 1 2 1 2 1 1) (elems 8 sum 12 olaps 56))" "((1 1 2 1 2 1 2 2) (1 2 1 2 1 2 2 1) (2 1 2 1 2 2 1 1) (1 2 1 2 2 1 1 2) (2 1 2 2 1 1 2 1) (1 2 2 1 1 2 1 2) (2 2 1 1 2 1 2 1) (2 1 1 2 1 2 1 2) (elems 8 sum 12 olaps 56))" "((1 1 2 1 2 1 3 1) (1 2 1 2 1 3 1 1) (2 1 2 1 3 1 1 1) (1 2 1 3 1 1 1 2) (2 1 3 1 1 1 2 1) (1 3 1 1 1 2 1 2) (3 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 3) (elems 8 sum 12 olaps 56))" "((1 1 2 1 2 2 1 2) (1 2 1 2 2 1 2 1) (2 1 2 2 1 2 1 1) (1 2 2 1 2 1 1 2) (2 2 1 2 1 1 2 1) (2 1 2 1 1 2 1 2) (1 2 1 1 2 1 2 2) (2 1 1 2 1 2 2 1) (elems 8 sum 12 olaps 56))" "((1 1 2 1 2 2 2 1) (1 2 1 2 2 2 1 1) (2 1 2 2 2 1 1 1) (1 2 2 2 1 1 1 2) (2 2 2 1 1 1 2 1) (2 2 1 1 1 2 1 2) (2 1 1 1 2 1 2 2) (1 1 1 2 1 2 2 2) (elems 8 sum 12 olaps 56))" "((1 1 2 1 2 3 1 1) (1 2 1 2 3 1 1 1) (2 1 2 3 1 1 1 1) (1 2 3 1 1 1 1 2) (2 3 1 1 1 1 2 1) (3 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 3) (1 1 1 2 1 2 3 1) (elems 8 sum 12 olaps 56))" "((1 1 2 1 3 1 1 2) (1 2 1 3 1 1 2 1) (2 1 3 1 1 2 1 1) (1 3 1 1 2 1 1 2) (3 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 3) (1 2 1 1 2 1 3 1) (2 1 1 2 1 3 1 1) (elems 8 sum 12 olaps 56))" "((1 1 2 1 3 1 2 1) (1 2 1 3 1 2 1 1) (2 1 3 1 2 1 1 1) (1 3 1 2 1 1 1 2) (3 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 3) (2 1 1 1 2 1 3 1) (1 1 1 2 1 3 1 2) (elems 8 sum 12 olaps 56))" "((1 1 2 1 3 2 1 1) (1 2 1 3 2 1 1 1) (2 1 3 2 1 1 1 1) (1 3 2 1 1 1 1 2) (3 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 3) (1 1 1 1 2 1 3 2) (1 1 1 2 1 3 2 1) (elems 8 sum 12 olaps 56))" "((1 1 2 1 4 1 1 1) (1 2 1 4 1 1 1 1) (2 1 4 1 1 1 1 1) (1 4 1 1 1 1 1 2) (4 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 4) (1 1 1 1 2 1 4 1) (1 1 1 2 1 4 1 1) (elems 8 sum 12 olaps 56))" "((1 1 2 2 1 1 1 3) (1 2 2 1 1 1 3 1) (2 2 1 1 1 3 1 1) (2 1 1 1 3 1 1 2) (1 1 1 3 1 1 2 2) (1 1 3 1 1 2 2 1) (1 3 1 1 2 2 1 1) (3 1 1 2 2 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 2 2 1 1 2 2) (1 2 2 1 1 2 2 1) (2 2 1 1 2 2 1 1) (2 1 1 2 2 1 1 2) (1 1 2 2 1 1 2 2) (1 2 2 1 1 2 2 1) (2 2 1 1 2 2 1 1) (2 1 1 2 2 1 1 2) (elems 8 sum 12 olaps 56))" "((1 1 2 2 1 1 3 1) (1 2 2 1 1 3 1 1) (2 2 1 1 3 1 1 1) (2 1 1 3 1 1 1 2) (1 1 3 1 1 1 2 2) (1 3 1 1 1 2 2 1) (3 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 3) (elems 8 sum 12 olaps 56))" "((1 1 2 2 1 2 1 2) (1 2 2 1 2 1 2 1) (2 2 1 2 1 2 1 1) (2 1 2 1 2 1 1 2) (1 2 1 2 1 1 2 2) (2 1 2 1 1 2 2 1) (1 2 1 1 2 2 1 2) (2 1 1 2 2 1 2 1) (elems 8 sum 12 olaps 56))" "((1 1 2 2 1 2 2 1) (1 2 2 1 2 2 1 1) (2 2 1 2 2 1 1 1) (2 1 2 2 1 1 1 2) (1 2 2 1 1 1 2 2) (2 2 1 1 1 2 2 1) (2 1 1 1 2 2 1 2) (1 1 1 2 2 1 2 2) (elems 8 sum 12 olaps 56))" "((1 1 2 2 1 3 1 1) (1 2 2 1 3 1 1 1) (2 2 1 3 1 1 1 1) (2 1 3 1 1 1 1 2) (1 3 1 1 1 1 2 2) (3 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 3) (1 1 1 2 2 1 3 1) (elems 8 sum 12 olaps 56))" "((1 1 2 2 2 1 1 2) (1 2 2 2 1 1 2 1) (2 2 2 1 1 2 1 1) (2 2 1 1 2 1 1 2) (2 1 1 2 1 1 2 2) (1 1 2 1 1 2 2 2) (1 2 1 1 2 2 2 1) (2 1 1 2 2 2 1 1) (elems 8 sum 12 olaps 56))" "((1 1 2 2 2 1 2 1) (1 2 2 2 1 2 1 1) (2 2 2 1 2 1 1 1) (2 2 1 2 1 1 1 2) (2 1 2 1 1 1 2 2) (1 2 1 1 1 2 2 2) (2 1 1 1 2 2 2 1) (1 1 1 2 2 2 1 2) (elems 8 sum 12 olaps 56))" "((1 1 2 2 2 2 1 1) (1 2 2 2 2 1 1 1) (2 2 2 2 1 1 1 1) (2 2 2 1 1 1 1 2) (2 2 1 1 1 1 2 2) (2 1 1 1 1 2 2 2) (1 1 1 1 2 2 2 2) (1 1 1 2 2 2 2 1) (elems 8 sum 12 olaps 56))" "((1 1 2 2 3 1 1 1) (1 2 2 3 1 1 1 1) (2 2 3 1 1 1 1 1) (2 3 1 1 1 1 1 2) (3 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 3) (1 1 1 1 2 2 3 1) (1 1 1 2 2 3 1 1) (elems 8 sum 12 olaps 56))" "((1 1 2 3 1 1 1 2) (1 2 3 1 1 1 2 1) (2 3 1 1 1 2 1 1) (3 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 3) (1 1 2 1 1 2 3 1) (1 2 1 1 2 3 1 1) (2 1 1 2 3 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 2 3 1 1 2 1) (1 2 3 1 1 2 1 1) (2 3 1 1 2 1 1 1) (3 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 3) (1 2 1 1 1 2 3 1) (2 1 1 1 2 3 1 1) (1 1 1 2 3 1 1 2) (elems 8 sum 12 olaps 56))" "((1 1 2 3 1 2 1 1) (1 2 3 1 2 1 1 1) (2 3 1 2 1 1 1 1) (3 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 3) (2 1 1 1 1 2 3 1) (1 1 1 1 2 3 1 2) (1 1 1 2 3 1 2 1) (elems 8 sum 12 olaps 56))" "((1 1 2 3 2 1 1 1) (1 2 3 2 1 1 1 1) (2 3 2 1 1 1 1 1) (3 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 3) (1 1 1 1 1 2 3 2) (1 1 1 1 2 3 2 1) (1 1 1 2 3 2 1 1) (elems 8 sum 12 olaps 56))" "((1 1 2 4 1 1 1 1) (1 2 4 1 1 1 1 1) (2 4 1 1 1 1 1 1) (4 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 4) (1 1 1 1 1 2 4 1) (1 1 1 1 2 4 1 1) (1 1 1 2 4 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 3 1 1 1 1 3) (1 3 1 1 1 1 3 1) (3 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 3) (1 1 1 3 1 1 3 1) (1 1 3 1 1 3 1 1) (1 3 1 1 3 1 1 1) (3 1 1 3 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 3 1 1 1 2 2) (1 3 1 1 1 2 2 1) (3 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 3) (1 1 2 2 1 1 3 1) (1 2 2 1 1 3 1 1) (2 2 1 1 3 1 1 1) (2 1 1 3 1 1 1 2) (elems 8 sum 12 olaps 56))" "((1 1 3 1 1 1 3 1) (1 3 1 1 1 3 1 1) (3 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 3) (1 1 3 1 1 1 3 1) (1 3 1 1 1 3 1 1) (3 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 3) (elems 8 sum 12 olaps 56))" "((1 1 3 1 1 2 1 2) (1 3 1 1 2 1 2 1) (3 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 3) (1 2 1 2 1 1 3 1) (2 1 2 1 1 3 1 1) (1 2 1 1 3 1 1 2) (2 1 1 3 1 1 2 1) (elems 8 sum 12 olaps 56))" "((1 1 3 1 1 2 2 1) (1 3 1 1 2 2 1 1) (3 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 3) (1 2 2 1 1 1 3 1) (2 2 1 1 1 3 1 1) (2 1 1 1 3 1 1 2) (1 1 1 3 1 1 2 2) (elems 8 sum 12 olaps 56))" "((1 1 3 1 1 3 1 1) (1 3 1 1 3 1 1 1) (3 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 3) (1 3 1 1 1 1 3 1) (3 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 3) (1 1 1 3 1 1 3 1) (elems 8 sum 12 olaps 56))" "((1 1 3 1 2 1 1 2) (1 3 1 2 1 1 2 1) (3 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 3) (2 1 1 2 1 1 3 1) (1 1 2 1 1 3 1 2) (1 2 1 1 3 1 2 1) (2 1 1 3 1 2 1 1) (elems 8 sum 12 olaps 56))" "((1 1 3 1 2 1 2 1) (1 3 1 2 1 2 1 1) (3 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 3) (2 1 2 1 1 1 3 1) (1 2 1 1 1 3 1 2) (2 1 1 1 3 1 2 1) (1 1 1 3 1 2 1 2) (elems 8 sum 12 olaps 56))" "((1 1 3 1 2 2 1 1) (1 3 1 2 2 1 1 1) (3 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 3) (2 2 1 1 1 1 3 1) (2 1 1 1 1 3 1 2) (1 1 1 1 3 1 2 2) (1 1 1 3 1 2 2 1) (elems 8 sum 12 olaps 56))" "((1 1 3 1 3 1 1 1) (1 3 1 3 1 1 1 1) (3 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 3) (3 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 3) (1 1 1 1 3 1 3 1) (1 1 1 3 1 3 1 1) (elems 8 sum 12 olaps 56))" "((1 1 3 2 1 1 1 2) (1 3 2 1 1 1 2 1) (3 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 3) (1 1 1 2 1 1 3 2) (1 1 2 1 1 3 2 1) (1 2 1 1 3 2 1 1) (2 1 1 3 2 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 3 2 1 1 2 1) (1 3 2 1 1 2 1 1) (3 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 3) (1 1 2 1 1 1 3 2) (1 2 1 1 1 3 2 1) (2 1 1 1 3 2 1 1) (1 1 1 3 2 1 1 2) (elems 8 sum 12 olaps 56))" "((1 1 3 2 1 2 1 1) (1 3 2 1 2 1 1 1) (3 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 3) (1 2 1 1 1 1 3 2) (2 1 1 1 1 3 2 1) (1 1 1 1 3 2 1 2) (1 1 1 3 2 1 2 1) (elems 8 sum 12 olaps 56))" "((1 1 3 2 2 1 1 1) (1 3 2 2 1 1 1 1) (3 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 3) (2 1 1 1 1 1 3 2) (1 1 1 1 1 3 2 2) (1 1 1 1 3 2 2 1) (1 1 1 3 2 2 1 1) (elems 8 sum 12 olaps 56))" "((1 1 3 3 1 1 1 1) (1 3 3 1 1 1 1 1) (3 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 3) (1 1 1 1 1 3 3 1) (1 1 1 1 3 3 1 1) (1 1 1 3 3 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 4 1 1 1 1 2) (1 4 1 1 1 1 2 1) (4 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 4) (1 1 1 2 1 1 4 1) (1 1 2 1 1 4 1 1) (1 2 1 1 4 1 1 1) (2 1 1 4 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 4 1 1 1 2 1) (1 4 1 1 1 2 1 1) (4 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 4) (1 1 2 1 1 1 4 1) (1 2 1 1 1 4 1 1) (2 1 1 1 4 1 1 1) (1 1 1 4 1 1 1 2) (elems 8 sum 12 olaps 56))" "((1 1 4 1 1 2 1 1) (1 4 1 1 2 1 1 1) (4 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 4) (1 2 1 1 1 1 4 1) (2 1 1 1 1 4 1 1) (1 1 1 1 4 1 1 2) (1 1 1 4 1 1 2 1) (elems 8 sum 12 olaps 56))" "((1 1 4 1 2 1 1 1) (1 4 1 2 1 1 1 1) (4 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 4) (2 1 1 1 1 1 4 1) (1 1 1 1 1 4 1 2) (1 1 1 1 4 1 2 1) (1 1 1 4 1 2 1 1) (elems 8 sum 12 olaps 56))" "((1 1 4 2 1 1 1 1) (1 4 2 1 1 1 1 1) (4 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 4) (1 1 1 1 1 1 4 2) (1 1 1 1 1 4 2 1) (1 1 1 1 4 2 1 1) (1 1 1 4 2 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 5 1 1 1 1 1) (1 5 1 1 1 1 1 1) (5 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 5) (1 1 1 1 1 1 5 1) (1 1 1 1 1 5 1 1) (1 1 1 1 5 1 1 1) (1 1 1 5 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 2 1 1 1 1 1 4) (2 1 1 1 1 1 4 1) (1 1 1 1 1 4 1 2) (1 1 1 1 4 1 2 1) (1 1 1 4 1 2 1 1) (1 1 4 1 2 1 1 1) (1 4 1 2 1 1 1 1) (4 1 2 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 2 1 1 1 1 2 3) (2 1 1 1 1 2 3 1) (1 1 1 1 2 3 1 2) (1 1 1 2 3 1 2 1) (1 1 2 3 1 2 1 1) (1 2 3 1 2 1 1 1) (2 3 1 2 1 1 1 1) (3 1 2 1 1 1 1 2) (elems 8 sum 12 olaps 56))" "((1 2 1 1 1 1 3 2) (2 1 1 1 1 3 2 1) (1 1 1 1 3 2 1 2) (1 1 1 3 2 1 2 1) (1 1 3 2 1 2 1 1) (1 3 2 1 2 1 1 1) (3 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 3) (elems 8 sum 12 olaps 56))" "((1 2 1 1 1 1 4 1) (2 1 1 1 1 4 1 1) (1 1 1 1 4 1 1 2) (1 1 1 4 1 1 2 1) (1 1 4 1 1 2 1 1) (1 4 1 1 2 1 1 1) (4 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 4) (elems 8 sum 12 olaps 56))" "((1 2 1 1 1 2 1 3) (2 1 1 1 2 1 3 1) (1 1 1 2 1 3 1 2) (1 1 2 1 3 1 2 1) (1 2 1 3 1 2 1 1) (2 1 3 1 2 1 1 1) (1 3 1 2 1 1 1 2) (3 1 2 1 1 1 2 1) (elems 8 sum 12 olaps 56))" "((1 2 1 1 1 2 2 2) (2 1 1 1 2 2 2 1) (1 1 1 2 2 2 1 2) (1 1 2 2 2 1 2 1) (1 2 2 2 1 2 1 1) (2 2 2 1 2 1 1 1) (2 2 1 2 1 1 1 2) (2 1 2 1 1 1 2 2) (elems 8 sum 12 olaps 56))" "((1 2 1 1 1 2 3 1) (2 1 1 1 2 3 1 1) (1 1 1 2 3 1 1 2) (1 1 2 3 1 1 2 1) (1 2 3 1 1 2 1 1) (2 3 1 1 2 1 1 1) (3 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 3) (elems 8 sum 12 olaps 56))" "((1 2 1 1 1 3 1 2) (2 1 1 1 3 1 2 1) (1 1 1 3 1 2 1 2) (1 1 3 1 2 1 2 1) (1 3 1 2 1 2 1 1) (3 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 3) (2 1 2 1 1 1 3 1) (elems 8 sum 12 olaps 56))" "((1 2 1 1 1 3 2 1) (2 1 1 1 3 2 1 1) (1 1 1 3 2 1 1 2) (1 1 3 2 1 1 2 1) (1 3 2 1 1 2 1 1) (3 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 3) (1 1 2 1 1 1 3 2) (elems 8 sum 12 olaps 56))" "((1 2 1 1 1 4 1 1) (2 1 1 1 4 1 1 1) (1 1 1 4 1 1 1 2) (1 1 4 1 1 1 2 1) (1 4 1 1 1 2 1 1) (4 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 4) (1 1 2 1 1 1 4 1) (elems 8 sum 12 olaps 56))" "((1 2 1 1 2 1 1 3) (2 1 1 2 1 1 3 1) (1 1 2 1 1 3 1 2) (1 2 1 1 3 1 2 1) (2 1 1 3 1 2 1 1) (1 1 3 1 2 1 1 2) (1 3 1 2 1 1 2 1) (3 1 2 1 1 2 1 1) (elems 8 sum 12 olaps 56))" "((1 2 1 1 2 1 2 2) (2 1 1 2 1 2 2 1) (1 1 2 1 2 2 1 2) (1 2 1 2 2 1 2 1) (2 1 2 2 1 2 1 1) (1 2 2 1 2 1 1 2) (2 2 1 2 1 1 2 1) (2 1 2 1 1 2 1 2) (elems 8 sum 12 olaps 56))" "((1 2 1 1 2 1 3 1) (2 1 1 2 1 3 1 1) (1 1 2 1 3 1 1 2) (1 2 1 3 1 1 2 1) (2 1 3 1 1 2 1 1) (1 3 1 1 2 1 1 2) (3 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 3) (elems 8 sum 12 olaps 56))" "((1 2 1 1 2 2 1 2) (2 1 1 2 2 1 2 1) (1 1 2 2 1 2 1 2) (1 2 2 1 2 1 2 1) (2 2 1 2 1 2 1 1) (2 1 2 1 2 1 1 2) (1 2 1 2 1 1 2 2) (2 1 2 1 1 2 2 1) (elems 8 sum 12 olaps 56))" "((1 2 1 1 2 2 2 1) (2 1 1 2 2 2 1 1) (1 1 2 2 2 1 1 2) (1 2 2 2 1 1 2 1) (2 2 2 1 1 2 1 1) (2 2 1 1 2 1 1 2) (2 1 1 2 1 1 2 2) (1 1 2 1 1 2 2 2) (elems 8 sum 12 olaps 56))" "((1 2 1 1 2 3 1 1) (2 1 1 2 3 1 1 1) (1 1 2 3 1 1 1 2) (1 2 3 1 1 1 2 1) (2 3 1 1 1 2 1 1) (3 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 3) (1 1 2 1 1 2 3 1) (elems 8 sum 12 olaps 56))" "((1 2 1 1 3 1 1 2) (2 1 1 3 1 1 2 1) (1 1 3 1 1 2 1 2) (1 3 1 1 2 1 2 1) (3 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 3) (1 2 1 2 1 1 3 1) (2 1 2 1 1 3 1 1) (elems 8 sum 12 olaps 56))" "((1 2 1 1 3 1 2 1) (2 1 1 3 1 2 1 1) (1 1 3 1 2 1 1 2) (1 3 1 2 1 1 2 1) (3 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 3) (2 1 1 2 1 1 3 1) (1 1 2 1 1 3 1 2) (elems 8 sum 12 olaps 56))" "((1 2 1 1 3 2 1 1) (2 1 1 3 2 1 1 1) (1 1 3 2 1 1 1 2) (1 3 2 1 1 1 2 1) (3 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 3) (1 1 1 2 1 1 3 2) (1 1 2 1 1 3 2 1) (elems 8 sum 12 olaps 56))" "((1 2 1 1 4 1 1 1) (2 1 1 4 1 1 1 1) (1 1 4 1 1 1 1 2) (1 4 1 1 1 1 2 1) (4 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 4) (1 1 1 2 1 1 4 1) (1 1 2 1 1 4 1 1) (elems 8 sum 12 olaps 56))" "((1 2 1 2 1 1 1 3) (2 1 2 1 1 1 3 1) (1 2 1 1 1 3 1 2) (2 1 1 1 3 1 2 1) (1 1 1 3 1 2 1 2) (1 1 3 1 2 1 2 1) (1 3 1 2 1 2 1 1) (3 1 2 1 2 1 1 1) (elems 8 sum 12 olaps 56))" "((1 2 1 2 1 1 2 2) (2 1 2 1 1 2 2 1) (1 2 1 1 2 2 1 2) (2 1 1 2 2 1 2 1) (1 1 2 2 1 2 1 2) (1 2 2 1 2 1 2 1) (2 2 1 2 1 2 1 1) (2 1 2 1 2 1 1 2) (elems 8 sum 12 olaps 56))" "((1 2 1 2 1 1 3 1) (2 1 2 1 1 3 1 1) (1 2 1 1 3 1 1 2) (2 1 1 3 1 1 2 1) (1 1 3 1 1 2 1 2) (1 3 1 1 2 1 2 1) (3 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 3) (elems 8 sum 12 olaps 56))" "((1 2 1 2 1 2 1 2) (2 1 2 1 2 1 2 1) (1 2 1 2 1 2 1 2) (2 1 2 1 2 1 2 1) (1 2 1 2 1 2 1 2) (2 1 2 1 2 1 2 1) (1 2 1 2 1 2 1 2) (2 1 2 1 2 1 2 1) (elems 8 sum 12 olaps 56))" "((1 2 1 2 1 2 2 1) (2 1 2 1 2 2 1 1) (1 2 1 2 2 1 1 2) (2 1 2 2 1 1 2 1) (1 2 2 1 1 2 1 2) (2 2 1 1 2 1 2 1) (2 1 1 2 1 2 1 2) (1 1 2 1 2 1 2 2) (elems 8 sum 12 olaps 56))" "((1 2 1 2 1 3 1 1) (2 1 2 1 3 1 1 1) (1 2 1 3 1 1 1 2) (2 1 3 1 1 1 2 1) (1 3 1 1 1 2 1 2) (3 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 3) (1 1 2 1 2 1 3 1) (elems 8 sum 12 olaps 56))" "((1 2 1 2 2 1 1 2) (2 1 2 2 1 1 2 1) (1 2 2 1 1 2 1 2) (2 2 1 1 2 1 2 1) (2 1 1 2 1 2 1 2) (1 1 2 1 2 1 2 2) (1 2 1 2 1 2 2 1) (2 1 2 1 2 2 1 1) (elems 8 sum 12 olaps 56))" "((1 2 1 2 2 1 2 1) (2 1 2 2 1 2 1 1) (1 2 2 1 2 1 1 2) (2 2 1 2 1 1 2 1) (2 1 2 1 1 2 1 2) (1 2 1 1 2 1 2 2) (2 1 1 2 1 2 2 1) (1 1 2 1 2 2 1 2) (elems 8 sum 12 olaps 56))" "((1 2 1 2 2 2 1 1) (2 1 2 2 2 1 1 1) (1 2 2 2 1 1 1 2) (2 2 2 1 1 1 2 1) (2 2 1 1 1 2 1 2) (2 1 1 1 2 1 2 2) (1 1 1 2 1 2 2 2) (1 1 2 1 2 2 2 1) (elems 8 sum 12 olaps 56))" "((1 2 1 2 3 1 1 1) (2 1 2 3 1 1 1 1) (1 2 3 1 1 1 1 2) (2 3 1 1 1 1 2 1) (3 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 3) (1 1 1 2 1 2 3 1) (1 1 2 1 2 3 1 1) (elems 8 sum 12 olaps 56))" "((1 2 1 3 1 1 1 2) (2 1 3 1 1 1 2 1) (1 3 1 1 1 2 1 2) (3 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 3) (1 1 2 1 2 1 3 1) (1 2 1 2 1 3 1 1) (2 1 2 1 3 1 1 1) (elems 8 sum 12 olaps 56))" "((1 2 1 3 1 1 2 1) (2 1 3 1 1 2 1 1) (1 3 1 1 2 1 1 2) (3 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 3) (1 2 1 1 2 1 3 1) (2 1 1 2 1 3 1 1) (1 1 2 1 3 1 1 2) (elems 8 sum 12 olaps 56))" "((1 2 1 3 1 2 1 1) (2 1 3 1 2 1 1 1) (1 3 1 2 1 1 1 2) (3 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 3) (2 1 1 1 2 1 3 1) (1 1 1 2 1 3 1 2) (1 1 2 1 3 1 2 1) (elems 8 sum 12 olaps 56))" "((1 2 1 3 2 1 1 1) (2 1 3 2 1 1 1 1) (1 3 2 1 1 1 1 2) (3 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 3) (1 1 1 1 2 1 3 2) (1 1 1 2 1 3 2 1) (1 1 2 1 3 2 1 1) (elems 8 sum 12 olaps 56))" "((1 2 1 4 1 1 1 1) (2 1 4 1 1 1 1 1) (1 4 1 1 1 1 1 2) (4 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 4) (1 1 1 1 2 1 4 1) (1 1 1 2 1 4 1 1) (1 1 2 1 4 1 1 1) (elems 8 sum 12 olaps 56))" "((1 2 2 1 1 1 1 3) (2 2 1 1 1 1 3 1) (2 1 1 1 1 3 1 2) (1 1 1 1 3 1 2 2) (1 1 1 3 1 2 2 1) (1 1 3 1 2 2 1 1) (1 3 1 2 2 1 1 1) (3 1 2 2 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 2 2 1 1 1 2 2) (2 2 1 1 1 2 2 1) (2 1 1 1 2 2 1 2) (1 1 1 2 2 1 2 2) (1 1 2 2 1 2 2 1) (1 2 2 1 2 2 1 1) (2 2 1 2 2 1 1 1) (2 1 2 2 1 1 1 2) (elems 8 sum 12 olaps 56))" "((1 2 2 1 1 1 3 1) (2 2 1 1 1 3 1 1) (2 1 1 1 3 1 1 2) (1 1 1 3 1 1 2 2) (1 1 3 1 1 2 2 1) (1 3 1 1 2 2 1 1) (3 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 3) (elems 8 sum 12 olaps 56))" "((1 2 2 1 1 2 1 2) (2 2 1 1 2 1 2 1) (2 1 1 2 1 2 1 2) (1 1 2 1 2 1 2 2) (1 2 1 2 1 2 2 1) (2 1 2 1 2 2 1 1) (1 2 1 2 2 1 1 2) (2 1 2 2 1 1 2 1) (elems 8 sum 12 olaps 56))" "((1 2 2 1 1 2 2 1) (2 2 1 1 2 2 1 1) (2 1 1 2 2 1 1 2) (1 1 2 2 1 1 2 2) (1 2 2 1 1 2 2 1) (2 2 1 1 2 2 1 1) (2 1 1 2 2 1 1 2) (1 1 2 2 1 1 2 2) (elems 8 sum 12 olaps 56))" "((1 2 2 1 1 3 1 1) (2 2 1 1 3 1 1 1) (2 1 1 3 1 1 1 2) (1 1 3 1 1 1 2 2) (1 3 1 1 1 2 2 1) (3 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 3) (1 1 2 2 1 1 3 1) (elems 8 sum 12 olaps 56))" "((1 2 2 1 2 1 1 2) (2 2 1 2 1 1 2 1) (2 1 2 1 1 2 1 2) (1 2 1 1 2 1 2 2) (2 1 1 2 1 2 2 1) (1 1 2 1 2 2 1 2) (1 2 1 2 2 1 2 1) (2 1 2 2 1 2 1 1) (elems 8 sum 12 olaps 56))" "((1 2 2 1 2 1 2 1) (2 2 1 2 1 2 1 1) (2 1 2 1 2 1 1 2) (1 2 1 2 1 1 2 2) (2 1 2 1 1 2 2 1) (1 2 1 1 2 2 1 2) (2 1 1 2 2 1 2 1) (1 1 2 2 1 2 1 2) (elems 8 sum 12 olaps 56))" "((1 2 2 1 2 2 1 1) (2 2 1 2 2 1 1 1) (2 1 2 2 1 1 1 2) (1 2 2 1 1 1 2 2) (2 2 1 1 1 2 2 1) (2 1 1 1 2 2 1 2) (1 1 1 2 2 1 2 2) (1 1 2 2 1 2 2 1) (elems 8 sum 12 olaps 56))" "((1 2 2 1 3 1 1 1) (2 2 1 3 1 1 1 1) (2 1 3 1 1 1 1 2) (1 3 1 1 1 1 2 2) (3 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 3) (1 1 1 2 2 1 3 1) (1 1 2 2 1 3 1 1) (elems 8 sum 12 olaps 56))" "((1 2 2 2 1 1 1 2) (2 2 2 1 1 1 2 1) (2 2 1 1 1 2 1 2) (2 1 1 1 2 1 2 2) (1 1 1 2 1 2 2 2) (1 1 2 1 2 2 2 1) (1 2 1 2 2 2 1 1) (2 1 2 2 2 1 1 1) (elems 8 sum 12 olaps 56))" "((1 2 2 2 1 1 2 1) (2 2 2 1 1 2 1 1) (2 2 1 1 2 1 1 2) (2 1 1 2 1 1 2 2) (1 1 2 1 1 2 2 2) (1 2 1 1 2 2 2 1) (2 1 1 2 2 2 1 1) (1 1 2 2 2 1 1 2) (elems 8 sum 12 olaps 56))" "((1 2 2 2 1 2 1 1) (2 2 2 1 2 1 1 1) (2 2 1 2 1 1 1 2) (2 1 2 1 1 1 2 2) (1 2 1 1 1 2 2 2) (2 1 1 1 2 2 2 1) (1 1 1 2 2 2 1 2) (1 1 2 2 2 1 2 1) (elems 8 sum 12 olaps 56))" "((1 2 2 2 2 1 1 1) (2 2 2 2 1 1 1 1) (2 2 2 1 1 1 1 2) (2 2 1 1 1 1 2 2) (2 1 1 1 1 2 2 2) (1 1 1 1 2 2 2 2) (1 1 1 2 2 2 2 1) (1 1 2 2 2 2 1 1) (elems 8 sum 12 olaps 56))" "((1 2 2 3 1 1 1 1) (2 2 3 1 1 1 1 1) (2 3 1 1 1 1 1 2) (3 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 3) (1 1 1 1 2 2 3 1) (1 1 1 2 2 3 1 1) (1 1 2 2 3 1 1 1) (elems 8 sum 12 olaps 56))" "((1 2 3 1 1 1 1 2) (2 3 1 1 1 1 2 1) (3 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 3) (1 1 1 2 1 2 3 1) (1 1 2 1 2 3 1 1) (1 2 1 2 3 1 1 1) (2 1 2 3 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 2 3 1 1 1 2 1) (2 3 1 1 1 2 1 1) (3 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 3) (1 1 2 1 1 2 3 1) (1 2 1 1 2 3 1 1) (2 1 1 2 3 1 1 1) (1 1 2 3 1 1 1 2) (elems 8 sum 12 olaps 56))" "((1 2 3 1 1 2 1 1) (2 3 1 1 2 1 1 1) (3 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 3) (1 2 1 1 1 2 3 1) (2 1 1 1 2 3 1 1) (1 1 1 2 3 1 1 2) (1 1 2 3 1 1 2 1) (elems 8 sum 12 olaps 56))" "((1 2 3 1 2 1 1 1) (2 3 1 2 1 1 1 1) (3 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 3) (2 1 1 1 1 2 3 1) (1 1 1 1 2 3 1 2) (1 1 1 2 3 1 2 1) (1 1 2 3 1 2 1 1) (elems 8 sum 12 olaps 56))" "((1 2 3 2 1 1 1 1) (2 3 2 1 1 1 1 1) (3 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 3) (1 1 1 1 1 2 3 2) (1 1 1 1 2 3 2 1) (1 1 1 2 3 2 1 1) (1 1 2 3 2 1 1 1) (elems 8 sum 12 olaps 56))" "((1 2 4 1 1 1 1 1) (2 4 1 1 1 1 1 1) (4 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 4) (1 1 1 1 1 2 4 1) (1 1 1 1 2 4 1 1) (1 1 1 2 4 1 1 1) (1 1 2 4 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 3 1 1 1 1 1 3) (3 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 3) (1 1 1 1 3 1 3 1) (1 1 1 3 1 3 1 1) (1 1 3 1 3 1 1 1) (1 3 1 3 1 1 1 1) (3 1 3 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 3 1 1 1 1 2 2) (3 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 3) (1 1 1 2 2 1 3 1) (1 1 2 2 1 3 1 1) (1 2 2 1 3 1 1 1) (2 2 1 3 1 1 1 1) (2 1 3 1 1 1 1 2) (elems 8 sum 12 olaps 56))" "((1 3 1 1 1 1 3 1) (3 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 3) (1 1 1 3 1 1 3 1) (1 1 3 1 1 3 1 1) (1 3 1 1 3 1 1 1) (3 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 3) (elems 8 sum 12 olaps 56))" "((1 3 1 1 1 2 1 2) (3 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 3) (1 1 2 1 2 1 3 1) (1 2 1 2 1 3 1 1) (2 1 2 1 3 1 1 1) (1 2 1 3 1 1 1 2) (2 1 3 1 1 1 2 1) (elems 8 sum 12 olaps 56))" "((1 3 1 1 1 2 2 1) (3 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 3) (1 1 2 2 1 1 3 1) (1 2 2 1 1 3 1 1) (2 2 1 1 3 1 1 1) (2 1 1 3 1 1 1 2) (1 1 3 1 1 1 2 2) (elems 8 sum 12 olaps 56))" "((1 3 1 1 1 3 1 1) (3 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 3) (1 1 3 1 1 1 3 1) (1 3 1 1 1 3 1 1) (3 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 3) (1 1 3 1 1 1 3 1) (elems 8 sum 12 olaps 56))" "((1 3 1 1 2 1 1 2) (3 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 3) (1 2 1 1 2 1 3 1) (2 1 1 2 1 3 1 1) (1 1 2 1 3 1 1 2) (1 2 1 3 1 1 2 1) (2 1 3 1 1 2 1 1) (elems 8 sum 12 olaps 56))" "((1 3 1 1 2 1 2 1) (3 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 3) (1 2 1 2 1 1 3 1) (2 1 2 1 1 3 1 1) (1 2 1 1 3 1 1 2) (2 1 1 3 1 1 2 1) (1 1 3 1 1 2 1 2) (elems 8 sum 12 olaps 56))" "((1 3 1 1 2 2 1 1) (3 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 3) (1 2 2 1 1 1 3 1) (2 2 1 1 1 3 1 1) (2 1 1 1 3 1 1 2) (1 1 1 3 1 1 2 2) (1 1 3 1 1 2 2 1) (elems 8 sum 12 olaps 56))" "((1 3 1 1 3 1 1 1) (3 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 3) (1 3 1 1 1 1 3 1) (3 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 3) (1 1 1 3 1 1 3 1) (1 1 3 1 1 3 1 1) (elems 8 sum 12 olaps 56))" "((1 3 1 2 1 1 1 2) (3 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 3) (2 1 1 1 2 1 3 1) (1 1 1 2 1 3 1 2) (1 1 2 1 3 1 2 1) (1 2 1 3 1 2 1 1) (2 1 3 1 2 1 1 1) (elems 8 sum 12 olaps 56))" "((1 3 1 2 1 1 2 1) (3 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 3) (2 1 1 2 1 1 3 1) (1 1 2 1 1 3 1 2) (1 2 1 1 3 1 2 1) (2 1 1 3 1 2 1 1) (1 1 3 1 2 1 1 2) (elems 8 sum 12 olaps 56))" "((1 3 1 2 1 2 1 1) (3 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 3) (2 1 2 1 1 1 3 1) (1 2 1 1 1 3 1 2) (2 1 1 1 3 1 2 1) (1 1 1 3 1 2 1 2) (1 1 3 1 2 1 2 1) (elems 8 sum 12 olaps 56))" "((1 3 1 2 2 1 1 1) (3 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 3) (2 2 1 1 1 1 3 1) (2 1 1 1 1 3 1 2) (1 1 1 1 3 1 2 2) (1 1 1 3 1 2 2 1) (1 1 3 1 2 2 1 1) (elems 8 sum 12 olaps 56))" "((1 3 1 3 1 1 1 1) (3 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 3) (3 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 3) (1 1 1 1 3 1 3 1) (1 1 1 3 1 3 1 1) (1 1 3 1 3 1 1 1) (elems 8 sum 12 olaps 56))" "((1 3 2 1 1 1 1 2) (3 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 3) (1 1 1 1 2 1 3 2) (1 1 1 2 1 3 2 1) (1 1 2 1 3 2 1 1) (1 2 1 3 2 1 1 1) (2 1 3 2 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 3 2 1 1 1 2 1) (3 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 3) (1 1 1 2 1 1 3 2) (1 1 2 1 1 3 2 1) (1 2 1 1 3 2 1 1) (2 1 1 3 2 1 1 1) (1 1 3 2 1 1 1 2) (elems 8 sum 12 olaps 56))" "((1 3 2 1 1 2 1 1) (3 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 3) (1 1 2 1 1 1 3 2) (1 2 1 1 1 3 2 1) (2 1 1 1 3 2 1 1) (1 1 1 3 2 1 1 2) (1 1 3 2 1 1 2 1) (elems 8 sum 12 olaps 56))" "((1 3 2 1 2 1 1 1) (3 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 3) (1 2 1 1 1 1 3 2) (2 1 1 1 1 3 2 1) (1 1 1 1 3 2 1 2) (1 1 1 3 2 1 2 1) (1 1 3 2 1 2 1 1) (elems 8 sum 12 olaps 56))" "((1 3 2 2 1 1 1 1) (3 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 3) (2 1 1 1 1 1 3 2) (1 1 1 1 1 3 2 2) (1 1 1 1 3 2 2 1) (1 1 1 3 2 2 1 1) (1 1 3 2 2 1 1 1) (elems 8 sum 12 olaps 56))" "((1 3 3 1 1 1 1 1) (3 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 3) (1 1 1 1 1 3 3 1) (1 1 1 1 3 3 1 1) (1 1 1 3 3 1 1 1) (1 1 3 3 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 4 1 1 1 1 1 2) (4 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 4) (1 1 1 1 2 1 4 1) (1 1 1 2 1 4 1 1) (1 1 2 1 4 1 1 1) (1 2 1 4 1 1 1 1) (2 1 4 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 4 1 1 1 1 2 1) (4 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 4) (1 1 1 2 1 1 4 1) (1 1 2 1 1 4 1 1) (1 2 1 1 4 1 1 1) (2 1 1 4 1 1 1 1) (1 1 4 1 1 1 1 2) (elems 8 sum 12 olaps 56))" "((1 4 1 1 1 2 1 1) (4 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 4) (1 1 2 1 1 1 4 1) (1 2 1 1 1 4 1 1) (2 1 1 1 4 1 1 1) (1 1 1 4 1 1 1 2) (1 1 4 1 1 1 2 1) (elems 8 sum 12 olaps 56))" "((1 4 1 1 2 1 1 1) (4 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 4) (1 2 1 1 1 1 4 1) (2 1 1 1 1 4 1 1) (1 1 1 1 4 1 1 2) (1 1 1 4 1 1 2 1) (1 1 4 1 1 2 1 1) (elems 8 sum 12 olaps 56))" "((1 4 1 2 1 1 1 1) (4 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 4) (2 1 1 1 1 1 4 1) (1 1 1 1 1 4 1 2) (1 1 1 1 4 1 2 1) (1 1 1 4 1 2 1 1) (1 1 4 1 2 1 1 1) (elems 8 sum 12 olaps 56))" "((1 4 2 1 1 1 1 1) (4 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 4) (1 1 1 1 1 1 4 2) (1 1 1 1 1 4 2 1) (1 1 1 1 4 2 1 1) (1 1 1 4 2 1 1 1) (1 1 4 2 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 5 1 1 1 1 1 1) (5 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 5) (1 1 1 1 1 1 5 1) (1 1 1 1 1 5 1 1) (1 1 1 1 5 1 1 1) (1 1 1 5 1 1 1 1) (1 1 5 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((2 1 1 1 1 1 1 4) (1 1 1 1 1 1 4 2) (1 1 1 1 1 4 2 1) (1 1 1 1 4 2 1 1) (1 1 1 4 2 1 1 1) (1 1 4 2 1 1 1 1) (1 4 2 1 1 1 1 1) (4 2 1 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((2 1 1 1 1 1 2 3) (1 1 1 1 1 2 3 2) (1 1 1 1 2 3 2 1) (1 1 1 2 3 2 1 1) (1 1 2 3 2 1 1 1) (1 2 3 2 1 1 1 1) (2 3 2 1 1 1 1 1) (3 2 1 1 1 1 1 2) (elems 8 sum 12 olaps 56))" "((2 1 1 1 1 1 3 2) (1 1 1 1 1 3 2 2) (1 1 1 1 3 2 2 1) (1 1 1 3 2 2 1 1) (1 1 3 2 2 1 1 1) (1 3 2 2 1 1 1 1) (3 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 3) (elems 8 sum 12 olaps 56))" "((2 1 1 1 1 1 4 1) (1 1 1 1 1 4 1 2) (1 1 1 1 4 1 2 1) (1 1 1 4 1 2 1 1) (1 1 4 1 2 1 1 1) (1 4 1 2 1 1 1 1) (4 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 4) (elems 8 sum 12 olaps 56))" "((2 1 1 1 1 2 1 3) (1 1 1 1 2 1 3 2) (1 1 1 2 1 3 2 1) (1 1 2 1 3 2 1 1) (1 2 1 3 2 1 1 1) (2 1 3 2 1 1 1 1) (1 3 2 1 1 1 1 2) (3 2 1 1 1 1 2 1) (elems 8 sum 12 olaps 56))" "((2 1 1 1 1 2 2 2) (1 1 1 1 2 2 2 2) (1 1 1 2 2 2 2 1) (1 1 2 2 2 2 1 1) (1 2 2 2 2 1 1 1) (2 2 2 2 1 1 1 1) (2 2 2 1 1 1 1 2) (2 2 1 1 1 1 2 2) (elems 8 sum 12 olaps 56))" "((2 1 1 1 1 2 3 1) (1 1 1 1 2 3 1 2) (1 1 1 2 3 1 2 1) (1 1 2 3 1 2 1 1) (1 2 3 1 2 1 1 1) (2 3 1 2 1 1 1 1) (3 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 3) (elems 8 sum 12 olaps 56))" "((2 1 1 1 1 3 1 2) (1 1 1 1 3 1 2 2) (1 1 1 3 1 2 2 1) (1 1 3 1 2 2 1 1) (1 3 1 2 2 1 1 1) (3 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 3) (2 2 1 1 1 1 3 1) (elems 8 sum 12 olaps 56))" "((2 1 1 1 1 3 2 1) (1 1 1 1 3 2 1 2) (1 1 1 3 2 1 2 1) (1 1 3 2 1 2 1 1) (1 3 2 1 2 1 1 1) (3 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 3) (1 2 1 1 1 1 3 2) (elems 8 sum 12 olaps 56))" "((2 1 1 1 1 4 1 1) (1 1 1 1 4 1 1 2) (1 1 1 4 1 1 2 1) (1 1 4 1 1 2 1 1) (1 4 1 1 2 1 1 1) (4 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 4) (1 2 1 1 1 1 4 1) (elems 8 sum 12 olaps 56))" "((2 1 1 1 2 1 1 3) (1 1 1 2 1 1 3 2) (1 1 2 1 1 3 2 1) (1 2 1 1 3 2 1 1) (2 1 1 3 2 1 1 1) (1 1 3 2 1 1 1 2) (1 3 2 1 1 1 2 1) (3 2 1 1 1 2 1 1) (elems 8 sum 12 olaps 56))" "((2 1 1 1 2 1 2 2) (1 1 1 2 1 2 2 2) (1 1 2 1 2 2 2 1) (1 2 1 2 2 2 1 1) (2 1 2 2 2 1 1 1) (1 2 2 2 1 1 1 2) (2 2 2 1 1 1 2 1) (2 2 1 1 1 2 1 2) (elems 8 sum 12 olaps 56))" "((2 1 1 1 2 1 3 1) (1 1 1 2 1 3 1 2) (1 1 2 1 3 1 2 1) (1 2 1 3 1 2 1 1) (2 1 3 1 2 1 1 1) (1 3 1 2 1 1 1 2) (3 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 3) (elems 8 sum 12 olaps 56))" "((2 1 1 1 2 2 1 2) (1 1 1 2 2 1 2 2) (1 1 2 2 1 2 2 1) (1 2 2 1 2 2 1 1) (2 2 1 2 2 1 1 1) (2 1 2 2 1 1 1 2) (1 2 2 1 1 1 2 2) (2 2 1 1 1 2 2 1) (elems 8 sum 12 olaps 56))" "((2 1 1 1 2 2 2 1) (1 1 1 2 2 2 1 2) (1 1 2 2 2 1 2 1) (1 2 2 2 1 2 1 1) (2 2 2 1 2 1 1 1) (2 2 1 2 1 1 1 2) (2 1 2 1 1 1 2 2) (1 2 1 1 1 2 2 2) (elems 8 sum 12 olaps 56))" "((2 1 1 1 2 3 1 1) (1 1 1 2 3 1 1 2) (1 1 2 3 1 1 2 1) (1 2 3 1 1 2 1 1) (2 3 1 1 2 1 1 1) (3 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 3) (1 2 1 1 1 2 3 1) (elems 8 sum 12 olaps 56))" "((2 1 1 1 3 1 1 2) (1 1 1 3 1 1 2 2) (1 1 3 1 1 2 2 1) (1 3 1 1 2 2 1 1) (3 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 3) (1 2 2 1 1 1 3 1) (2 2 1 1 1 3 1 1) (elems 8 sum 12 olaps 56))" "((2 1 1 1 3 1 2 1) (1 1 1 3 1 2 1 2) (1 1 3 1 2 1 2 1) (1 3 1 2 1 2 1 1) (3 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 3) (2 1 2 1 1 1 3 1) (1 2 1 1 1 3 1 2) (elems 8 sum 12 olaps 56))" "((2 1 1 1 3 2 1 1) (1 1 1 3 2 1 1 2) (1 1 3 2 1 1 2 1) (1 3 2 1 1 2 1 1) (3 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 3) (1 1 2 1 1 1 3 2) (1 2 1 1 1 3 2 1) (elems 8 sum 12 olaps 56))" "((2 1 1 1 4 1 1 1) (1 1 1 4 1 1 1 2) (1 1 4 1 1 1 2 1) (1 4 1 1 1 2 1 1) (4 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 4) (1 1 2 1 1 1 4 1) (1 2 1 1 1 4 1 1) (elems 8 sum 12 olaps 56))" "((2 1 1 2 1 1 1 3) (1 1 2 1 1 1 3 2) (1 2 1 1 1 3 2 1) (2 1 1 1 3 2 1 1) (1 1 1 3 2 1 1 2) (1 1 3 2 1 1 2 1) (1 3 2 1 1 2 1 1) (3 2 1 1 2 1 1 1) (elems 8 sum 12 olaps 56))" "((2 1 1 2 1 1 2 2) (1 1 2 1 1 2 2 2) (1 2 1 1 2 2 2 1) (2 1 1 2 2 2 1 1) (1 1 2 2 2 1 1 2) (1 2 2 2 1 1 2 1) (2 2 2 1 1 2 1 1) (2 2 1 1 2 1 1 2) (elems 8 sum 12 olaps 56))" "((2 1 1 2 1 1 3 1) (1 1 2 1 1 3 1 2) (1 2 1 1 3 1 2 1) (2 1 1 3 1 2 1 1) (1 1 3 1 2 1 1 2) (1 3 1 2 1 1 2 1) (3 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 3) (elems 8 sum 12 olaps 56))" "((2 1 1 2 1 2 1 2) (1 1 2 1 2 1 2 2) (1 2 1 2 1 2 2 1) (2 1 2 1 2 2 1 1) (1 2 1 2 2 1 1 2) (2 1 2 2 1 1 2 1) (1 2 2 1 1 2 1 2) (2 2 1 1 2 1 2 1) (elems 8 sum 12 olaps 56))" "((2 1 1 2 1 2 2 1) (1 1 2 1 2 2 1 2) (1 2 1 2 2 1 2 1) (2 1 2 2 1 2 1 1) (1 2 2 1 2 1 1 2) (2 2 1 2 1 1 2 1) (2 1 2 1 1 2 1 2) (1 2 1 1 2 1 2 2) (elems 8 sum 12 olaps 56))" "((2 1 1 2 1 3 1 1) (1 1 2 1 3 1 1 2) (1 2 1 3 1 1 2 1) (2 1 3 1 1 2 1 1) (1 3 1 1 2 1 1 2) (3 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 3) (1 2 1 1 2 1 3 1) (elems 8 sum 12 olaps 56))" "((2 1 1 2 2 1 1 2) (1 1 2 2 1 1 2 2) (1 2 2 1 1 2 2 1) (2 2 1 1 2 2 1 1) (2 1 1 2 2 1 1 2) (1 1 2 2 1 1 2 2) (1 2 2 1 1 2 2 1) (2 2 1 1 2 2 1 1) (elems 8 sum 12 olaps 56))" "((2 1 1 2 2 1 2 1) (1 1 2 2 1 2 1 2) (1 2 2 1 2 1 2 1) (2 2 1 2 1 2 1 1) (2 1 2 1 2 1 1 2) (1 2 1 2 1 1 2 2) (2 1 2 1 1 2 2 1) (1 2 1 1 2 2 1 2) (elems 8 sum 12 olaps 56))" "((2 1 1 2 2 2 1 1) (1 1 2 2 2 1 1 2) (1 2 2 2 1 1 2 1) (2 2 2 1 1 2 1 1) (2 2 1 1 2 1 1 2) (2 1 1 2 1 1 2 2) (1 1 2 1 1 2 2 2) (1 2 1 1 2 2 2 1) (elems 8 sum 12 olaps 56))" "((2 1 1 2 3 1 1 1) (1 1 2 3 1 1 1 2) (1 2 3 1 1 1 2 1) (2 3 1 1 1 2 1 1) (3 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 3) (1 1 2 1 1 2 3 1) (1 2 1 1 2 3 1 1) (elems 8 sum 12 olaps 56))" "((2 1 1 3 1 1 1 2) (1 1 3 1 1 1 2 2) (1 3 1 1 1 2 2 1) (3 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 3) (1 1 2 2 1 1 3 1) (1 2 2 1 1 3 1 1) (2 2 1 1 3 1 1 1) (elems 8 sum 12 olaps 56))" "((2 1 1 3 1 1 2 1) (1 1 3 1 1 2 1 2) (1 3 1 1 2 1 2 1) (3 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 3) (1 2 1 2 1 1 3 1) (2 1 2 1 1 3 1 1) (1 2 1 1 3 1 1 2) (elems 8 sum 12 olaps 56))" "((2 1 1 3 1 2 1 1) (1 1 3 1 2 1 1 2) (1 3 1 2 1 1 2 1) (3 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 3) (2 1 1 2 1 1 3 1) (1 1 2 1 1 3 1 2) (1 2 1 1 3 1 2 1) (elems 8 sum 12 olaps 56))" "((2 1 1 3 2 1 1 1) (1 1 3 2 1 1 1 2) (1 3 2 1 1 1 2 1) (3 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 3) (1 1 1 2 1 1 3 2) (1 1 2 1 1 3 2 1) (1 2 1 1 3 2 1 1) (elems 8 sum 12 olaps 56))" "((2 1 1 4 1 1 1 1) (1 1 4 1 1 1 1 2) (1 4 1 1 1 1 2 1) (4 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 4) (1 1 1 2 1 1 4 1) (1 1 2 1 1 4 1 1) (1 2 1 1 4 1 1 1) (elems 8 sum 12 olaps 56))" "((2 1 2 1 1 1 1 3) (1 2 1 1 1 1 3 2) (2 1 1 1 1 3 2 1) (1 1 1 1 3 2 1 2) (1 1 1 3 2 1 2 1) (1 1 3 2 1 2 1 1) (1 3 2 1 2 1 1 1) (3 2 1 2 1 1 1 1) (elems 8 sum 12 olaps 56))" "((2 1 2 1 1 1 2 2) (1 2 1 1 1 2 2 2) (2 1 1 1 2 2 2 1) (1 1 1 2 2 2 1 2) (1 1 2 2 2 1 2 1) (1 2 2 2 1 2 1 1) (2 2 2 1 2 1 1 1) (2 2 1 2 1 1 1 2) (elems 8 sum 12 olaps 56))" "((2 1 2 1 1 1 3 1) (1 2 1 1 1 3 1 2) (2 1 1 1 3 1 2 1) (1 1 1 3 1 2 1 2) (1 1 3 1 2 1 2 1) (1 3 1 2 1 2 1 1) (3 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 3) (elems 8 sum 12 olaps 56))" "((2 1 2 1 1 2 1 2) (1 2 1 1 2 1 2 2) (2 1 1 2 1 2 2 1) (1 1 2 1 2 2 1 2) (1 2 1 2 2 1 2 1) (2 1 2 2 1 2 1 1) (1 2 2 1 2 1 1 2) (2 2 1 2 1 1 2 1) (elems 8 sum 12 olaps 56))" "((2 1 2 1 1 2 2 1) (1 2 1 1 2 2 1 2) (2 1 1 2 2 1 2 1) (1 1 2 2 1 2 1 2) (1 2 2 1 2 1 2 1) (2 2 1 2 1 2 1 1) (2 1 2 1 2 1 1 2) (1 2 1 2 1 1 2 2) (elems 8 sum 12 olaps 56))" "((2 1 2 1 1 3 1 1) (1 2 1 1 3 1 1 2) (2 1 1 3 1 1 2 1) (1 1 3 1 1 2 1 2) (1 3 1 1 2 1 2 1) (3 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 3) (1 2 1 2 1 1 3 1) (elems 8 sum 12 olaps 56))" "((2 1 2 1 2 1 1 2) (1 2 1 2 1 1 2 2) (2 1 2 1 1 2 2 1) (1 2 1 1 2 2 1 2) (2 1 1 2 2 1 2 1) (1 1 2 2 1 2 1 2) (1 2 2 1 2 1 2 1) (2 2 1 2 1 2 1 1) (elems 8 sum 12 olaps 56))" "((2 1 2 1 2 1 2 1) (1 2 1 2 1 2 1 2) (2 1 2 1 2 1 2 1) (1 2 1 2 1 2 1 2) (2 1 2 1 2 1 2 1) (1 2 1 2 1 2 1 2) (2 1 2 1 2 1 2 1) (1 2 1 2 1 2 1 2) (elems 8 sum 12 olaps 56))" "((2 1 2 1 2 2 1 1) (1 2 1 2 2 1 1 2) (2 1 2 2 1 1 2 1) (1 2 2 1 1 2 1 2) (2 2 1 1 2 1 2 1) (2 1 1 2 1 2 1 2) (1 1 2 1 2 1 2 2) (1 2 1 2 1 2 2 1) (elems 8 sum 12 olaps 56))" "((2 1 2 1 3 1 1 1) (1 2 1 3 1 1 1 2) (2 1 3 1 1 1 2 1) (1 3 1 1 1 2 1 2) (3 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 3) (1 1 2 1 2 1 3 1) (1 2 1 2 1 3 1 1) (elems 8 sum 12 olaps 56))" "((2 1 2 2 1 1 1 2) (1 2 2 1 1 1 2 2) (2 2 1 1 1 2 2 1) (2 1 1 1 2 2 1 2) (1 1 1 2 2 1 2 2) (1 1 2 2 1 2 2 1) (1 2 2 1 2 2 1 1) (2 2 1 2 2 1 1 1) (elems 8 sum 12 olaps 56))" "((2 1 2 2 1 1 2 1) (1 2 2 1 1 2 1 2) (2 2 1 1 2 1 2 1) (2 1 1 2 1 2 1 2) (1 1 2 1 2 1 2 2) (1 2 1 2 1 2 2 1) (2 1 2 1 2 2 1 1) (1 2 1 2 2 1 1 2) (elems 8 sum 12 olaps 56))" "((2 1 2 2 1 2 1 1) (1 2 2 1 2 1 1 2) (2 2 1 2 1 1 2 1) (2 1 2 1 1 2 1 2) (1 2 1 1 2 1 2 2) (2 1 1 2 1 2 2 1) (1 1 2 1 2 2 1 2) (1 2 1 2 2 1 2 1) (elems 8 sum 12 olaps 56))" "((2 1 2 2 2 1 1 1) (1 2 2 2 1 1 1 2) (2 2 2 1 1 1 2 1) (2 2 1 1 1 2 1 2) (2 1 1 1 2 1 2 2) (1 1 1 2 1 2 2 2) (1 1 2 1 2 2 2 1) (1 2 1 2 2 2 1 1) (elems 8 sum 12 olaps 56))" "((2 1 2 3 1 1 1 1) (1 2 3 1 1 1 1 2) (2 3 1 1 1 1 2 1) (3 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 3) (1 1 1 2 1 2 3 1) (1 1 2 1 2 3 1 1) (1 2 1 2 3 1 1 1) (elems 8 sum 12 olaps 56))" "((2 1 3 1 1 1 1 2) (1 3 1 1 1 1 2 2) (3 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 3) (1 1 1 2 2 1 3 1) (1 1 2 2 1 3 1 1) (1 2 2 1 3 1 1 1) (2 2 1 3 1 1 1 1) (elems 8 sum 12 olaps 56))" "((2 1 3 1 1 1 2 1) (1 3 1 1 1 2 1 2) (3 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 3) (1 1 2 1 2 1 3 1) (1 2 1 2 1 3 1 1) (2 1 2 1 3 1 1 1) (1 2 1 3 1 1 1 2) (elems 8 sum 12 olaps 56))" "((2 1 3 1 1 2 1 1) (1 3 1 1 2 1 1 2) (3 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 3) (1 2 1 1 2 1 3 1) (2 1 1 2 1 3 1 1) (1 1 2 1 3 1 1 2) (1 2 1 3 1 1 2 1) (elems 8 sum 12 olaps 56))" "((2 1 3 1 2 1 1 1) (1 3 1 2 1 1 1 2) (3 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 3) (2 1 1 1 2 1 3 1) (1 1 1 2 1 3 1 2) (1 1 2 1 3 1 2 1) (1 2 1 3 1 2 1 1) (elems 8 sum 12 olaps 56))" "((2 1 3 2 1 1 1 1) (1 3 2 1 1 1 1 2) (3 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 3) (1 1 1 1 2 1 3 2) (1 1 1 2 1 3 2 1) (1 1 2 1 3 2 1 1) (1 2 1 3 2 1 1 1) (elems 8 sum 12 olaps 56))" "((2 1 4 1 1 1 1 1) (1 4 1 1 1 1 1 2) (4 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 4) (1 1 1 1 2 1 4 1) (1 1 1 2 1 4 1 1) (1 1 2 1 4 1 1 1) (1 2 1 4 1 1 1 1) (elems 8 sum 12 olaps 56))" "((2 2 1 1 1 1 1 3) (2 1 1 1 1 1 3 2) (1 1 1 1 1 3 2 2) (1 1 1 1 3 2 2 1) (1 1 1 3 2 2 1 1) (1 1 3 2 2 1 1 1) (1 3 2 2 1 1 1 1) (3 2 2 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((2 2 1 1 1 1 2 2) (2 1 1 1 1 2 2 2) (1 1 1 1 2 2 2 2) (1 1 1 2 2 2 2 1) (1 1 2 2 2 2 1 1) (1 2 2 2 2 1 1 1) (2 2 2 2 1 1 1 1) (2 2 2 1 1 1 1 2) (elems 8 sum 12 olaps 56))" "((2 2 1 1 1 1 3 1) (2 1 1 1 1 3 1 2) (1 1 1 1 3 1 2 2) (1 1 1 3 1 2 2 1) (1 1 3 1 2 2 1 1) (1 3 1 2 2 1 1 1) (3 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 3) (elems 8 sum 12 olaps 56))" "((2 2 1 1 1 2 1 2) (2 1 1 1 2 1 2 2) (1 1 1 2 1 2 2 2) (1 1 2 1 2 2 2 1) (1 2 1 2 2 2 1 1) (2 1 2 2 2 1 1 1) (1 2 2 2 1 1 1 2) (2 2 2 1 1 1 2 1) (elems 8 sum 12 olaps 56))" "((2 2 1 1 1 2 2 1) (2 1 1 1 2 2 1 2) (1 1 1 2 2 1 2 2) (1 1 2 2 1 2 2 1) (1 2 2 1 2 2 1 1) (2 2 1 2 2 1 1 1) (2 1 2 2 1 1 1 2) (1 2 2 1 1 1 2 2) (elems 8 sum 12 olaps 56))" "((2 2 1 1 1 3 1 1) (2 1 1 1 3 1 1 2) (1 1 1 3 1 1 2 2) (1 1 3 1 1 2 2 1) (1 3 1 1 2 2 1 1) (3 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 3) (1 2 2 1 1 1 3 1) (elems 8 sum 12 olaps 56))" "((2 2 1 1 2 1 1 2) (2 1 1 2 1 1 2 2) (1 1 2 1 1 2 2 2) (1 2 1 1 2 2 2 1) (2 1 1 2 2 2 1 1) (1 1 2 2 2 1 1 2) (1 2 2 2 1 1 2 1) (2 2 2 1 1 2 1 1) (elems 8 sum 12 olaps 56))" "((2 2 1 1 2 1 2 1) (2 1 1 2 1 2 1 2) (1 1 2 1 2 1 2 2) (1 2 1 2 1 2 2 1) (2 1 2 1 2 2 1 1) (1 2 1 2 2 1 1 2) (2 1 2 2 1 1 2 1) (1 2 2 1 1 2 1 2) (elems 8 sum 12 olaps 56))" "((2 2 1 1 2 2 1 1) (2 1 1 2 2 1 1 2) (1 1 2 2 1 1 2 2) (1 2 2 1 1 2 2 1) (2 2 1 1 2 2 1 1) (2 1 1 2 2 1 1 2) (1 1 2 2 1 1 2 2) (1 2 2 1 1 2 2 1) (elems 8 sum 12 olaps 56))" "((2 2 1 1 3 1 1 1) (2 1 1 3 1 1 1 2) (1 1 3 1 1 1 2 2) (1 3 1 1 1 2 2 1) (3 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 3) (1 1 2 2 1 1 3 1) (1 2 2 1 1 3 1 1) (elems 8 sum 12 olaps 56))" "((2 2 1 2 1 1 1 2) (2 1 2 1 1 1 2 2) (1 2 1 1 1 2 2 2) (2 1 1 1 2 2 2 1) (1 1 1 2 2 2 1 2) (1 1 2 2 2 1 2 1) (1 2 2 2 1 2 1 1) (2 2 2 1 2 1 1 1) (elems 8 sum 12 olaps 56))" "((2 2 1 2 1 1 2 1) (2 1 2 1 1 2 1 2) (1 2 1 1 2 1 2 2) (2 1 1 2 1 2 2 1) (1 1 2 1 2 2 1 2) (1 2 1 2 2 1 2 1) (2 1 2 2 1 2 1 1) (1 2 2 1 2 1 1 2) (elems 8 sum 12 olaps 56))" "((2 2 1 2 1 2 1 1) (2 1 2 1 2 1 1 2) (1 2 1 2 1 1 2 2) (2 1 2 1 1 2 2 1) (1 2 1 1 2 2 1 2) (2 1 1 2 2 1 2 1) (1 1 2 2 1 2 1 2) (1 2 2 1 2 1 2 1) (elems 8 sum 12 olaps 56))" "((2 2 1 2 2 1 1 1) (2 1 2 2 1 1 1 2) (1 2 2 1 1 1 2 2) (2 2 1 1 1 2 2 1) (2 1 1 1 2 2 1 2) (1 1 1 2 2 1 2 2) (1 1 2 2 1 2 2 1) (1 2 2 1 2 2 1 1) (elems 8 sum 12 olaps 56))" "((2 2 1 3 1 1 1 1) (2 1 3 1 1 1 1 2) (1 3 1 1 1 1 2 2) (3 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 3) (1 1 1 2 2 1 3 1) (1 1 2 2 1 3 1 1) (1 2 2 1 3 1 1 1) (elems 8 sum 12 olaps 56))" "((2 2 2 1 1 1 1 2) (2 2 1 1 1 1 2 2) (2 1 1 1 1 2 2 2) (1 1 1 1 2 2 2 2) (1 1 1 2 2 2 2 1) (1 1 2 2 2 2 1 1) (1 2 2 2 2 1 1 1) (2 2 2 2 1 1 1 1) (elems 8 sum 12 olaps 56))" "((2 2 2 1 1 1 2 1) (2 2 1 1 1 2 1 2) (2 1 1 1 2 1 2 2) (1 1 1 2 1 2 2 2) (1 1 2 1 2 2 2 1) (1 2 1 2 2 2 1 1) (2 1 2 2 2 1 1 1) (1 2 2 2 1 1 1 2) (elems 8 sum 12 olaps 56))" "((2 2 2 1 1 2 1 1) (2 2 1 1 2 1 1 2) (2 1 1 2 1 1 2 2) (1 1 2 1 1 2 2 2) (1 2 1 1 2 2 2 1) (2 1 1 2 2 2 1 1) (1 1 2 2 2 1 1 2) (1 2 2 2 1 1 2 1) (elems 8 sum 12 olaps 56))" "((2 2 2 1 2 1 1 1) (2 2 1 2 1 1 1 2) (2 1 2 1 1 1 2 2) (1 2 1 1 1 2 2 2) (2 1 1 1 2 2 2 1) (1 1 1 2 2 2 1 2) (1 1 2 2 2 1 2 1) (1 2 2 2 1 2 1 1) (elems 8 sum 12 olaps 56))" "((2 2 2 2 1 1 1 1) (2 2 2 1 1 1 1 2) (2 2 1 1 1 1 2 2) (2 1 1 1 1 2 2 2) (1 1 1 1 2 2 2 2) (1 1 1 2 2 2 2 1) (1 1 2 2 2 2 1 1) (1 2 2 2 2 1 1 1) (elems 8 sum 12 olaps 56))" "((2 2 3 1 1 1 1 1) (2 3 1 1 1 1 1 2) (3 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 3) (1 1 1 1 2 2 3 1) (1 1 1 2 2 3 1 1) (1 1 2 2 3 1 1 1) (1 2 2 3 1 1 1 1) (elems 8 sum 12 olaps 56))" "((2 3 1 1 1 1 1 2) (3 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 3) (1 1 1 1 2 2 3 1) (1 1 1 2 2 3 1 1) (1 1 2 2 3 1 1 1) (1 2 2 3 1 1 1 1) (2 2 3 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((2 3 1 1 1 1 2 1) (3 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 3) (1 1 1 2 1 2 3 1) (1 1 2 1 2 3 1 1) (1 2 1 2 3 1 1 1) (2 1 2 3 1 1 1 1) (1 2 3 1 1 1 1 2) (elems 8 sum 12 olaps 56))" "((2 3 1 1 1 2 1 1) (3 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 3) (1 1 2 1 1 2 3 1) (1 2 1 1 2 3 1 1) (2 1 1 2 3 1 1 1) (1 1 2 3 1 1 1 2) (1 2 3 1 1 1 2 1) (elems 8 sum 12 olaps 56))" "((2 3 1 1 2 1 1 1) (3 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 3) (1 2 1 1 1 2 3 1) (2 1 1 1 2 3 1 1) (1 1 1 2 3 1 1 2) (1 1 2 3 1 1 2 1) (1 2 3 1 1 2 1 1) (elems 8 sum 12 olaps 56))" "((2 3 1 2 1 1 1 1) (3 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 3) (2 1 1 1 1 2 3 1) (1 1 1 1 2 3 1 2) (1 1 1 2 3 1 2 1) (1 1 2 3 1 2 1 1) (1 2 3 1 2 1 1 1) (elems 8 sum 12 olaps 56))" "((2 3 2 1 1 1 1 1) (3 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 3) (1 1 1 1 1 2 3 2) (1 1 1 1 2 3 2 1) (1 1 1 2 3 2 1 1) (1 1 2 3 2 1 1 1) (1 2 3 2 1 1 1 1) (elems 8 sum 12 olaps 56))" "((2 4 1 1 1 1 1 1) (4 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 4) (1 1 1 1 1 2 4 1) (1 1 1 1 2 4 1 1) (1 1 1 2 4 1 1 1) (1 1 2 4 1 1 1 1) (1 2 4 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((3 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 3) (1 1 1 1 1 3 3 1) (1 1 1 1 3 3 1 1) (1 1 1 3 3 1 1 1) (1 1 3 3 1 1 1 1) (1 3 3 1 1 1 1 1) (3 3 1 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((3 1 1 1 1 1 2 2) (1 1 1 1 1 2 2 3) (1 1 1 1 2 2 3 1) (1 1 1 2 2 3 1 1) (1 1 2 2 3 1 1 1) (1 2 2 3 1 1 1 1) (2 2 3 1 1 1 1 1) (2 3 1 1 1 1 1 2) (elems 8 sum 12 olaps 56))" "((3 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 3) (1 1 1 1 3 1 3 1) (1 1 1 3 1 3 1 1) (1 1 3 1 3 1 1 1) (1 3 1 3 1 1 1 1) (3 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 3) (elems 8 sum 12 olaps 56))" "((3 1 1 1 1 2 1 2) (1 1 1 1 2 1 2 3) (1 1 1 2 1 2 3 1) (1 1 2 1 2 3 1 1) (1 2 1 2 3 1 1 1) (2 1 2 3 1 1 1 1) (1 2 3 1 1 1 1 2) (2 3 1 1 1 1 2 1) (elems 8 sum 12 olaps 56))" "((3 1 1 1 1 2 2 1) (1 1 1 1 2 2 1 3) (1 1 1 2 2 1 3 1) (1 1 2 2 1 3 1 1) (1 2 2 1 3 1 1 1) (2 2 1 3 1 1 1 1) (2 1 3 1 1 1 1 2) (1 3 1 1 1 1 2 2) (elems 8 sum 12 olaps 56))" "((3 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 3) (1 1 1 3 1 1 3 1) (1 1 3 1 1 3 1 1) (1 3 1 1 3 1 1 1) (3 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 3) (1 3 1 1 1 1 3 1) (elems 8 sum 12 olaps 56))" "((3 1 1 1 2 1 1 2) (1 1 1 2 1 1 2 3) (1 1 2 1 1 2 3 1) (1 2 1 1 2 3 1 1) (2 1 1 2 3 1 1 1) (1 1 2 3 1 1 1 2) (1 2 3 1 1 1 2 1) (2 3 1 1 1 2 1 1) (elems 8 sum 12 olaps 56))" "((3 1 1 1 2 1 2 1) (1 1 1 2 1 2 1 3) (1 1 2 1 2 1 3 1) (1 2 1 2 1 3 1 1) (2 1 2 1 3 1 1 1) (1 2 1 3 1 1 1 2) (2 1 3 1 1 1 2 1) (1 3 1 1 1 2 1 2) (elems 8 sum 12 olaps 56))" "((3 1 1 1 2 2 1 1) (1 1 1 2 2 1 1 3) (1 1 2 2 1 1 3 1) (1 2 2 1 1 3 1 1) (2 2 1 1 3 1 1 1) (2 1 1 3 1 1 1 2) (1 1 3 1 1 1 2 2) (1 3 1 1 1 2 2 1) (elems 8 sum 12 olaps 56))" "((3 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 3) (1 1 3 1 1 1 3 1) (1 3 1 1 1 3 1 1) (3 1 1 1 3 1 1 1) (1 1 1 3 1 1 1 3) (1 1 3 1 1 1 3 1) (1 3 1 1 1 3 1 1) (elems 8 sum 12 olaps 56))" "((3 1 1 2 1 1 1 2) (1 1 2 1 1 1 2 3) (1 2 1 1 1 2 3 1) (2 1 1 1 2 3 1 1) (1 1 1 2 3 1 1 2) (1 1 2 3 1 1 2 1) (1 2 3 1 1 2 1 1) (2 3 1 1 2 1 1 1) (elems 8 sum 12 olaps 56))" "((3 1 1 2 1 1 2 1) (1 1 2 1 1 2 1 3) (1 2 1 1 2 1 3 1) (2 1 1 2 1 3 1 1) (1 1 2 1 3 1 1 2) (1 2 1 3 1 1 2 1) (2 1 3 1 1 2 1 1) (1 3 1 1 2 1 1 2) (elems 8 sum 12 olaps 56))" "((3 1 1 2 1 2 1 1) (1 1 2 1 2 1 1 3) (1 2 1 2 1 1 3 1) (2 1 2 1 1 3 1 1) (1 2 1 1 3 1 1 2) (2 1 1 3 1 1 2 1) (1 1 3 1 1 2 1 2) (1 3 1 1 2 1 2 1) (elems 8 sum 12 olaps 56))" "((3 1 1 2 2 1 1 1) (1 1 2 2 1 1 1 3) (1 2 2 1 1 1 3 1) (2 2 1 1 1 3 1 1) (2 1 1 1 3 1 1 2) (1 1 1 3 1 1 2 2) (1 1 3 1 1 2 2 1) (1 3 1 1 2 2 1 1) (elems 8 sum 12 olaps 56))" "((3 1 1 3 1 1 1 1) (1 1 3 1 1 1 1 3) (1 3 1 1 1 1 3 1) (3 1 1 1 1 3 1 1) (1 1 1 1 3 1 1 3) (1 1 1 3 1 1 3 1) (1 1 3 1 1 3 1 1) (1 3 1 1 3 1 1 1) (elems 8 sum 12 olaps 56))" "((3 1 2 1 1 1 1 2) (1 2 1 1 1 1 2 3) (2 1 1 1 1 2 3 1) (1 1 1 1 2 3 1 2) (1 1 1 2 3 1 2 1) (1 1 2 3 1 2 1 1) (1 2 3 1 2 1 1 1) (2 3 1 2 1 1 1 1) (elems 8 sum 12 olaps 56))" "((3 1 2 1 1 1 2 1) (1 2 1 1 1 2 1 3) (2 1 1 1 2 1 3 1) (1 1 1 2 1 3 1 2) (1 1 2 1 3 1 2 1) (1 2 1 3 1 2 1 1) (2 1 3 1 2 1 1 1) (1 3 1 2 1 1 1 2) (elems 8 sum 12 olaps 56))" "((3 1 2 1 1 2 1 1) (1 2 1 1 2 1 1 3) (2 1 1 2 1 1 3 1) (1 1 2 1 1 3 1 2) (1 2 1 1 3 1 2 1) (2 1 1 3 1 2 1 1) (1 1 3 1 2 1 1 2) (1 3 1 2 1 1 2 1) (elems 8 sum 12 olaps 56))" "((3 1 2 1 2 1 1 1) (1 2 1 2 1 1 1 3) (2 1 2 1 1 1 3 1) (1 2 1 1 1 3 1 2) (2 1 1 1 3 1 2 1) (1 1 1 3 1 2 1 2) (1 1 3 1 2 1 2 1) (1 3 1 2 1 2 1 1) (elems 8 sum 12 olaps 56))" "((3 1 2 2 1 1 1 1) (1 2 2 1 1 1 1 3) (2 2 1 1 1 1 3 1) (2 1 1 1 1 3 1 2) (1 1 1 1 3 1 2 2) (1 1 1 3 1 2 2 1) (1 1 3 1 2 2 1 1) (1 3 1 2 2 1 1 1) (elems 8 sum 12 olaps 56))" "((3 1 3 1 1 1 1 1) (1 3 1 1 1 1 1 3) (3 1 1 1 1 1 3 1) (1 1 1 1 1 3 1 3) (1 1 1 1 3 1 3 1) (1 1 1 3 1 3 1 1) (1 1 3 1 3 1 1 1) (1 3 1 3 1 1 1 1) (elems 8 sum 12 olaps 56))" "((3 2 1 1 1 1 1 2) (2 1 1 1 1 1 2 3) (1 1 1 1 1 2 3 2) (1 1 1 1 2 3 2 1) (1 1 1 2 3 2 1 1) (1 1 2 3 2 1 1 1) (1 2 3 2 1 1 1 1) (2 3 2 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((3 2 1 1 1 1 2 1) (2 1 1 1 1 2 1 3) (1 1 1 1 2 1 3 2) (1 1 1 2 1 3 2 1) (1 1 2 1 3 2 1 1) (1 2 1 3 2 1 1 1) (2 1 3 2 1 1 1 1) (1 3 2 1 1 1 1 2) (elems 8 sum 12 olaps 56))" "((3 2 1 1 1 2 1 1) (2 1 1 1 2 1 1 3) (1 1 1 2 1 1 3 2) (1 1 2 1 1 3 2 1) (1 2 1 1 3 2 1 1) (2 1 1 3 2 1 1 1) (1 1 3 2 1 1 1 2) (1 3 2 1 1 1 2 1) (elems 8 sum 12 olaps 56))" "((3 2 1 1 2 1 1 1) (2 1 1 2 1 1 1 3) (1 1 2 1 1 1 3 2) (1 2 1 1 1 3 2 1) (2 1 1 1 3 2 1 1) (1 1 1 3 2 1 1 2) (1 1 3 2 1 1 2 1) (1 3 2 1 1 2 1 1) (elems 8 sum 12 olaps 56))" "((3 2 1 2 1 1 1 1) (2 1 2 1 1 1 1 3) (1 2 1 1 1 1 3 2) (2 1 1 1 1 3 2 1) (1 1 1 1 3 2 1 2) (1 1 1 3 2 1 2 1) (1 1 3 2 1 2 1 1) (1 3 2 1 2 1 1 1) (elems 8 sum 12 olaps 56))" "((3 2 2 1 1 1 1 1) (2 2 1 1 1 1 1 3) (2 1 1 1 1 1 3 2) (1 1 1 1 1 3 2 2) (1 1 1 1 3 2 2 1) (1 1 1 3 2 2 1 1) (1 1 3 2 2 1 1 1) (1 3 2 2 1 1 1 1) (elems 8 sum 12 olaps 56))" "((3 3 1 1 1 1 1 1) (3 1 1 1 1 1 1 3) (1 1 1 1 1 1 3 3) (1 1 1 1 1 3 3 1) (1 1 1 1 3 3 1 1) (1 1 1 3 3 1 1 1) (1 1 3 3 1 1 1 1) (1 3 3 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((4 1 1 1 1 1 1 2) (1 1 1 1 1 1 2 4) (1 1 1 1 1 2 4 1) (1 1 1 1 2 4 1 1) (1 1 1 2 4 1 1 1) (1 1 2 4 1 1 1 1) (1 2 4 1 1 1 1 1) (2 4 1 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((4 1 1 1 1 1 2 1) (1 1 1 1 1 2 1 4) (1 1 1 1 2 1 4 1) (1 1 1 2 1 4 1 1) (1 1 2 1 4 1 1 1) (1 2 1 4 1 1 1 1) (2 1 4 1 1 1 1 1) (1 4 1 1 1 1 1 2) (elems 8 sum 12 olaps 56))" "((4 1 1 1 1 2 1 1) (1 1 1 1 2 1 1 4) (1 1 1 2 1 1 4 1) (1 1 2 1 1 4 1 1) (1 2 1 1 4 1 1 1) (2 1 1 4 1 1 1 1) (1 1 4 1 1 1 1 2) (1 4 1 1 1 1 2 1) (elems 8 sum 12 olaps 56))" "((4 1 1 1 2 1 1 1) (1 1 1 2 1 1 1 4) (1 1 2 1 1 1 4 1) (1 2 1 1 1 4 1 1) (2 1 1 1 4 1 1 1) (1 1 1 4 1 1 1 2) (1 1 4 1 1 1 2 1) (1 4 1 1 1 2 1 1) (elems 8 sum 12 olaps 56))" "((4 1 1 2 1 1 1 1) (1 1 2 1 1 1 1 4) (1 2 1 1 1 1 4 1) (2 1 1 1 1 4 1 1) (1 1 1 1 4 1 1 2) (1 1 1 4 1 1 2 1) (1 1 4 1 1 2 1 1) (1 4 1 1 2 1 1 1) (elems 8 sum 12 olaps 56))" "((4 1 2 1 1 1 1 1) (1 2 1 1 1 1 1 4) (2 1 1 1 1 1 4 1) (1 1 1 1 1 4 1 2) (1 1 1 1 4 1 2 1) (1 1 1 4 1 2 1 1) (1 1 4 1 2 1 1 1) (1 4 1 2 1 1 1 1) (elems 8 sum 12 olaps 56))" "((4 2 1 1 1 1 1 1) (2 1 1 1 1 1 1 4) (1 1 1 1 1 1 4 2) (1 1 1 1 1 4 2 1) (1 1 1 1 4 2 1 1) (1 1 1 4 2 1 1 1) (1 1 4 2 1 1 1 1) (1 4 2 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((5 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 5) (1 1 1 1 1 1 5 1) (1 1 1 1 1 5 1 1) (1 1 1 1 5 1 1 1) (1 1 1 5 1 1 1 1) (1 1 5 1 1 1 1 1) (1 5 1 1 1 1 1 1) (elems 8 sum 12 olaps 56))" "((1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1) (elems 9 sum 10 olaps 72))" "((1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 2) (elems 9 sum 10 olaps 72))" "((1 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 1) (elems 9 sum 10 olaps 72))" "((1 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 1) (elems 9 sum 10 olaps 72))" "((1 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 1) (elems 9 sum 10 olaps 72))" "((1 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 1) (elems 9 sum 10 olaps 72))" "((1 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 1) (elems 9 sum 10 olaps 72))" "((1 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 1) (elems 9 sum 10 olaps 72))" "((2 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1) (elems 9 sum 10 olaps 72))" "((1 1 1 1 1 1 1 1 4) (1 1 1 1 1 1 1 4 1) (1 1 1 1 1 1 4 1 1) (1 1 1 1 1 4 1 1 1) (1 1 1 1 4 1 1 1 1) (1 1 1 4 1 1 1 1 1) (1 1 4 1 1 1 1 1 1) (1 4 1 1 1 1 1 1 1) (4 1 1 1 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 1 1 2 3) (1 1 1 1 1 1 2 3 1) (1 1 1 1 1 2 3 1 1) (1 1 1 1 2 3 1 1 1) (1 1 1 2 3 1 1 1 1) (1 1 2 3 1 1 1 1 1) (1 2 3 1 1 1 1 1 1) (2 3 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 2) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 1 1 3 2) (1 1 1 1 1 1 3 2 1) (1 1 1 1 1 3 2 1 1) (1 1 1 1 3 2 1 1 1) (1 1 1 3 2 1 1 1 1) (1 1 3 2 1 1 1 1 1) (1 3 2 1 1 1 1 1 1) (3 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 3) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 1 1 4 1) (1 1 1 1 1 1 4 1 1) (1 1 1 1 1 4 1 1 1) (1 1 1 1 4 1 1 1 1) (1 1 1 4 1 1 1 1 1) (1 1 4 1 1 1 1 1 1) (1 4 1 1 1 1 1 1 1) (4 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 4) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 1 2 1 3) (1 1 1 1 1 2 1 3 1) (1 1 1 1 2 1 3 1 1) (1 1 1 2 1 3 1 1 1) (1 1 2 1 3 1 1 1 1) (1 2 1 3 1 1 1 1 1) (2 1 3 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 2) (3 1 1 1 1 1 1 2 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 1 2 2 2) (1 1 1 1 1 2 2 2 1) (1 1 1 1 2 2 2 1 1) (1 1 1 2 2 2 1 1 1) (1 1 2 2 2 1 1 1 1) (1 2 2 2 1 1 1 1 1) (2 2 2 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 2 2) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 1 2 3 1) (1 1 1 1 1 2 3 1 1) (1 1 1 1 2 3 1 1 1) (1 1 1 2 3 1 1 1 1) (1 1 2 3 1 1 1 1 1) (1 2 3 1 1 1 1 1 1) (2 3 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 3) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 1 3 1 2) (1 1 1 1 1 3 1 2 1) (1 1 1 1 3 1 2 1 1) (1 1 1 3 1 2 1 1 1) (1 1 3 1 2 1 1 1 1) (1 3 1 2 1 1 1 1 1) (3 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 3) (2 1 1 1 1 1 1 3 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 1 3 2 1) (1 1 1 1 1 3 2 1 1) (1 1 1 1 3 2 1 1 1) (1 1 1 3 2 1 1 1 1) (1 1 3 2 1 1 1 1 1) (1 3 2 1 1 1 1 1 1) (3 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 3 2) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 1 4 1 1) (1 1 1 1 1 4 1 1 1) (1 1 1 1 4 1 1 1 1) (1 1 1 4 1 1 1 1 1) (1 1 4 1 1 1 1 1 1) (1 4 1 1 1 1 1 1 1) (4 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 4) (1 1 1 1 1 1 1 4 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 2 1 1 3) (1 1 1 1 2 1 1 3 1) (1 1 1 2 1 1 3 1 1) (1 1 2 1 1 3 1 1 1) (1 2 1 1 3 1 1 1 1) (2 1 1 3 1 1 1 1 1) (1 1 3 1 1 1 1 1 2) (1 3 1 1 1 1 1 2 1) (3 1 1 1 1 1 2 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 2 1 2 2) (1 1 1 1 2 1 2 2 1) (1 1 1 2 1 2 2 1 1) (1 1 2 1 2 2 1 1 1) (1 2 1 2 2 1 1 1 1) (2 1 2 2 1 1 1 1 1) (1 2 2 1 1 1 1 1 2) (2 2 1 1 1 1 1 2 1) (2 1 1 1 1 1 2 1 2) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 2 1 3 1) (1 1 1 1 2 1 3 1 1) (1 1 1 2 1 3 1 1 1) (1 1 2 1 3 1 1 1 1) (1 2 1 3 1 1 1 1 1) (2 1 3 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 2) (3 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 3) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 2 2 1 2) (1 1 1 1 2 2 1 2 1) (1 1 1 2 2 1 2 1 1) (1 1 2 2 1 2 1 1 1) (1 2 2 1 2 1 1 1 1) (2 2 1 2 1 1 1 1 1) (2 1 2 1 1 1 1 1 2) (1 2 1 1 1 1 1 2 2) (2 1 1 1 1 1 2 2 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 2 2 2 1) (1 1 1 1 2 2 2 1 1) (1 1 1 2 2 2 1 1 1) (1 1 2 2 2 1 1 1 1) (1 2 2 2 1 1 1 1 1) (2 2 2 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 2 2 2) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 2 3 1 1) (1 1 1 1 2 3 1 1 1) (1 1 1 2 3 1 1 1 1) (1 1 2 3 1 1 1 1 1) (1 2 3 1 1 1 1 1 1) (2 3 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 3) (1 1 1 1 1 1 2 3 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 3 1 1 2) (1 1 1 1 3 1 1 2 1) (1 1 1 3 1 1 2 1 1) (1 1 3 1 1 2 1 1 1) (1 3 1 1 2 1 1 1 1) (3 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 3) (1 2 1 1 1 1 1 3 1) (2 1 1 1 1 1 3 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 3 1 2 1) (1 1 1 1 3 1 2 1 1) (1 1 1 3 1 2 1 1 1) (1 1 3 1 2 1 1 1 1) (1 3 1 2 1 1 1 1 1) (3 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 3) (2 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 3 1 2) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 3 2 1 1) (1 1 1 1 3 2 1 1 1) (1 1 1 3 2 1 1 1 1) (1 1 3 2 1 1 1 1 1) (1 3 2 1 1 1 1 1 1) (3 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 3 2) (1 1 1 1 1 1 3 2 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 4 1 1 1) (1 1 1 1 4 1 1 1 1) (1 1 1 4 1 1 1 1 1) (1 1 4 1 1 1 1 1 1) (1 4 1 1 1 1 1 1 1) (4 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 4) (1 1 1 1 1 1 1 4 1) (1 1 1 1 1 1 4 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 2 1 1 1 3) (1 1 1 2 1 1 1 3 1) (1 1 2 1 1 1 3 1 1) (1 2 1 1 1 3 1 1 1) (2 1 1 1 3 1 1 1 1) (1 1 1 3 1 1 1 1 2) (1 1 3 1 1 1 1 2 1) (1 3 1 1 1 1 2 1 1) (3 1 1 1 1 2 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 2 1 1 2 2) (1 1 1 2 1 1 2 2 1) (1 1 2 1 1 2 2 1 1) (1 2 1 1 2 2 1 1 1) (2 1 1 2 2 1 1 1 1) (1 1 2 2 1 1 1 1 2) (1 2 2 1 1 1 1 2 1) (2 2 1 1 1 1 2 1 1) (2 1 1 1 1 2 1 1 2) (elems 9 sum 12 olaps 72))" "((1 1 1 1 2 1 1 3 1) (1 1 1 2 1 1 3 1 1) (1 1 2 1 1 3 1 1 1) (1 2 1 1 3 1 1 1 1) (2 1 1 3 1 1 1 1 1) (1 1 3 1 1 1 1 1 2) (1 3 1 1 1 1 1 2 1) (3 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 3) (elems 9 sum 12 olaps 72))" "((1 1 1 1 2 1 2 1 2) (1 1 1 2 1 2 1 2 1) (1 1 2 1 2 1 2 1 1) (1 2 1 2 1 2 1 1 1) (2 1 2 1 2 1 1 1 1) (1 2 1 2 1 1 1 1 2) (2 1 2 1 1 1 1 2 1) (1 2 1 1 1 1 2 1 2) (2 1 1 1 1 2 1 2 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 2 1 2 2 1) (1 1 1 2 1 2 2 1 1) (1 1 2 1 2 2 1 1 1) (1 2 1 2 2 1 1 1 1) (2 1 2 2 1 1 1 1 1) (1 2 2 1 1 1 1 1 2) (2 2 1 1 1 1 1 2 1) (2 1 1 1 1 1 2 1 2) (1 1 1 1 1 2 1 2 2) (elems 9 sum 12 olaps 72))" "((1 1 1 1 2 1 3 1 1) (1 1 1 2 1 3 1 1 1) (1 1 2 1 3 1 1 1 1) (1 2 1 3 1 1 1 1 1) (2 1 3 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 2) (3 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 3) (1 1 1 1 1 2 1 3 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 2 2 1 1 2) (1 1 1 2 2 1 1 2 1) (1 1 2 2 1 1 2 1 1) (1 2 2 1 1 2 1 1 1) (2 2 1 1 2 1 1 1 1) (2 1 1 2 1 1 1 1 2) (1 1 2 1 1 1 1 2 2) (1 2 1 1 1 1 2 2 1) (2 1 1 1 1 2 2 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 2 2 1 2 1) (1 1 1 2 2 1 2 1 1) (1 1 2 2 1 2 1 1 1) (1 2 2 1 2 1 1 1 1) (2 2 1 2 1 1 1 1 1) (2 1 2 1 1 1 1 1 2) (1 2 1 1 1 1 1 2 2) (2 1 1 1 1 1 2 2 1) (1 1 1 1 1 2 2 1 2) (elems 9 sum 12 olaps 72))" "((1 1 1 1 2 2 2 1 1) (1 1 1 2 2 2 1 1 1) (1 1 2 2 2 1 1 1 1) (1 2 2 2 1 1 1 1 1) (2 2 2 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 2 2 2) (1 1 1 1 1 2 2 2 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 2 3 1 1 1) (1 1 1 2 3 1 1 1 1) (1 1 2 3 1 1 1 1 1) (1 2 3 1 1 1 1 1 1) (2 3 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 3) (1 1 1 1 1 1 2 3 1) (1 1 1 1 1 2 3 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 3 1 1 1 2) (1 1 1 3 1 1 1 2 1) (1 1 3 1 1 1 2 1 1) (1 3 1 1 1 2 1 1 1) (3 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 3) (1 1 2 1 1 1 1 3 1) (1 2 1 1 1 1 3 1 1) (2 1 1 1 1 3 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 3 1 1 2 1) (1 1 1 3 1 1 2 1 1) (1 1 3 1 1 2 1 1 1) (1 3 1 1 2 1 1 1 1) (3 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 3) (1 2 1 1 1 1 1 3 1) (2 1 1 1 1 1 3 1 1) (1 1 1 1 1 3 1 1 2) (elems 9 sum 12 olaps 72))" "((1 1 1 1 3 1 2 1 1) (1 1 1 3 1 2 1 1 1) (1 1 3 1 2 1 1 1 1) (1 3 1 2 1 1 1 1 1) (3 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 3) (2 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 3 1 2) (1 1 1 1 1 3 1 2 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 3 2 1 1 1) (1 1 1 3 2 1 1 1 1) (1 1 3 2 1 1 1 1 1) (1 3 2 1 1 1 1 1 1) (3 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 3 2) (1 1 1 1 1 1 3 2 1) (1 1 1 1 1 3 2 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 4 1 1 1 1) (1 1 1 4 1 1 1 1 1) (1 1 4 1 1 1 1 1 1) (1 4 1 1 1 1 1 1 1) (4 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 4) (1 1 1 1 1 1 1 4 1) (1 1 1 1 1 1 4 1 1) (1 1 1 1 1 4 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 2 1 1 1 1 3) (1 1 2 1 1 1 1 3 1) (1 2 1 1 1 1 3 1 1) (2 1 1 1 1 3 1 1 1) (1 1 1 1 3 1 1 1 2) (1 1 1 3 1 1 1 2 1) (1 1 3 1 1 1 2 1 1) (1 3 1 1 1 2 1 1 1) (3 1 1 1 2 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 2 1 1 1 2 2) (1 1 2 1 1 1 2 2 1) (1 2 1 1 1 2 2 1 1) (2 1 1 1 2 2 1 1 1) (1 1 1 2 2 1 1 1 2) (1 1 2 2 1 1 1 2 1) (1 2 2 1 1 1 2 1 1) (2 2 1 1 1 2 1 1 1) (2 1 1 1 2 1 1 1 2) (elems 9 sum 12 olaps 72))" "((1 1 1 2 1 1 1 3 1) (1 1 2 1 1 1 3 1 1) (1 2 1 1 1 3 1 1 1) (2 1 1 1 3 1 1 1 1) (1 1 1 3 1 1 1 1 2) (1 1 3 1 1 1 1 2 1) (1 3 1 1 1 1 2 1 1) (3 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 3) (elems 9 sum 12 olaps 72))" "((1 1 1 2 1 1 2 1 2) (1 1 2 1 1 2 1 2 1) (1 2 1 1 2 1 2 1 1) (2 1 1 2 1 2 1 1 1) (1 1 2 1 2 1 1 1 2) (1 2 1 2 1 1 1 2 1) (2 1 2 1 1 1 2 1 1) (1 2 1 1 1 2 1 1 2) (2 1 1 1 2 1 1 2 1) (elems 9 sum 12 olaps 72))" "((1 1 1 2 1 1 2 2 1) (1 1 2 1 1 2 2 1 1) (1 2 1 1 2 2 1 1 1) (2 1 1 2 2 1 1 1 1) (1 1 2 2 1 1 1 1 2) (1 2 2 1 1 1 1 2 1) (2 2 1 1 1 1 2 1 1) (2 1 1 1 1 2 1 1 2) (1 1 1 1 2 1 1 2 2) (elems 9 sum 12 olaps 72))" "((1 1 1 2 1 1 3 1 1) (1 1 2 1 1 3 1 1 1) (1 2 1 1 3 1 1 1 1) (2 1 1 3 1 1 1 1 1) (1 1 3 1 1 1 1 1 2) (1 3 1 1 1 1 1 2 1) (3 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 3) (1 1 1 1 2 1 1 3 1) (elems 9 sum 12 olaps 72))" "((1 1 1 2 1 2 1 1 2) (1 1 2 1 2 1 1 2 1) (1 2 1 2 1 1 2 1 1) (2 1 2 1 1 2 1 1 1) (1 2 1 1 2 1 1 1 2) (2 1 1 2 1 1 1 2 1) (1 1 2 1 1 1 2 1 2) (1 2 1 1 1 2 1 2 1) (2 1 1 1 2 1 2 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 2 1 2 1 2 1) (1 1 2 1 2 1 2 1 1) (1 2 1 2 1 2 1 1 1) (2 1 2 1 2 1 1 1 1) (1 2 1 2 1 1 1 1 2) (2 1 2 1 1 1 1 2 1) (1 2 1 1 1 1 2 1 2) (2 1 1 1 1 2 1 2 1) (1 1 1 1 2 1 2 1 2) (elems 9 sum 12 olaps 72))" "((1 1 1 2 1 2 2 1 1) (1 1 2 1 2 2 1 1 1) (1 2 1 2 2 1 1 1 1) (2 1 2 2 1 1 1 1 1) (1 2 2 1 1 1 1 1 2) (2 2 1 1 1 1 1 2 1) (2 1 1 1 1 1 2 1 2) (1 1 1 1 1 2 1 2 2) (1 1 1 1 2 1 2 2 1) (elems 9 sum 12 olaps 72))" "((1 1 1 2 1 3 1 1 1) (1 1 2 1 3 1 1 1 1) (1 2 1 3 1 1 1 1 1) (2 1 3 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 2) (3 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 3) (1 1 1 1 1 2 1 3 1) (1 1 1 1 2 1 3 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 2 2 1 1 1 2) (1 1 2 2 1 1 1 2 1) (1 2 2 1 1 1 2 1 1) (2 2 1 1 1 2 1 1 1) (2 1 1 1 2 1 1 1 2) (1 1 1 2 1 1 1 2 2) (1 1 2 1 1 1 2 2 1) (1 2 1 1 1 2 2 1 1) (2 1 1 1 2 2 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 2 2 1 1 2 1) (1 1 2 2 1 1 2 1 1) (1 2 2 1 1 2 1 1 1) (2 2 1 1 2 1 1 1 1) (2 1 1 2 1 1 1 1 2) (1 1 2 1 1 1 1 2 2) (1 2 1 1 1 1 2 2 1) (2 1 1 1 1 2 2 1 1) (1 1 1 1 2 2 1 1 2) (elems 9 sum 12 olaps 72))" "((1 1 1 2 2 1 2 1 1) (1 1 2 2 1 2 1 1 1) (1 2 2 1 2 1 1 1 1) (2 2 1 2 1 1 1 1 1) (2 1 2 1 1 1 1 1 2) (1 2 1 1 1 1 1 2 2) (2 1 1 1 1 1 2 2 1) (1 1 1 1 1 2 2 1 2) (1 1 1 1 2 2 1 2 1) (elems 9 sum 12 olaps 72))" "((1 1 1 2 2 2 1 1 1) (1 1 2 2 2 1 1 1 1) (1 2 2 2 1 1 1 1 1) (2 2 2 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 2 2 2) (1 1 1 1 1 2 2 2 1) (1 1 1 1 2 2 2 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 2 3 1 1 1 1) (1 1 2 3 1 1 1 1 1) (1 2 3 1 1 1 1 1 1) (2 3 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 3) (1 1 1 1 1 1 2 3 1) (1 1 1 1 1 2 3 1 1) (1 1 1 1 2 3 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 3 1 1 1 1 2) (1 1 3 1 1 1 1 2 1) (1 3 1 1 1 1 2 1 1) (3 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 3) (1 1 1 2 1 1 1 3 1) (1 1 2 1 1 1 3 1 1) (1 2 1 1 1 3 1 1 1) (2 1 1 1 3 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 3 1 1 1 2 1) (1 1 3 1 1 1 2 1 1) (1 3 1 1 1 2 1 1 1) (3 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 3) (1 1 2 1 1 1 1 3 1) (1 2 1 1 1 1 3 1 1) (2 1 1 1 1 3 1 1 1) (1 1 1 1 3 1 1 1 2) (elems 9 sum 12 olaps 72))" "((1 1 1 3 1 1 2 1 1) (1 1 3 1 1 2 1 1 1) (1 3 1 1 2 1 1 1 1) (3 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 3) (1 2 1 1 1 1 1 3 1) (2 1 1 1 1 1 3 1 1) (1 1 1 1 1 3 1 1 2) (1 1 1 1 3 1 1 2 1) (elems 9 sum 12 olaps 72))" "((1 1 1 3 1 2 1 1 1) (1 1 3 1 2 1 1 1 1) (1 3 1 2 1 1 1 1 1) (3 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 3) (2 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 3 1 2) (1 1 1 1 1 3 1 2 1) (1 1 1 1 3 1 2 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 3 2 1 1 1 1) (1 1 3 2 1 1 1 1 1) (1 3 2 1 1 1 1 1 1) (3 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 3 2) (1 1 1 1 1 1 3 2 1) (1 1 1 1 1 3 2 1 1) (1 1 1 1 3 2 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 4 1 1 1 1 1) (1 1 4 1 1 1 1 1 1) (1 4 1 1 1 1 1 1 1) (4 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 4) (1 1 1 1 1 1 1 4 1) (1 1 1 1 1 1 4 1 1) (1 1 1 1 1 4 1 1 1) (1 1 1 1 4 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 2 1 1 1 1 1 3) (1 2 1 1 1 1 1 3 1) (2 1 1 1 1 1 3 1 1) (1 1 1 1 1 3 1 1 2) (1 1 1 1 3 1 1 2 1) (1 1 1 3 1 1 2 1 1) (1 1 3 1 1 2 1 1 1) (1 3 1 1 2 1 1 1 1) (3 1 1 2 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 2 1 1 1 1 2 2) (1 2 1 1 1 1 2 2 1) (2 1 1 1 1 2 2 1 1) (1 1 1 1 2 2 1 1 2) (1 1 1 2 2 1 1 2 1) (1 1 2 2 1 1 2 1 1) (1 2 2 1 1 2 1 1 1) (2 2 1 1 2 1 1 1 1) (2 1 1 2 1 1 1 1 2) (elems 9 sum 12 olaps 72))" "((1 1 2 1 1 1 1 3 1) (1 2 1 1 1 1 3 1 1) (2 1 1 1 1 3 1 1 1) (1 1 1 1 3 1 1 1 2) (1 1 1 3 1 1 1 2 1) (1 1 3 1 1 1 2 1 1) (1 3 1 1 1 2 1 1 1) (3 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 3) (elems 9 sum 12 olaps 72))" "((1 1 2 1 1 1 2 1 2) (1 2 1 1 1 2 1 2 1) (2 1 1 1 2 1 2 1 1) (1 1 1 2 1 2 1 1 2) (1 1 2 1 2 1 1 2 1) (1 2 1 2 1 1 2 1 1) (2 1 2 1 1 2 1 1 1) (1 2 1 1 2 1 1 1 2) (2 1 1 2 1 1 1 2 1) (elems 9 sum 12 olaps 72))" "((1 1 2 1 1 1 2 2 1) (1 2 1 1 1 2 2 1 1) (2 1 1 1 2 2 1 1 1) (1 1 1 2 2 1 1 1 2) (1 1 2 2 1 1 1 2 1) (1 2 2 1 1 1 2 1 1) (2 2 1 1 1 2 1 1 1) (2 1 1 1 2 1 1 1 2) (1 1 1 2 1 1 1 2 2) (elems 9 sum 12 olaps 72))" "((1 1 2 1 1 1 3 1 1) (1 2 1 1 1 3 1 1 1) (2 1 1 1 3 1 1 1 1) (1 1 1 3 1 1 1 1 2) (1 1 3 1 1 1 1 2 1) (1 3 1 1 1 1 2 1 1) (3 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 3) (1 1 1 2 1 1 1 3 1) (elems 9 sum 12 olaps 72))" "((1 1 2 1 1 2 1 1 2) (1 2 1 1 2 1 1 2 1) (2 1 1 2 1 1 2 1 1) (1 1 2 1 1 2 1 1 2) (1 2 1 1 2 1 1 2 1) (2 1 1 2 1 1 2 1 1) (1 1 2 1 1 2 1 1 2) (1 2 1 1 2 1 1 2 1) (2 1 1 2 1 1 2 1 1) (elems 9 sum 12 olaps 72))" "((1 1 2 1 1 2 1 2 1) (1 2 1 1 2 1 2 1 1) (2 1 1 2 1 2 1 1 1) (1 1 2 1 2 1 1 1 2) (1 2 1 2 1 1 1 2 1) (2 1 2 1 1 1 2 1 1) (1 2 1 1 1 2 1 1 2) (2 1 1 1 2 1 1 2 1) (1 1 1 2 1 1 2 1 2) (elems 9 sum 12 olaps 72))" "((1 1 2 1 1 2 2 1 1) (1 2 1 1 2 2 1 1 1) (2 1 1 2 2 1 1 1 1) (1 1 2 2 1 1 1 1 2) (1 2 2 1 1 1 1 2 1) (2 2 1 1 1 1 2 1 1) (2 1 1 1 1 2 1 1 2) (1 1 1 1 2 1 1 2 2) (1 1 1 2 1 1 2 2 1) (elems 9 sum 12 olaps 72))" "((1 1 2 1 1 3 1 1 1) (1 2 1 1 3 1 1 1 1) (2 1 1 3 1 1 1 1 1) (1 1 3 1 1 1 1 1 2) (1 3 1 1 1 1 1 2 1) (3 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 3) (1 1 1 1 2 1 1 3 1) (1 1 1 2 1 1 3 1 1) (elems 9 sum 12 olaps 72))" "((1 1 2 1 2 1 1 1 2) (1 2 1 2 1 1 1 2 1) (2 1 2 1 1 1 2 1 1) (1 2 1 1 1 2 1 1 2) (2 1 1 1 2 1 1 2 1) (1 1 1 2 1 1 2 1 2) (1 1 2 1 1 2 1 2 1) (1 2 1 1 2 1 2 1 1) (2 1 1 2 1 2 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 2 1 2 1 1 2 1) (1 2 1 2 1 1 2 1 1) (2 1 2 1 1 2 1 1 1) (1 2 1 1 2 1 1 1 2) (2 1 1 2 1 1 1 2 1) (1 1 2 1 1 1 2 1 2) (1 2 1 1 1 2 1 2 1) (2 1 1 1 2 1 2 1 1) (1 1 1 2 1 2 1 1 2) (elems 9 sum 12 olaps 72))" "((1 1 2 1 2 1 2 1 1) (1 2 1 2 1 2 1 1 1) (2 1 2 1 2 1 1 1 1) (1 2 1 2 1 1 1 1 2) (2 1 2 1 1 1 1 2 1) (1 2 1 1 1 1 2 1 2) (2 1 1 1 1 2 1 2 1) (1 1 1 1 2 1 2 1 2) (1 1 1 2 1 2 1 2 1) (elems 9 sum 12 olaps 72))" "((1 1 2 1 2 2 1 1 1) (1 2 1 2 2 1 1 1 1) (2 1 2 2 1 1 1 1 1) (1 2 2 1 1 1 1 1 2) (2 2 1 1 1 1 1 2 1) (2 1 1 1 1 1 2 1 2) (1 1 1 1 1 2 1 2 2) (1 1 1 1 2 1 2 2 1) (1 1 1 2 1 2 2 1 1) (elems 9 sum 12 olaps 72))" "((1 1 2 1 3 1 1 1 1) (1 2 1 3 1 1 1 1 1) (2 1 3 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 2) (3 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 3) (1 1 1 1 1 2 1 3 1) (1 1 1 1 2 1 3 1 1) (1 1 1 2 1 3 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 2 2 1 1 1 1 2) (1 2 2 1 1 1 1 2 1) (2 2 1 1 1 1 2 1 1) (2 1 1 1 1 2 1 1 2) (1 1 1 1 2 1 1 2 2) (1 1 1 2 1 1 2 2 1) (1 1 2 1 1 2 2 1 1) (1 2 1 1 2 2 1 1 1) (2 1 1 2 2 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 2 2 1 1 1 2 1) (1 2 2 1 1 1 2 1 1) (2 2 1 1 1 2 1 1 1) (2 1 1 1 2 1 1 1 2) (1 1 1 2 1 1 1 2 2) (1 1 2 1 1 1 2 2 1) (1 2 1 1 1 2 2 1 1) (2 1 1 1 2 2 1 1 1) (1 1 1 2 2 1 1 1 2) (elems 9 sum 12 olaps 72))" "((1 1 2 2 1 1 2 1 1) (1 2 2 1 1 2 1 1 1) (2 2 1 1 2 1 1 1 1) (2 1 1 2 1 1 1 1 2) (1 1 2 1 1 1 1 2 2) (1 2 1 1 1 1 2 2 1) (2 1 1 1 1 2 2 1 1) (1 1 1 1 2 2 1 1 2) (1 1 1 2 2 1 1 2 1) (elems 9 sum 12 olaps 72))" "((1 1 2 2 1 2 1 1 1) (1 2 2 1 2 1 1 1 1) (2 2 1 2 1 1 1 1 1) (2 1 2 1 1 1 1 1 2) (1 2 1 1 1 1 1 2 2) (2 1 1 1 1 1 2 2 1) (1 1 1 1 1 2 2 1 2) (1 1 1 1 2 2 1 2 1) (1 1 1 2 2 1 2 1 1) (elems 9 sum 12 olaps 72))" "((1 1 2 2 2 1 1 1 1) (1 2 2 2 1 1 1 1 1) (2 2 2 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 2 2 2) (1 1 1 1 1 2 2 2 1) (1 1 1 1 2 2 2 1 1) (1 1 1 2 2 2 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 2 3 1 1 1 1 1) (1 2 3 1 1 1 1 1 1) (2 3 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 3) (1 1 1 1 1 1 2 3 1) (1 1 1 1 1 2 3 1 1) (1 1 1 1 2 3 1 1 1) (1 1 1 2 3 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 3 1 1 1 1 1 2) (1 3 1 1 1 1 1 2 1) (3 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 3) (1 1 1 1 2 1 1 3 1) (1 1 1 2 1 1 3 1 1) (1 1 2 1 1 3 1 1 1) (1 2 1 1 3 1 1 1 1) (2 1 1 3 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 3 1 1 1 1 2 1) (1 3 1 1 1 1 2 1 1) (3 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 3) (1 1 1 2 1 1 1 3 1) (1 1 2 1 1 1 3 1 1) (1 2 1 1 1 3 1 1 1) (2 1 1 1 3 1 1 1 1) (1 1 1 3 1 1 1 1 2) (elems 9 sum 12 olaps 72))" "((1 1 3 1 1 1 2 1 1) (1 3 1 1 1 2 1 1 1) (3 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 3) (1 1 2 1 1 1 1 3 1) (1 2 1 1 1 1 3 1 1) (2 1 1 1 1 3 1 1 1) (1 1 1 1 3 1 1 1 2) (1 1 1 3 1 1 1 2 1) (elems 9 sum 12 olaps 72))" "((1 1 3 1 1 2 1 1 1) (1 3 1 1 2 1 1 1 1) (3 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 3) (1 2 1 1 1 1 1 3 1) (2 1 1 1 1 1 3 1 1) (1 1 1 1 1 3 1 1 2) (1 1 1 1 3 1 1 2 1) (1 1 1 3 1 1 2 1 1) (elems 9 sum 12 olaps 72))" "((1 1 3 1 2 1 1 1 1) (1 3 1 2 1 1 1 1 1) (3 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 3) (2 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 3 1 2) (1 1 1 1 1 3 1 2 1) (1 1 1 1 3 1 2 1 1) (1 1 1 3 1 2 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 3 2 1 1 1 1 1) (1 3 2 1 1 1 1 1 1) (3 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 3 2) (1 1 1 1 1 1 3 2 1) (1 1 1 1 1 3 2 1 1) (1 1 1 1 3 2 1 1 1) (1 1 1 3 2 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 4 1 1 1 1 1 1) (1 4 1 1 1 1 1 1 1) (4 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 4) (1 1 1 1 1 1 1 4 1) (1 1 1 1 1 1 4 1 1) (1 1 1 1 1 4 1 1 1) (1 1 1 1 4 1 1 1 1) (1 1 1 4 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 2 1 1 1 1 1 1 3) (2 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 3 1 2) (1 1 1 1 1 3 1 2 1) (1 1 1 1 3 1 2 1 1) (1 1 1 3 1 2 1 1 1) (1 1 3 1 2 1 1 1 1) (1 3 1 2 1 1 1 1 1) (3 1 2 1 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 2 1 1 1 1 1 2 2) (2 1 1 1 1 1 2 2 1) (1 1 1 1 1 2 2 1 2) (1 1 1 1 2 2 1 2 1) (1 1 1 2 2 1 2 1 1) (1 1 2 2 1 2 1 1 1) (1 2 2 1 2 1 1 1 1) (2 2 1 2 1 1 1 1 1) (2 1 2 1 1 1 1 1 2) (elems 9 sum 12 olaps 72))" "((1 2 1 1 1 1 1 3 1) (2 1 1 1 1 1 3 1 1) (1 1 1 1 1 3 1 1 2) (1 1 1 1 3 1 1 2 1) (1 1 1 3 1 1 2 1 1) (1 1 3 1 1 2 1 1 1) (1 3 1 1 2 1 1 1 1) (3 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 3) (elems 9 sum 12 olaps 72))" "((1 2 1 1 1 1 2 1 2) (2 1 1 1 1 2 1 2 1) (1 1 1 1 2 1 2 1 2) (1 1 1 2 1 2 1 2 1) (1 1 2 1 2 1 2 1 1) (1 2 1 2 1 2 1 1 1) (2 1 2 1 2 1 1 1 1) (1 2 1 2 1 1 1 1 2) (2 1 2 1 1 1 1 2 1) (elems 9 sum 12 olaps 72))" "((1 2 1 1 1 1 2 2 1) (2 1 1 1 1 2 2 1 1) (1 1 1 1 2 2 1 1 2) (1 1 1 2 2 1 1 2 1) (1 1 2 2 1 1 2 1 1) (1 2 2 1 1 2 1 1 1) (2 2 1 1 2 1 1 1 1) (2 1 1 2 1 1 1 1 2) (1 1 2 1 1 1 1 2 2) (elems 9 sum 12 olaps 72))" "((1 2 1 1 1 1 3 1 1) (2 1 1 1 1 3 1 1 1) (1 1 1 1 3 1 1 1 2) (1 1 1 3 1 1 1 2 1) (1 1 3 1 1 1 2 1 1) (1 3 1 1 1 2 1 1 1) (3 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 3) (1 1 2 1 1 1 1 3 1) (elems 9 sum 12 olaps 72))" "((1 2 1 1 1 2 1 1 2) (2 1 1 1 2 1 1 2 1) (1 1 1 2 1 1 2 1 2) (1 1 2 1 1 2 1 2 1) (1 2 1 1 2 1 2 1 1) (2 1 1 2 1 2 1 1 1) (1 1 2 1 2 1 1 1 2) (1 2 1 2 1 1 1 2 1) (2 1 2 1 1 1 2 1 1) (elems 9 sum 12 olaps 72))" "((1 2 1 1 1 2 1 2 1) (2 1 1 1 2 1 2 1 1) (1 1 1 2 1 2 1 1 2) (1 1 2 1 2 1 1 2 1) (1 2 1 2 1 1 2 1 1) (2 1 2 1 1 2 1 1 1) (1 2 1 1 2 1 1 1 2) (2 1 1 2 1 1 1 2 1) (1 1 2 1 1 1 2 1 2) (elems 9 sum 12 olaps 72))" "((1 2 1 1 1 2 2 1 1) (2 1 1 1 2 2 1 1 1) (1 1 1 2 2 1 1 1 2) (1 1 2 2 1 1 1 2 1) (1 2 2 1 1 1 2 1 1) (2 2 1 1 1 2 1 1 1) (2 1 1 1 2 1 1 1 2) (1 1 1 2 1 1 1 2 2) (1 1 2 1 1 1 2 2 1) (elems 9 sum 12 olaps 72))" "((1 2 1 1 1 3 1 1 1) (2 1 1 1 3 1 1 1 1) (1 1 1 3 1 1 1 1 2) (1 1 3 1 1 1 1 2 1) (1 3 1 1 1 1 2 1 1) (3 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 3) (1 1 1 2 1 1 1 3 1) (1 1 2 1 1 1 3 1 1) (elems 9 sum 12 olaps 72))" "((1 2 1 1 2 1 1 1 2) (2 1 1 2 1 1 1 2 1) (1 1 2 1 1 1 2 1 2) (1 2 1 1 1 2 1 2 1) (2 1 1 1 2 1 2 1 1) (1 1 1 2 1 2 1 1 2) (1 1 2 1 2 1 1 2 1) (1 2 1 2 1 1 2 1 1) (2 1 2 1 1 2 1 1 1) (elems 9 sum 12 olaps 72))" "((1 2 1 1 2 1 1 2 1) (2 1 1 2 1 1 2 1 1) (1 1 2 1 1 2 1 1 2) (1 2 1 1 2 1 1 2 1) (2 1 1 2 1 1 2 1 1) (1 1 2 1 1 2 1 1 2) (1 2 1 1 2 1 1 2 1) (2 1 1 2 1 1 2 1 1) (1 1 2 1 1 2 1 1 2) (elems 9 sum 12 olaps 72))" "((1 2 1 1 2 1 2 1 1) (2 1 1 2 1 2 1 1 1) (1 1 2 1 2 1 1 1 2) (1 2 1 2 1 1 1 2 1) (2 1 2 1 1 1 2 1 1) (1 2 1 1 1 2 1 1 2) (2 1 1 1 2 1 1 2 1) (1 1 1 2 1 1 2 1 2) (1 1 2 1 1 2 1 2 1) (elems 9 sum 12 olaps 72))" "((1 2 1 1 2 2 1 1 1) (2 1 1 2 2 1 1 1 1) (1 1 2 2 1 1 1 1 2) (1 2 2 1 1 1 1 2 1) (2 2 1 1 1 1 2 1 1) (2 1 1 1 1 2 1 1 2) (1 1 1 1 2 1 1 2 2) (1 1 1 2 1 1 2 2 1) (1 1 2 1 1 2 2 1 1) (elems 9 sum 12 olaps 72))" "((1 2 1 1 3 1 1 1 1) (2 1 1 3 1 1 1 1 1) (1 1 3 1 1 1 1 1 2) (1 3 1 1 1 1 1 2 1) (3 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 3) (1 1 1 1 2 1 1 3 1) (1 1 1 2 1 1 3 1 1) (1 1 2 1 1 3 1 1 1) (elems 9 sum 12 olaps 72))" "((1 2 1 2 1 1 1 1 2) (2 1 2 1 1 1 1 2 1) (1 2 1 1 1 1 2 1 2) (2 1 1 1 1 2 1 2 1) (1 1 1 1 2 1 2 1 2) (1 1 1 2 1 2 1 2 1) (1 1 2 1 2 1 2 1 1) (1 2 1 2 1 2 1 1 1) (2 1 2 1 2 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 2 1 2 1 1 1 2 1) (2 1 2 1 1 1 2 1 1) (1 2 1 1 1 2 1 1 2) (2 1 1 1 2 1 1 2 1) (1 1 1 2 1 1 2 1 2) (1 1 2 1 1 2 1 2 1) (1 2 1 1 2 1 2 1 1) (2 1 1 2 1 2 1 1 1) (1 1 2 1 2 1 1 1 2) (elems 9 sum 12 olaps 72))" "((1 2 1 2 1 1 2 1 1) (2 1 2 1 1 2 1 1 1) (1 2 1 1 2 1 1 1 2) (2 1 1 2 1 1 1 2 1) (1 1 2 1 1 1 2 1 2) (1 2 1 1 1 2 1 2 1) (2 1 1 1 2 1 2 1 1) (1 1 1 2 1 2 1 1 2) (1 1 2 1 2 1 1 2 1) (elems 9 sum 12 olaps 72))" "((1 2 1 2 1 2 1 1 1) (2 1 2 1 2 1 1 1 1) (1 2 1 2 1 1 1 1 2) (2 1 2 1 1 1 1 2 1) (1 2 1 1 1 1 2 1 2) (2 1 1 1 1 2 1 2 1) (1 1 1 1 2 1 2 1 2) (1 1 1 2 1 2 1 2 1) (1 1 2 1 2 1 2 1 1) (elems 9 sum 12 olaps 72))" "((1 2 1 2 2 1 1 1 1) (2 1 2 2 1 1 1 1 1) (1 2 2 1 1 1 1 1 2) (2 2 1 1 1 1 1 2 1) (2 1 1 1 1 1 2 1 2) (1 1 1 1 1 2 1 2 2) (1 1 1 1 2 1 2 2 1) (1 1 1 2 1 2 2 1 1) (1 1 2 1 2 2 1 1 1) (elems 9 sum 12 olaps 72))" "((1 2 1 3 1 1 1 1 1) (2 1 3 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 2) (3 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 3) (1 1 1 1 1 2 1 3 1) (1 1 1 1 2 1 3 1 1) (1 1 1 2 1 3 1 1 1) (1 1 2 1 3 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 2 2 1 1 1 1 1 2) (2 2 1 1 1 1 1 2 1) (2 1 1 1 1 1 2 1 2) (1 1 1 1 1 2 1 2 2) (1 1 1 1 2 1 2 2 1) (1 1 1 2 1 2 2 1 1) (1 1 2 1 2 2 1 1 1) (1 2 1 2 2 1 1 1 1) (2 1 2 2 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 2 2 1 1 1 1 2 1) (2 2 1 1 1 1 2 1 1) (2 1 1 1 1 2 1 1 2) (1 1 1 1 2 1 1 2 2) (1 1 1 2 1 1 2 2 1) (1 1 2 1 1 2 2 1 1) (1 2 1 1 2 2 1 1 1) (2 1 1 2 2 1 1 1 1) (1 1 2 2 1 1 1 1 2) (elems 9 sum 12 olaps 72))" "((1 2 2 1 1 1 2 1 1) (2 2 1 1 1 2 1 1 1) (2 1 1 1 2 1 1 1 2) (1 1 1 2 1 1 1 2 2) (1 1 2 1 1 1 2 2 1) (1 2 1 1 1 2 2 1 1) (2 1 1 1 2 2 1 1 1) (1 1 1 2 2 1 1 1 2) (1 1 2 2 1 1 1 2 1) (elems 9 sum 12 olaps 72))" "((1 2 2 1 1 2 1 1 1) (2 2 1 1 2 1 1 1 1) (2 1 1 2 1 1 1 1 2) (1 1 2 1 1 1 1 2 2) (1 2 1 1 1 1 2 2 1) (2 1 1 1 1 2 2 1 1) (1 1 1 1 2 2 1 1 2) (1 1 1 2 2 1 1 2 1) (1 1 2 2 1 1 2 1 1) (elems 9 sum 12 olaps 72))" "((1 2 2 1 2 1 1 1 1) (2 2 1 2 1 1 1 1 1) (2 1 2 1 1 1 1 1 2) (1 2 1 1 1 1 1 2 2) (2 1 1 1 1 1 2 2 1) (1 1 1 1 1 2 2 1 2) (1 1 1 1 2 2 1 2 1) (1 1 1 2 2 1 2 1 1) (1 1 2 2 1 2 1 1 1) (elems 9 sum 12 olaps 72))" "((1 2 2 2 1 1 1 1 1) (2 2 2 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 2 2 2) (1 1 1 1 1 2 2 2 1) (1 1 1 1 2 2 2 1 1) (1 1 1 2 2 2 1 1 1) (1 1 2 2 2 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 2 3 1 1 1 1 1 1) (2 3 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 3) (1 1 1 1 1 1 2 3 1) (1 1 1 1 1 2 3 1 1) (1 1 1 1 2 3 1 1 1) (1 1 1 2 3 1 1 1 1) (1 1 2 3 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 3 1 1 1 1 1 1 2) (3 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 3) (1 1 1 1 1 2 1 3 1) (1 1 1 1 2 1 3 1 1) (1 1 1 2 1 3 1 1 1) (1 1 2 1 3 1 1 1 1) (1 2 1 3 1 1 1 1 1) (2 1 3 1 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 3 1 1 1 1 1 2 1) (3 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 3) (1 1 1 1 2 1 1 3 1) (1 1 1 2 1 1 3 1 1) (1 1 2 1 1 3 1 1 1) (1 2 1 1 3 1 1 1 1) (2 1 1 3 1 1 1 1 1) (1 1 3 1 1 1 1 1 2) (elems 9 sum 12 olaps 72))" "((1 3 1 1 1 1 2 1 1) (3 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 3) (1 1 1 2 1 1 1 3 1) (1 1 2 1 1 1 3 1 1) (1 2 1 1 1 3 1 1 1) (2 1 1 1 3 1 1 1 1) (1 1 1 3 1 1 1 1 2) (1 1 3 1 1 1 1 2 1) (elems 9 sum 12 olaps 72))" "((1 3 1 1 1 2 1 1 1) (3 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 3) (1 1 2 1 1 1 1 3 1) (1 2 1 1 1 1 3 1 1) (2 1 1 1 1 3 1 1 1) (1 1 1 1 3 1 1 1 2) (1 1 1 3 1 1 1 2 1) (1 1 3 1 1 1 2 1 1) (elems 9 sum 12 olaps 72))" "((1 3 1 1 2 1 1 1 1) (3 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 3) (1 2 1 1 1 1 1 3 1) (2 1 1 1 1 1 3 1 1) (1 1 1 1 1 3 1 1 2) (1 1 1 1 3 1 1 2 1) (1 1 1 3 1 1 2 1 1) (1 1 3 1 1 2 1 1 1) (elems 9 sum 12 olaps 72))" "((1 3 1 2 1 1 1 1 1) (3 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 3) (2 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 3 1 2) (1 1 1 1 1 3 1 2 1) (1 1 1 1 3 1 2 1 1) (1 1 1 3 1 2 1 1 1) (1 1 3 1 2 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 3 2 1 1 1 1 1 1) (3 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 3 2) (1 1 1 1 1 1 3 2 1) (1 1 1 1 1 3 2 1 1) (1 1 1 1 3 2 1 1 1) (1 1 1 3 2 1 1 1 1) (1 1 3 2 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 4 1 1 1 1 1 1 1) (4 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 4) (1 1 1 1 1 1 1 4 1) (1 1 1 1 1 1 4 1 1) (1 1 1 1 1 4 1 1 1) (1 1 1 1 4 1 1 1 1) (1 1 1 4 1 1 1 1 1) (1 1 4 1 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((2 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 3 2) (1 1 1 1 1 1 3 2 1) (1 1 1 1 1 3 2 1 1) (1 1 1 1 3 2 1 1 1) (1 1 1 3 2 1 1 1 1) (1 1 3 2 1 1 1 1 1) (1 3 2 1 1 1 1 1 1) (3 2 1 1 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((2 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 2 2 2) (1 1 1 1 1 2 2 2 1) (1 1 1 1 2 2 2 1 1) (1 1 1 2 2 2 1 1 1) (1 1 2 2 2 1 1 1 1) (1 2 2 2 1 1 1 1 1) (2 2 2 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 2) (elems 9 sum 12 olaps 72))" "((2 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 3 1 2) (1 1 1 1 1 3 1 2 1) (1 1 1 1 3 1 2 1 1) (1 1 1 3 1 2 1 1 1) (1 1 3 1 2 1 1 1 1) (1 3 1 2 1 1 1 1 1) (3 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 3) (elems 9 sum 12 olaps 72))" "((2 1 1 1 1 1 2 1 2) (1 1 1 1 1 2 1 2 2) (1 1 1 1 2 1 2 2 1) (1 1 1 2 1 2 2 1 1) (1 1 2 1 2 2 1 1 1) (1 2 1 2 2 1 1 1 1) (2 1 2 2 1 1 1 1 1) (1 2 2 1 1 1 1 1 2) (2 2 1 1 1 1 1 2 1) (elems 9 sum 12 olaps 72))" "((2 1 1 1 1 1 2 2 1) (1 1 1 1 1 2 2 1 2) (1 1 1 1 2 2 1 2 1) (1 1 1 2 2 1 2 1 1) (1 1 2 2 1 2 1 1 1) (1 2 2 1 2 1 1 1 1) (2 2 1 2 1 1 1 1 1) (2 1 2 1 1 1 1 1 2) (1 2 1 1 1 1 1 2 2) (elems 9 sum 12 olaps 72))" "((2 1 1 1 1 1 3 1 1) (1 1 1 1 1 3 1 1 2) (1 1 1 1 3 1 1 2 1) (1 1 1 3 1 1 2 1 1) (1 1 3 1 1 2 1 1 1) (1 3 1 1 2 1 1 1 1) (3 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 3) (1 2 1 1 1 1 1 3 1) (elems 9 sum 12 olaps 72))" "((2 1 1 1 1 2 1 1 2) (1 1 1 1 2 1 1 2 2) (1 1 1 2 1 1 2 2 1) (1 1 2 1 1 2 2 1 1) (1 2 1 1 2 2 1 1 1) (2 1 1 2 2 1 1 1 1) (1 1 2 2 1 1 1 1 2) (1 2 2 1 1 1 1 2 1) (2 2 1 1 1 1 2 1 1) (elems 9 sum 12 olaps 72))" "((2 1 1 1 1 2 1 2 1) (1 1 1 1 2 1 2 1 2) (1 1 1 2 1 2 1 2 1) (1 1 2 1 2 1 2 1 1) (1 2 1 2 1 2 1 1 1) (2 1 2 1 2 1 1 1 1) (1 2 1 2 1 1 1 1 2) (2 1 2 1 1 1 1 2 1) (1 2 1 1 1 1 2 1 2) (elems 9 sum 12 olaps 72))" "((2 1 1 1 1 2 2 1 1) (1 1 1 1 2 2 1 1 2) (1 1 1 2 2 1 1 2 1) (1 1 2 2 1 1 2 1 1) (1 2 2 1 1 2 1 1 1) (2 2 1 1 2 1 1 1 1) (2 1 1 2 1 1 1 1 2) (1 1 2 1 1 1 1 2 2) (1 2 1 1 1 1 2 2 1) (elems 9 sum 12 olaps 72))" "((2 1 1 1 1 3 1 1 1) (1 1 1 1 3 1 1 1 2) (1 1 1 3 1 1 1 2 1) (1 1 3 1 1 1 2 1 1) (1 3 1 1 1 2 1 1 1) (3 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 3) (1 1 2 1 1 1 1 3 1) (1 2 1 1 1 1 3 1 1) (elems 9 sum 12 olaps 72))" "((2 1 1 1 2 1 1 1 2) (1 1 1 2 1 1 1 2 2) (1 1 2 1 1 1 2 2 1) (1 2 1 1 1 2 2 1 1) (2 1 1 1 2 2 1 1 1) (1 1 1 2 2 1 1 1 2) (1 1 2 2 1 1 1 2 1) (1 2 2 1 1 1 2 1 1) (2 2 1 1 1 2 1 1 1) (elems 9 sum 12 olaps 72))" "((2 1 1 1 2 1 1 2 1) (1 1 1 2 1 1 2 1 2) (1 1 2 1 1 2 1 2 1) (1 2 1 1 2 1 2 1 1) (2 1 1 2 1 2 1 1 1) (1 1 2 1 2 1 1 1 2) (1 2 1 2 1 1 1 2 1) (2 1 2 1 1 1 2 1 1) (1 2 1 1 1 2 1 1 2) (elems 9 sum 12 olaps 72))" "((2 1 1 1 2 1 2 1 1) (1 1 1 2 1 2 1 1 2) (1 1 2 1 2 1 1 2 1) (1 2 1 2 1 1 2 1 1) (2 1 2 1 1 2 1 1 1) (1 2 1 1 2 1 1 1 2) (2 1 1 2 1 1 1 2 1) (1 1 2 1 1 1 2 1 2) (1 2 1 1 1 2 1 2 1) (elems 9 sum 12 olaps 72))" "((2 1 1 1 2 2 1 1 1) (1 1 1 2 2 1 1 1 2) (1 1 2 2 1 1 1 2 1) (1 2 2 1 1 1 2 1 1) (2 2 1 1 1 2 1 1 1) (2 1 1 1 2 1 1 1 2) (1 1 1 2 1 1 1 2 2) (1 1 2 1 1 1 2 2 1) (1 2 1 1 1 2 2 1 1) (elems 9 sum 12 olaps 72))" "((2 1 1 1 3 1 1 1 1) (1 1 1 3 1 1 1 1 2) (1 1 3 1 1 1 1 2 1) (1 3 1 1 1 1 2 1 1) (3 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 3) (1 1 1 2 1 1 1 3 1) (1 1 2 1 1 1 3 1 1) (1 2 1 1 1 3 1 1 1) (elems 9 sum 12 olaps 72))" "((2 1 1 2 1 1 1 1 2) (1 1 2 1 1 1 1 2 2) (1 2 1 1 1 1 2 2 1) (2 1 1 1 1 2 2 1 1) (1 1 1 1 2 2 1 1 2) (1 1 1 2 2 1 1 2 1) (1 1 2 2 1 1 2 1 1) (1 2 2 1 1 2 1 1 1) (2 2 1 1 2 1 1 1 1) (elems 9 sum 12 olaps 72))" "((2 1 1 2 1 1 1 2 1) (1 1 2 1 1 1 2 1 2) (1 2 1 1 1 2 1 2 1) (2 1 1 1 2 1 2 1 1) (1 1 1 2 1 2 1 1 2) (1 1 2 1 2 1 1 2 1) (1 2 1 2 1 1 2 1 1) (2 1 2 1 1 2 1 1 1) (1 2 1 1 2 1 1 1 2) (elems 9 sum 12 olaps 72))" "((2 1 1 2 1 1 2 1 1) (1 1 2 1 1 2 1 1 2) (1 2 1 1 2 1 1 2 1) (2 1 1 2 1 1 2 1 1) (1 1 2 1 1 2 1 1 2) (1 2 1 1 2 1 1 2 1) (2 1 1 2 1 1 2 1 1) (1 1 2 1 1 2 1 1 2) (1 2 1 1 2 1 1 2 1) (elems 9 sum 12 olaps 72))" "((2 1 1 2 1 2 1 1 1) (1 1 2 1 2 1 1 1 2) (1 2 1 2 1 1 1 2 1) (2 1 2 1 1 1 2 1 1) (1 2 1 1 1 2 1 1 2) (2 1 1 1 2 1 1 2 1) (1 1 1 2 1 1 2 1 2) (1 1 2 1 1 2 1 2 1) (1 2 1 1 2 1 2 1 1) (elems 9 sum 12 olaps 72))" "((2 1 1 2 2 1 1 1 1) (1 1 2 2 1 1 1 1 2) (1 2 2 1 1 1 1 2 1) (2 2 1 1 1 1 2 1 1) (2 1 1 1 1 2 1 1 2) (1 1 1 1 2 1 1 2 2) (1 1 1 2 1 1 2 2 1) (1 1 2 1 1 2 2 1 1) (1 2 1 1 2 2 1 1 1) (elems 9 sum 12 olaps 72))" "((2 1 1 3 1 1 1 1 1) (1 1 3 1 1 1 1 1 2) (1 3 1 1 1 1 1 2 1) (3 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 3) (1 1 1 1 2 1 1 3 1) (1 1 1 2 1 1 3 1 1) (1 1 2 1 1 3 1 1 1) (1 2 1 1 3 1 1 1 1) (elems 9 sum 12 olaps 72))" "((2 1 2 1 1 1 1 1 2) (1 2 1 1 1 1 1 2 2) (2 1 1 1 1 1 2 2 1) (1 1 1 1 1 2 2 1 2) (1 1 1 1 2 2 1 2 1) (1 1 1 2 2 1 2 1 1) (1 1 2 2 1 2 1 1 1) (1 2 2 1 2 1 1 1 1) (2 2 1 2 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((2 1 2 1 1 1 1 2 1) (1 2 1 1 1 1 2 1 2) (2 1 1 1 1 2 1 2 1) (1 1 1 1 2 1 2 1 2) (1 1 1 2 1 2 1 2 1) (1 1 2 1 2 1 2 1 1) (1 2 1 2 1 2 1 1 1) (2 1 2 1 2 1 1 1 1) (1 2 1 2 1 1 1 1 2) (elems 9 sum 12 olaps 72))" "((2 1 2 1 1 1 2 1 1) (1 2 1 1 1 2 1 1 2) (2 1 1 1 2 1 1 2 1) (1 1 1 2 1 1 2 1 2) (1 1 2 1 1 2 1 2 1) (1 2 1 1 2 1 2 1 1) (2 1 1 2 1 2 1 1 1) (1 1 2 1 2 1 1 1 2) (1 2 1 2 1 1 1 2 1) (elems 9 sum 12 olaps 72))" "((2 1 2 1 1 2 1 1 1) (1 2 1 1 2 1 1 1 2) (2 1 1 2 1 1 1 2 1) (1 1 2 1 1 1 2 1 2) (1 2 1 1 1 2 1 2 1) (2 1 1 1 2 1 2 1 1) (1 1 1 2 1 2 1 1 2) (1 1 2 1 2 1 1 2 1) (1 2 1 2 1 1 2 1 1) (elems 9 sum 12 olaps 72))" "((2 1 2 1 2 1 1 1 1) (1 2 1 2 1 1 1 1 2) (2 1 2 1 1 1 1 2 1) (1 2 1 1 1 1 2 1 2) (2 1 1 1 1 2 1 2 1) (1 1 1 1 2 1 2 1 2) (1 1 1 2 1 2 1 2 1) (1 1 2 1 2 1 2 1 1) (1 2 1 2 1 2 1 1 1) (elems 9 sum 12 olaps 72))" "((2 1 2 2 1 1 1 1 1) (1 2 2 1 1 1 1 1 2) (2 2 1 1 1 1 1 2 1) (2 1 1 1 1 1 2 1 2) (1 1 1 1 1 2 1 2 2) (1 1 1 1 2 1 2 2 1) (1 1 1 2 1 2 2 1 1) (1 1 2 1 2 2 1 1 1) (1 2 1 2 2 1 1 1 1) (elems 9 sum 12 olaps 72))" "((2 1 3 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 2) (3 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 3) (1 1 1 1 1 2 1 3 1) (1 1 1 1 2 1 3 1 1) (1 1 1 2 1 3 1 1 1) (1 1 2 1 3 1 1 1 1) (1 2 1 3 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((2 2 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 2 2 2) (1 1 1 1 1 2 2 2 1) (1 1 1 1 2 2 2 1 1) (1 1 1 2 2 2 1 1 1) (1 1 2 2 2 1 1 1 1) (1 2 2 2 1 1 1 1 1) (2 2 2 1 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((2 2 1 1 1 1 1 2 1) (2 1 1 1 1 1 2 1 2) (1 1 1 1 1 2 1 2 2) (1 1 1 1 2 1 2 2 1) (1 1 1 2 1 2 2 1 1) (1 1 2 1 2 2 1 1 1) (1 2 1 2 2 1 1 1 1) (2 1 2 2 1 1 1 1 1) (1 2 2 1 1 1 1 1 2) (elems 9 sum 12 olaps 72))" "((2 2 1 1 1 1 2 1 1) (2 1 1 1 1 2 1 1 2) (1 1 1 1 2 1 1 2 2) (1 1 1 2 1 1 2 2 1) (1 1 2 1 1 2 2 1 1) (1 2 1 1 2 2 1 1 1) (2 1 1 2 2 1 1 1 1) (1 1 2 2 1 1 1 1 2) (1 2 2 1 1 1 1 2 1) (elems 9 sum 12 olaps 72))" "((2 2 1 1 1 2 1 1 1) (2 1 1 1 2 1 1 1 2) (1 1 1 2 1 1 1 2 2) (1 1 2 1 1 1 2 2 1) (1 2 1 1 1 2 2 1 1) (2 1 1 1 2 2 1 1 1) (1 1 1 2 2 1 1 1 2) (1 1 2 2 1 1 1 2 1) (1 2 2 1 1 1 2 1 1) (elems 9 sum 12 olaps 72))" "((2 2 1 1 2 1 1 1 1) (2 1 1 2 1 1 1 1 2) (1 1 2 1 1 1 1 2 2) (1 2 1 1 1 1 2 2 1) (2 1 1 1 1 2 2 1 1) (1 1 1 1 2 2 1 1 2) (1 1 1 2 2 1 1 2 1) (1 1 2 2 1 1 2 1 1) (1 2 2 1 1 2 1 1 1) (elems 9 sum 12 olaps 72))" "((2 2 1 2 1 1 1 1 1) (2 1 2 1 1 1 1 1 2) (1 2 1 1 1 1 1 2 2) (2 1 1 1 1 1 2 2 1) (1 1 1 1 1 2 2 1 2) (1 1 1 1 2 2 1 2 1) (1 1 1 2 2 1 2 1 1) (1 1 2 2 1 2 1 1 1) (1 2 2 1 2 1 1 1 1) (elems 9 sum 12 olaps 72))" "((2 2 2 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 2 2 2) (1 1 1 1 1 2 2 2 1) (1 1 1 1 2 2 2 1 1) (1 1 1 2 2 2 1 1 1) (1 1 2 2 2 1 1 1 1) (1 2 2 2 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((2 3 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 3) (1 1 1 1 1 1 2 3 1) (1 1 1 1 1 2 3 1 1) (1 1 1 1 2 3 1 1 1) (1 1 1 2 3 1 1 1 1) (1 1 2 3 1 1 1 1 1) (1 2 3 1 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((3 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 2 3) (1 1 1 1 1 1 2 3 1) (1 1 1 1 1 2 3 1 1) (1 1 1 1 2 3 1 1 1) (1 1 1 2 3 1 1 1 1) (1 1 2 3 1 1 1 1 1) (1 2 3 1 1 1 1 1 1) (2 3 1 1 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((3 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 2 1 3) (1 1 1 1 1 2 1 3 1) (1 1 1 1 2 1 3 1 1) (1 1 1 2 1 3 1 1 1) (1 1 2 1 3 1 1 1 1) (1 2 1 3 1 1 1 1 1) (2 1 3 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 2) (elems 9 sum 12 olaps 72))" "((3 1 1 1 1 1 2 1 1) (1 1 1 1 1 2 1 1 3) (1 1 1 1 2 1 1 3 1) (1 1 1 2 1 1 3 1 1) (1 1 2 1 1 3 1 1 1) (1 2 1 1 3 1 1 1 1) (2 1 1 3 1 1 1 1 1) (1 1 3 1 1 1 1 1 2) (1 3 1 1 1 1 1 2 1) (elems 9 sum 12 olaps 72))" "((3 1 1 1 1 2 1 1 1) (1 1 1 1 2 1 1 1 3) (1 1 1 2 1 1 1 3 1) (1 1 2 1 1 1 3 1 1) (1 2 1 1 1 3 1 1 1) (2 1 1 1 3 1 1 1 1) (1 1 1 3 1 1 1 1 2) (1 1 3 1 1 1 1 2 1) (1 3 1 1 1 1 2 1 1) (elems 9 sum 12 olaps 72))" "((3 1 1 1 2 1 1 1 1) (1 1 1 2 1 1 1 1 3) (1 1 2 1 1 1 1 3 1) (1 2 1 1 1 1 3 1 1) (2 1 1 1 1 3 1 1 1) (1 1 1 1 3 1 1 1 2) (1 1 1 3 1 1 1 2 1) (1 1 3 1 1 1 2 1 1) (1 3 1 1 1 2 1 1 1) (elems 9 sum 12 olaps 72))" "((3 1 1 2 1 1 1 1 1) (1 1 2 1 1 1 1 1 3) (1 2 1 1 1 1 1 3 1) (2 1 1 1 1 1 3 1 1) (1 1 1 1 1 3 1 1 2) (1 1 1 1 3 1 1 2 1) (1 1 1 3 1 1 2 1 1) (1 1 3 1 1 2 1 1 1) (1 3 1 1 2 1 1 1 1) (elems 9 sum 12 olaps 72))" "((3 1 2 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 3) (2 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 3 1 2) (1 1 1 1 1 3 1 2 1) (1 1 1 1 3 1 2 1 1) (1 1 1 3 1 2 1 1 1) (1 1 3 1 2 1 1 1 1) (1 3 1 2 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((3 2 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 3 2) (1 1 1 1 1 1 3 2 1) (1 1 1 1 1 3 2 1 1) (1 1 1 1 3 2 1 1 1) (1 1 1 3 2 1 1 1 1) (1 1 3 2 1 1 1 1 1) (1 3 2 1 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((4 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 4) (1 1 1 1 1 1 1 4 1) (1 1 1 1 1 1 4 1 1) (1 1 1 1 1 4 1 1 1) (1 1 1 1 4 1 1 1 1) (1 1 1 4 1 1 1 1 1) (1 1 4 1 1 1 1 1 1) (1 4 1 1 1 1 1 1 1) (elems 9 sum 12 olaps 72))" "((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (elems 10 sum 10 olaps 90))" "((1 1 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 1 3 1 1) (1 1 1 1 1 1 3 1 1 1) (1 1 1 1 1 3 1 1 1 1) (1 1 1 1 3 1 1 1 1 1) (1 1 1 3 1 1 1 1 1 1) (1 1 3 1 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 1 2 2 1) (1 1 1 1 1 1 2 2 1 1) (1 1 1 1 1 2 2 1 1 1) (1 1 1 1 2 2 1 1 1 1) (1 1 1 2 2 1 1 1 1 1) (1 1 2 2 1 1 1 1 1 1) (1 2 2 1 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 2) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 1 3 1 1) (1 1 1 1 1 1 3 1 1 1) (1 1 1 1 1 3 1 1 1 1) (1 1 1 1 3 1 1 1 1 1) (1 1 1 3 1 1 1 1 1 1) (1 1 3 1 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 3) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 1 1 2 1 2) (1 1 1 1 1 1 2 1 2 1) (1 1 1 1 1 2 1 2 1 1) (1 1 1 1 2 1 2 1 1 1) (1 1 1 2 1 2 1 1 1 1) (1 1 2 1 2 1 1 1 1 1) (1 2 1 2 1 1 1 1 1 1) (2 1 2 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 1 2 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 1 1 2 2 1) (1 1 1 1 1 1 2 2 1 1) (1 1 1 1 1 2 2 1 1 1) (1 1 1 1 2 2 1 1 1 1) (1 1 1 2 2 1 1 1 1 1) (1 1 2 2 1 1 1 1 1 1) (1 2 2 1 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 2 2) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 1 1 3 1 1) (1 1 1 1 1 1 3 1 1 1) (1 1 1 1 1 3 1 1 1 1) (1 1 1 1 3 1 1 1 1 1) (1 1 1 3 1 1 1 1 1 1) (1 1 3 1 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 1 3 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 1 2 1 1 2) (1 1 1 1 1 2 1 1 2 1) (1 1 1 1 2 1 1 2 1 1) (1 1 1 2 1 1 2 1 1 1) (1 1 2 1 1 2 1 1 1 1) (1 2 1 1 2 1 1 1 1 1) (2 1 1 2 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 2) (1 2 1 1 1 1 1 1 2 1) (2 1 1 1 1 1 1 2 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 1 2 1 2 1) (1 1 1 1 1 2 1 2 1 1) (1 1 1 1 2 1 2 1 1 1) (1 1 1 2 1 2 1 1 1 1) (1 1 2 1 2 1 1 1 1 1) (1 2 1 2 1 1 1 1 1 1) (2 1 2 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 2 1 2) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 1 2 2 1 1) (1 1 1 1 1 2 2 1 1 1) (1 1 1 1 2 2 1 1 1 1) (1 1 1 2 2 1 1 1 1 1) (1 1 2 2 1 1 1 1 1 1) (1 2 2 1 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 1 2 2 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 1 3 1 1 1) (1 1 1 1 1 3 1 1 1 1) (1 1 1 1 3 1 1 1 1 1) (1 1 1 3 1 1 1 1 1 1) (1 1 3 1 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 1 3 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 2 1 1 1 2) (1 1 1 1 2 1 1 1 2 1) (1 1 1 2 1 1 1 2 1 1) (1 1 2 1 1 1 2 1 1 1) (1 2 1 1 1 2 1 1 1 1) (2 1 1 1 2 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 2) (1 1 2 1 1 1 1 1 2 1) (1 2 1 1 1 1 1 2 1 1) (2 1 1 1 1 1 2 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 2 1 1 2 1) (1 1 1 1 2 1 1 2 1 1) (1 1 1 2 1 1 2 1 1 1) (1 1 2 1 1 2 1 1 1 1) (1 2 1 1 2 1 1 1 1 1) (2 1 1 2 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 2) (1 2 1 1 1 1 1 1 2 1) (2 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 2 1 1 2) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 2 1 2 1 1) (1 1 1 1 2 1 2 1 1 1) (1 1 1 2 1 2 1 1 1 1) (1 1 2 1 2 1 1 1 1 1) (1 2 1 2 1 1 1 1 1 1) (2 1 2 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 2 1 2) (1 1 1 1 1 1 2 1 2 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 2 2 1 1 1) (1 1 1 1 2 2 1 1 1 1) (1 1 1 2 2 1 1 1 1 1) (1 1 2 2 1 1 1 1 1 1) (1 2 2 1 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 1 2 2 1) (1 1 1 1 1 1 2 2 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 3 1 1 1 1) (1 1 1 1 3 1 1 1 1 1) (1 1 1 3 1 1 1 1 1 1) (1 1 3 1 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 1 3 1 1) (1 1 1 1 1 1 3 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 2 1 1 1 1 2) (1 1 1 2 1 1 1 1 2 1) (1 1 2 1 1 1 1 2 1 1) (1 2 1 1 1 1 2 1 1 1) (2 1 1 1 1 2 1 1 1 1) (1 1 1 1 2 1 1 1 1 2) (1 1 1 2 1 1 1 1 2 1) (1 1 2 1 1 1 1 2 1 1) (1 2 1 1 1 1 2 1 1 1) (2 1 1 1 1 2 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 2 1 1 1 2 1) (1 1 1 2 1 1 1 2 1 1) (1 1 2 1 1 1 2 1 1 1) (1 2 1 1 1 2 1 1 1 1) (2 1 1 1 2 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 2) (1 1 2 1 1 1 1 1 2 1) (1 2 1 1 1 1 1 2 1 1) (2 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 2 1 1 1 2) (elems 10 sum 12 olaps 90))" "((1 1 1 1 2 1 1 2 1 1) (1 1 1 2 1 1 2 1 1 1) (1 1 2 1 1 2 1 1 1 1) (1 2 1 1 2 1 1 1 1 1) (2 1 1 2 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 2) (1 2 1 1 1 1 1 1 2 1) (2 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 2 1 1 2) (1 1 1 1 1 2 1 1 2 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 2 1 2 1 1 1) (1 1 1 2 1 2 1 1 1 1) (1 1 2 1 2 1 1 1 1 1) (1 2 1 2 1 1 1 1 1 1) (2 1 2 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 2 1 2) (1 1 1 1 1 1 2 1 2 1) (1 1 1 1 1 2 1 2 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 2 2 1 1 1 1) (1 1 1 2 2 1 1 1 1 1) (1 1 2 2 1 1 1 1 1 1) (1 2 2 1 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 1 2 2 1) (1 1 1 1 1 1 2 2 1 1) (1 1 1 1 1 2 2 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 3 1 1 1 1 1) (1 1 1 3 1 1 1 1 1 1) (1 1 3 1 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 1 3 1 1) (1 1 1 1 1 1 3 1 1 1) (1 1 1 1 1 3 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 2 1 1 1 1 1 2) (1 1 2 1 1 1 1 1 2 1) (1 2 1 1 1 1 1 2 1 1) (2 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 2 1 1 1 2) (1 1 1 1 2 1 1 1 2 1) (1 1 1 2 1 1 1 2 1 1) (1 1 2 1 1 1 2 1 1 1) (1 2 1 1 1 2 1 1 1 1) (2 1 1 1 2 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 2 1 1 1 1 2 1) (1 1 2 1 1 1 1 2 1 1) (1 2 1 1 1 1 2 1 1 1) (2 1 1 1 1 2 1 1 1 1) (1 1 1 1 2 1 1 1 1 2) (1 1 1 2 1 1 1 1 2 1) (1 1 2 1 1 1 1 2 1 1) (1 2 1 1 1 1 2 1 1 1) (2 1 1 1 1 2 1 1 1 1) (1 1 1 1 2 1 1 1 1 2) (elems 10 sum 12 olaps 90))" "((1 1 1 2 1 1 1 2 1 1) (1 1 2 1 1 1 2 1 1 1) (1 2 1 1 1 2 1 1 1 1) (2 1 1 1 2 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 2) (1 1 2 1 1 1 1 1 2 1) (1 2 1 1 1 1 1 2 1 1) (2 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 2 1 1 1 2) (1 1 1 1 2 1 1 1 2 1) (elems 10 sum 12 olaps 90))" "((1 1 1 2 1 1 2 1 1 1) (1 1 2 1 1 2 1 1 1 1) (1 2 1 1 2 1 1 1 1 1) (2 1 1 2 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 2) (1 2 1 1 1 1 1 1 2 1) (2 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 2 1 1 2) (1 1 1 1 1 2 1 1 2 1) (1 1 1 1 2 1 1 2 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 2 1 2 1 1 1 1) (1 1 2 1 2 1 1 1 1 1) (1 2 1 2 1 1 1 1 1 1) (2 1 2 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 2 1 2) (1 1 1 1 1 1 2 1 2 1) (1 1 1 1 1 2 1 2 1 1) (1 1 1 1 2 1 2 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 2 2 1 1 1 1 1) (1 1 2 2 1 1 1 1 1 1) (1 2 2 1 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 1 2 2 1) (1 1 1 1 1 1 2 2 1 1) (1 1 1 1 1 2 2 1 1 1) (1 1 1 1 2 2 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 3 1 1 1 1 1 1) (1 1 3 1 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 1 3 1 1) (1 1 1 1 1 1 3 1 1 1) (1 1 1 1 1 3 1 1 1 1) (1 1 1 1 3 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 2 1 1 1 1 1 1 2) (1 2 1 1 1 1 1 1 2 1) (2 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 2 1 1 2) (1 1 1 1 1 2 1 1 2 1) (1 1 1 1 2 1 1 2 1 1) (1 1 1 2 1 1 2 1 1 1) (1 1 2 1 1 2 1 1 1 1) (1 2 1 1 2 1 1 1 1 1) (2 1 1 2 1 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 2 1 1 1 1 1 2 1) (1 2 1 1 1 1 1 2 1 1) (2 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 2 1 1 1 2) (1 1 1 1 2 1 1 1 2 1) (1 1 1 2 1 1 1 2 1 1) (1 1 2 1 1 1 2 1 1 1) (1 2 1 1 1 2 1 1 1 1) (2 1 1 1 2 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 2) (elems 10 sum 12 olaps 90))" "((1 1 2 1 1 1 1 2 1 1) (1 2 1 1 1 1 2 1 1 1) (2 1 1 1 1 2 1 1 1 1) (1 1 1 1 2 1 1 1 1 2) (1 1 1 2 1 1 1 1 2 1) (1 1 2 1 1 1 1 2 1 1) (1 2 1 1 1 1 2 1 1 1) (2 1 1 1 1 2 1 1 1 1) (1 1 1 1 2 1 1 1 1 2) (1 1 1 2 1 1 1 1 2 1) (elems 10 sum 12 olaps 90))" "((1 1 2 1 1 1 2 1 1 1) (1 2 1 1 1 2 1 1 1 1) (2 1 1 1 2 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 2) (1 1 2 1 1 1 1 1 2 1) (1 2 1 1 1 1 1 2 1 1) (2 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 2 1 1 1 2) (1 1 1 1 2 1 1 1 2 1) (1 1 1 2 1 1 1 2 1 1) (elems 10 sum 12 olaps 90))" "((1 1 2 1 1 2 1 1 1 1) (1 2 1 1 2 1 1 1 1 1) (2 1 1 2 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 2) (1 2 1 1 1 1 1 1 2 1) (2 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 2 1 1 2) (1 1 1 1 1 2 1 1 2 1) (1 1 1 1 2 1 1 2 1 1) (1 1 1 2 1 1 2 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 2 1 2 1 1 1 1 1) (1 2 1 2 1 1 1 1 1 1) (2 1 2 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 2 1 2) (1 1 1 1 1 1 2 1 2 1) (1 1 1 1 1 2 1 2 1 1) (1 1 1 1 2 1 2 1 1 1) (1 1 1 2 1 2 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 2 2 1 1 1 1 1 1) (1 2 2 1 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 1 2 2 1) (1 1 1 1 1 1 2 2 1 1) (1 1 1 1 1 2 2 1 1 1) (1 1 1 1 2 2 1 1 1 1) (1 1 1 2 2 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 3 1 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 1 3 1 1) (1 1 1 1 1 1 3 1 1 1) (1 1 1 1 1 3 1 1 1 1) (1 1 1 1 3 1 1 1 1 1) (1 1 1 3 1 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 2 1 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 2 1 2) (1 1 1 1 1 1 2 1 2 1) (1 1 1 1 1 2 1 2 1 1) (1 1 1 1 2 1 2 1 1 1) (1 1 1 2 1 2 1 1 1 1) (1 1 2 1 2 1 1 1 1 1) (1 2 1 2 1 1 1 1 1 1) (2 1 2 1 1 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 2 1 1 1 1 1 1 2 1) (2 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 2 1 1 2) (1 1 1 1 1 2 1 1 2 1) (1 1 1 1 2 1 1 2 1 1) (1 1 1 2 1 1 2 1 1 1) (1 1 2 1 1 2 1 1 1 1) (1 2 1 1 2 1 1 1 1 1) (2 1 1 2 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 2) (elems 10 sum 12 olaps 90))" "((1 2 1 1 1 1 1 2 1 1) (2 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 2 1 1 1 2) (1 1 1 1 2 1 1 1 2 1) (1 1 1 2 1 1 1 2 1 1) (1 1 2 1 1 1 2 1 1 1) (1 2 1 1 1 2 1 1 1 1) (2 1 1 1 2 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 2) (1 1 2 1 1 1 1 1 2 1) (elems 10 sum 12 olaps 90))" "((1 2 1 1 1 1 2 1 1 1) (2 1 1 1 1 2 1 1 1 1) (1 1 1 1 2 1 1 1 1 2) (1 1 1 2 1 1 1 1 2 1) (1 1 2 1 1 1 1 2 1 1) (1 2 1 1 1 1 2 1 1 1) (2 1 1 1 1 2 1 1 1 1) (1 1 1 1 2 1 1 1 1 2) (1 1 1 2 1 1 1 1 2 1) (1 1 2 1 1 1 1 2 1 1) (elems 10 sum 12 olaps 90))" "((1 2 1 1 1 2 1 1 1 1) (2 1 1 1 2 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 2) (1 1 2 1 1 1 1 1 2 1) (1 2 1 1 1 1 1 2 1 1) (2 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 2 1 1 1 2) (1 1 1 1 2 1 1 1 2 1) (1 1 1 2 1 1 1 2 1 1) (1 1 2 1 1 1 2 1 1 1) (elems 10 sum 12 olaps 90))" "((1 2 1 1 2 1 1 1 1 1) (2 1 1 2 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 2) (1 2 1 1 1 1 1 1 2 1) (2 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 2 1 1 2) (1 1 1 1 1 2 1 1 2 1) (1 1 1 1 2 1 1 2 1 1) (1 1 1 2 1 1 2 1 1 1) (1 1 2 1 1 2 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 2 1 2 1 1 1 1 1 1) (2 1 2 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 2 1 2) (1 1 1 1 1 1 2 1 2 1) (1 1 1 1 1 2 1 2 1 1) (1 1 1 1 2 1 2 1 1 1) (1 1 1 2 1 2 1 1 1 1) (1 1 2 1 2 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 2 2 1 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 1 2 2 1) (1 1 1 1 1 1 2 2 1 1) (1 1 1 1 1 2 2 1 1 1) (1 1 1 1 2 2 1 1 1 1) (1 1 1 2 2 1 1 1 1 1) (1 1 2 2 1 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 3 1 1 1 1 1 1 1 1) (3 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 1 3 1 1) (1 1 1 1 1 1 3 1 1 1) (1 1 1 1 1 3 1 1 1 1) (1 1 1 1 3 1 1 1 1 1) (1 1 1 3 1 1 1 1 1 1) (1 1 3 1 1 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((2 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 1 2 2 1) (1 1 1 1 1 1 2 2 1 1) (1 1 1 1 1 2 2 1 1 1) (1 1 1 1 2 2 1 1 1 1) (1 1 1 2 2 1 1 1 1 1) (1 1 2 2 1 1 1 1 1 1) (1 2 2 1 1 1 1 1 1 1) (2 2 1 1 1 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((2 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 2 1 2) (1 1 1 1 1 1 2 1 2 1) (1 1 1 1 1 2 1 2 1 1) (1 1 1 1 2 1 2 1 1 1) (1 1 1 2 1 2 1 1 1 1) (1 1 2 1 2 1 1 1 1 1) (1 2 1 2 1 1 1 1 1 1) (2 1 2 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 2) (elems 10 sum 12 olaps 90))" "((2 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 2 1 1 2) (1 1 1 1 1 2 1 1 2 1) (1 1 1 1 2 1 1 2 1 1) (1 1 1 2 1 1 2 1 1 1) (1 1 2 1 1 2 1 1 1 1) (1 2 1 1 2 1 1 1 1 1) (2 1 1 2 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 2) (1 2 1 1 1 1 1 1 2 1) (elems 10 sum 12 olaps 90))" "((2 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 2 1 1 1 2) (1 1 1 1 2 1 1 1 2 1) (1 1 1 2 1 1 1 2 1 1) (1 1 2 1 1 1 2 1 1 1) (1 2 1 1 1 2 1 1 1 1) (2 1 1 1 2 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 2) (1 1 2 1 1 1 1 1 2 1) (1 2 1 1 1 1 1 2 1 1) (elems 10 sum 12 olaps 90))" "((2 1 1 1 1 2 1 1 1 1) (1 1 1 1 2 1 1 1 1 2) (1 1 1 2 1 1 1 1 2 1) (1 1 2 1 1 1 1 2 1 1) (1 2 1 1 1 1 2 1 1 1) (2 1 1 1 1 2 1 1 1 1) (1 1 1 1 2 1 1 1 1 2) (1 1 1 2 1 1 1 1 2 1) (1 1 2 1 1 1 1 2 1 1) (1 2 1 1 1 1 2 1 1 1) (elems 10 sum 12 olaps 90))" "((2 1 1 1 2 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 2) (1 1 2 1 1 1 1 1 2 1) (1 2 1 1 1 1 1 2 1 1) (2 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 2 1 1 1 2) (1 1 1 1 2 1 1 1 2 1) (1 1 1 2 1 1 1 2 1 1) (1 1 2 1 1 1 2 1 1 1) (1 2 1 1 1 2 1 1 1 1) (elems 10 sum 12 olaps 90))" "((2 1 1 2 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 2) (1 2 1 1 1 1 1 1 2 1) (2 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 2 1 1 2) (1 1 1 1 1 2 1 1 2 1) (1 1 1 1 2 1 1 2 1 1) (1 1 1 2 1 1 2 1 1 1) (1 1 2 1 1 2 1 1 1 1) (1 2 1 1 2 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((2 1 2 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 2) (2 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 2 1 2) (1 1 1 1 1 1 2 1 2 1) (1 1 1 1 1 2 1 2 1 1) (1 1 1 1 2 1 2 1 1 1) (1 1 1 2 1 2 1 1 1 1) (1 1 2 1 2 1 1 1 1 1) (1 2 1 2 1 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((2 2 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 2 2) (1 1 1 1 1 1 1 2 2 1) (1 1 1 1 1 1 2 2 1 1) (1 1 1 1 1 2 2 1 1 1) (1 1 1 1 2 2 1 1 1 1) (1 1 1 2 2 1 1 1 1 1) (1 1 2 2 1 1 1 1 1 1) (1 2 2 1 1 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((3 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 3) (1 1 1 1 1 1 1 1 3 1) (1 1 1 1 1 1 1 3 1 1) (1 1 1 1 1 1 3 1 1 1) (1 1 1 1 1 3 1 1 1 1) (1 1 1 1 3 1 1 1 1 1) (1 1 1 3 1 1 1 1 1 1) (1 1 3 1 1 1 1 1 1 1) (1 3 1 1 1 1 1 1 1 1) (elems 10 sum 12 olaps 90))" "((1 1 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 1 2 1 1 1 1) (1 1 1 1 1 2 1 1 1 1 1) (1 1 1 1 2 1 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 1 1) (elems 11 sum 12 olaps 110))" "((1 1 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 1 2 1 1 1 1) (1 1 1 1 1 2 1 1 1 1 1) (1 1 1 1 2 1 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 2) (elems 11 sum 12 olaps 110))" "((1 1 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 1 2 1 1 1 1) (1 1 1 1 1 2 1 1 1 1 1) (1 1 1 1 2 1 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 1 2 1) (elems 11 sum 12 olaps 110))" "((1 1 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 1 2 1 1 1 1) (1 1 1 1 1 2 1 1 1 1 1) (1 1 1 1 2 1 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 1 2 1 1) (elems 11 sum 12 olaps 110))" "((1 1 1 1 1 1 2 1 1 1 1) (1 1 1 1 1 2 1 1 1 1 1) (1 1 1 1 2 1 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 1 2 1 1 1) (elems 11 sum 12 olaps 110))" "((1 1 1 1 1 2 1 1 1 1 1) (1 1 1 1 2 1 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 1 2 1 1 1 1) (elems 11 sum 12 olaps 110))" "((1 1 1 1 2 1 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 1 2 1 1 1 1) (1 1 1 1 1 2 1 1 1 1 1) (elems 11 sum 12 olaps 110))" "((1 1 1 2 1 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 1 2 1 1 1 1) (1 1 1 1 1 2 1 1 1 1 1) (1 1 1 1 2 1 1 1 1 1 1) (elems 11 sum 12 olaps 110))" "((1 1 2 1 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 1 2 1 1 1 1) (1 1 1 1 1 2 1 1 1 1 1) (1 1 1 1 2 1 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 1 1) (elems 11 sum 12 olaps 110))" "((1 2 1 1 1 1 1 1 1 1 1) (2 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 1 2 1 1 1 1) (1 1 1 1 1 2 1 1 1 1 1) (1 1 1 1 2 1 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 1 1) (elems 11 sum 12 olaps 110))" "((2 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 2) (1 1 1 1 1 1 1 1 1 2 1) (1 1 1 1 1 1 1 1 2 1 1) (1 1 1 1 1 1 1 2 1 1 1) (1 1 1 1 1 1 2 1 1 1 1) (1 1 1 1 1 2 1 1 1 1 1) (1 1 1 1 2 1 1 1 1 1 1) (1 1 1 2 1 1 1 1 1 1 1) (1 1 2 1 1 1 1 1 1 1 1) (1 2 1 1 1 1 1 1 1 1 1) (elems 11 sum 12 olaps 110))" "((1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (elems 12 sum 12 olaps 132))" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 975 208) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 68 25) (quote "mode") "" (om-make-point 972 175) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 259 35) (quote "Q-COMBI-FROM-ELEMENTS") "" (om-make-point 86 45) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 798 404) (om-make-point 161 157) (load-buffer-textfile (quote ("((1))" "((2))" "((1 2) (2 1))" "((2 1) (1 2))" "((3))" "((1 3) (3 1))" "((3 1) (1 3))" "((4))" "((1 4) (4 1))" "((2 3) (3 2))" "((3 2) (2 3))" "((4 1) (1 4))" "((5))" "((1 5) (5 1))" "((2 4) (4 2))" "((4 2) (2 4))" "((5 1) (1 5))" "((6))" "((1 2 5) (2 5 1) (5 1 2))" "((1 5 2) (5 2 1) (2 1 5))" "((2 1 5) (1 5 2) (5 2 1))" "((2 5 1) (5 1 2) (1 2 5))" "((2 6) (6 2))" "((3 5) (5 3))" "((5 1 2) (1 2 5) (2 5 1))" "((5 2 1) (2 1 5) (1 5 2))" "((5 3) (3 5))" "((6 2) (2 6))" "((8))" "((1 3 6) (3 6 1) (6 1 3))" "((1 6 3) (6 3 1) (3 1 6))" "((2 8) (8 2))" "((3 1 6) (1 6 3) (6 3 1))" "((3 6 1) (6 1 3) (1 3 6))" "((4 6) (6 4))" "((6 1 3) (1 3 6) (3 6 1))" "((6 3 1) (3 1 6) (1 6 3))" "((6 4) (4 6))" "((8 2) (2 8))" "((10))" "((1 3 8) (3 8 1) (8 1 3))" "((1 8 3) (8 3 1) (3 1 8))" "((2 10) (10 2))" "((3 1 8) (1 8 3) (8 3 1))" "((3 4 5) (4 5 3) (5 3 4))" "((3 5 4) (5 4 3) (4 3 5))" "((3 8 1) (8 1 3) (1 3 8))" "((4 3 5) (3 5 4) (5 4 3))" "((4 5 3) (5 3 4) (3 4 5))" "((4 8) (8 4))" "((5 3 4) (3 4 5) (4 5 3))" "((5 4 3) (4 3 5) (3 5 4))" "((8 1 3) (1 3 8) (3 8 1))" "((8 3 1) (3 1 8) (1 8 3))" "((8 4) (4 8))" "((10 2) (2 10))" "((12))" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-COMBI-FROM-ELEMENTS 2" (quote cnmat:q-combi-from-elements) (quote ((om-load-inputfun (quote input-funbox) "a list of elements" "ELEMENTS-LIST" (list 1 2 3 4 5 6 8 10 12)) (om-load-inputfun (quote input-funbox) "ordered variable number" "ORDERED" 1))) (om-make-point 117 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-COMBI-FROM-ELEMENTS" (quote cnmat:q-combi-from-elements) (quote ((om-load-inputfun (quote input-funbox) "a list of elements" "ELEMENTS-LIST" (list 1 2 3 4 5 6 8 10 12)) (om-load-inputfun (quote input-funbox) "ordered variable number" "ORDERED" 1) (om-load-inputfun (quote input-funbox) "mode: 0or 1" "MODE" 0))) (om-make-point 809 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "yes" "no")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 47 505) (om-make-point 339 60) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 319 24) "untitled" :range (quote (((1) 0) ((2) 0) ((3) 0) ((1 2) (2 1) 0) ((4) 0) ((1 3) (3 1) 0) ((5) 0) ((1 4) (4 1) 0) ((2 3) (3 2) 0) ((6) 0) ((1 5) (5 1) 0) ((2 4) (4 2) 0) ((1 2 3) (2 3 1) (3 1 2) 2) ((8) 0) ((2 6) (6 2) 0) ((3 5) (5 3) 0) ((1 2 5) (2 5 1) (5 1 2) 0) ((1 3 4) (3 4 1) (4 1 3) 2) ((10) 0) ((2 8) (8 2) 0) ((4 6) (6 4) 0) ((1 3 6) (3 6 1) (6 1 3) 0) ((1 4 5) (4 5 1) (5 1 4) 2) ((2 3 5) (3 5 2) (5 2 3) 2) ((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) 6) ((12) 0) ((2 10) (10 2) 0) ((4 8) (8 4) 0) ((1 3 8) (3 8 1) (8 1 3) 0) ((1 5 6) (5 6 1) (6 1 5) 2) ((2 4 6) (4 6 2) (6 2 4) 2) ((3 4 5) (4 5 3) (5 3 4) 0) ((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) 6) ((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) 2)))))) (om-set-selected-item-index rep (quote 14)) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 44 613) (om-make-point 318 250) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 1 3) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 394 570) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "quick-player" (om-load-patch-abs1 "quick-player" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 73 635) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR 3" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 178 130) (om-make-point 64 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tempo" 1 (om-make-point 106 42) "" "tempo" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 715 353) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 705 383) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 665 104) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 655 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 724 277) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 653 307) (om-make-point 20 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 610 173) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 580 199) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 555 51) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR 2" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 604 101) (om-make-point 22 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 132 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 626 57) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 680 184) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 605 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 480 232) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 526 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 83 453) (om-make-point 34 30) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 69 483) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 63 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 32 346) (om-make-point 33 35) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 6 207) (om-make-point 241 30) (list (list 1 2 3 4) (list 2 3 4 1) (list 3 4 1 2) (list 4 1 2 3) 6) "((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 52 282) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 256 398) (om-make-point 382 217) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 (1 (1.0 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 1)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 1)) (1 (3 1)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 592 425) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 279 169) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 323 55) (om-make-point 63 121) (list (list 6000) (list 6400) (list 6700) (list 7100) (list 7400) (list 7700) (list 8100) (list 8400)) "((6000)$(6400)$(6700)$(7100)$(7400)$(7700)$(8100)$(8400))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 518 117) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 154 47) (quote "rotations->poly from get-rotations object") "" (om-make-point 393 23) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY" (quote cnmat:s-poly) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 304 248) (om-make-point 103 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "rhythms" 0 (om-make-point 5 45) "" "rhythms" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((25 1 0 0 nil 0) (2 0 1 0 nil 0) (28 0 1 1 nil 0) (8 0 4 0 nil 0) (3 0 4 1 nil 0) (14 0 6 0 nil 0) (5 0 6 1 nil 0) (16 0 8 0 nil 0) (7 0 8 1 nil 0) (31 0 11 0 nil 0) (14 0 12 1 nil 0) (31 0 13 0 nil 0) (23 0 13 1 nil 0) (23 0 14 0 nil 0) (10 0 16 0 nil 0) (6 0 16 1 nil 0) (15 0 16 2 nil 0) (17 0 18 0 nil 0) (21 0 20 0 nil 0) (19 0 20 1 nil 0) (22 0 21 0 nil 0) (24 0 21 1 nil 0) (13 0 24 0 nil 0) (30 0 25 1 nil 0) (31 0 30 0 nil 0) (20 0 30 1 nil 0) (26 0 30 2 nil 0) (27 0 30 3 nil 0) (1 0 30 4 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "rhythms" nil) (om-load-inputfun (quote input-funbox) "" "tempo" nil))) (om-make-point 403 699) nil (list (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1/2 (((8 16) (2 6))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1/2 (((8 16) (6 2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil "quick-player"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 701 608) (om-make-point 501 245) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1/2 (((8 16) (2 6))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1/2 (((8 16) (6 2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 705 481) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 449 669) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 48 31) (quote "tempo") "" (om-make-point 451 620) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 63 34) (quote "rhythm") "" (om-make-point 366 666) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((18 0 13 1 nil 0) (19 0 17 1 nil 0) (0 0 18 0 nil 0) (2 0 18 1 nil 0) (11 0 19 0 nil 0) (12 0 19 1 nil 0) (14 0 19 2 nil 0) (13 1 20 0 nil 0) (22 0 21 1 nil 0) (20 1 22 0 nil 0) (22 0 23 0 nil 0) (25 0 23 1 nil 0) (23 0 24 1 nil 0))) 6.110001 nil "" (om-make-point 88 23) (om-make-point 1315 845)) (quote nil) (om-make-point 38 606) nil nil nil "q-combi-from-elements"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 430 67) (quote "Provided with a group of lists, iteratively builds output lists returning lists built up by element for each rotation.$") "" (om-make-point 211 537) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "q-permutations+canon-all" (om-load-patch-abs1 "q-permutations+canon-all" (quote ((let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 880 520) (om-make-point 277 455) (load-buffer-textfile (quote ("((1 2 3) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 1 3) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (3 2 1) (elems 3 sum 6 olaps 0))" "((2 1 3) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (3 1 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 2 3) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((3 1 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((3 2 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 3 2) (elems 3 sum 6 olaps 2))" "((3 1 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 5))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 5))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 5))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 5))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 7))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 7))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 227 83) (quote "<-- output utility, mode=2$function output sorted by fewest onset overlaps + excluding rotations") "" (om-make-point 895 307) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-UTILITY 3" (quote cnmat:q-permutations+canon-utility) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))) (om-load-inputfun (quote input-funbox) "a mode argument" "MODE" 0))) (om-make-point 906 422) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1042 395) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 324 447) (om-make-point 352 86) (load-buffer-textfile (quote ("((1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 8))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 4))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 1 3) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 7))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 2 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((1 3 2) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 8))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 5))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 1 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 1 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 2 3) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 7))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 3 2) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((3 1 2) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((3 2 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 373 644) (om-make-point 298 269) (load-buffer-textfile (quote ("((1 2 3) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 1 3) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (3 2 1) (elems 3 sum 6 olaps 0))" "((2 1 3) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (3 1 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 2 3) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((3 1 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((3 2 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 3 2) (elems 3 sum 6 olaps 2))" "((3 1 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 2 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 3))" "((1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((1 2 3) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 4))" "((2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 1 3) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 3 1) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 4))" "((3 1 2) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 4))" "((3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 5))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 5))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 5))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 5))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 7))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 7))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 8))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 8))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 8))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 9))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 179 29) (quote "<--function output") "" (om-make-point 695 468) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 224 59) (quote "<--output utility, mode=1$function output sorted by fewest onset overlaps") "" (om-make-point 595 543) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-UTILITY 2" (quote cnmat:q-permutations+canon-utility) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))) (om-load-inputfun (quote input-funbox) "a mode argument" "MODE" 0))) (om-make-point 409 558) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 552 543) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 155 579) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-UTILITY" (quote cnmat:q-permutations+canon-utility) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))) (om-load-inputfun (quote input-funbox) "a mode argument" "MODE" 0))) (om-make-point 14 584) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 185 46) (quote "Output utility--mode=0 = exclude rotations") "" (om-make-point 34 497) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 54 697) (om-make-point 112 160) (load-buffer-textfile (quote ("((1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 1 3) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 8))" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 12))" "((1 2 3) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 5))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 9))" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 7))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 2 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((1 2 3) (3 2 1) (1 3 2) (elems 3 sum 6 olaps 4))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 1 3) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 9))" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 3 2) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 7))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 8))" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((1 3 2) (3 2 1) (elems 3 sum 6 olaps 0))" "((1 3 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 5))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((1 3 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((1 3 2) (1 2 3) (2 1 3) (elems 3 sum 6 olaps 4))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 1 2) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 8))" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 5))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 2 3) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 1 3) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 1 3) (1 3 2) (2 3 1) (elems 3 sum 6 olaps 2))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 1 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (3 2 1) (elems 3 sum 6 olaps 2))" "((2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 4))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 9))" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 2 3) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 12))" "((2 3 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((2 3 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 6))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 9))" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((2 3 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((2 3 1) (2 1 3) (3 1 2) (elems 3 sum 6 olaps 4))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (elems 3 sum 6 olaps 7))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (3 2 1) (elems 3 sum 6 olaps 2))" "((3 1 2) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 7))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 12))" "((3 1 2) (1 3 2) (elems 3 sum 6 olaps 2))" "((3 1 2) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 4))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 9))" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 1 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 7))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 1 2) (2 3 1) (elems 3 sum 6 olaps 0))" "((3 1 2) (2 3 1) (3 2 1) (elems 3 sum 6 olaps 4))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 2 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (1 3 2) (elems 3 sum 6 olaps 0))" "((3 2 1) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 1 3) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 6))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 12))" "((3 2 1) (2 3 1) (elems 3 sum 6 olaps 2))" "((3 2 1) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 4))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 5))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 9))" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 12))" "((3 2 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((3 2 1) (3 1 2) (1 2 3) (elems 3 sum 6 olaps 3))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (elems 3 sum 6 olaps 7))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (elems 3 sum 6 olaps 8))" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (elems 3 sum 6 olaps 12))" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 310 29) (quote "Permutations+Canon-Growth-Return-All") "" (om-make-point 97 12) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 436 135) (quote "Provided with a group of lists, iteratively builds output lists returning lists built up by element for each rotation.$$All lists are return.  The last element in the list indicates the number of points of onsets overlap in the list, not counting the initial attacks.$$Do this process on each rotation of the original lists provided.$$") "" (om-make-point 95 51) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 406 215) (om-make-point 153 107) (load-buffer-textfile (quote ("(1 2 3)" "(1 3 2)" "(2 1 3)" "(2 3 1)" "(3 1 2)" "(3 2 1)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-ALL" (quote cnmat:q-permutations+canon-all) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))))) (om-make-point 390 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 1 nil 0) (17 0 2 0 nil 0) (3 0 2 1 nil 0) (17 0 4 1 nil 0) (8 0 5 1 nil 0) (4 1 8 0 nil 0) (9 0 8 1 nil 0) (4 1 11 0 nil 0) (10 0 11 1 nil 0) (11 0 13 1 nil 0) (16 1 17 0 nil 0))) 6.110001 nil "" (om-make-point 0 23) (om-make-point 1440 851)) (quote nil) (om-make-point 32 525) nil nil nil "q-permutations+canon-all"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 430 67) (quote "Builds lists of lists based on a iterative operations testing for no onset overlaps.") "" (om-make-point 208 445) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 430 67) (quote "Returns a specified number of permutations from a given list such that none of the returned lists are rotations of one another.") "" (om-make-point 203 365) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "q-n-permutations-no-rotations" (om-load-patch-abs1 "q-n-permutations-no-rotations" (quote ((let ((box (om-load-boxcomment "comment 5" (om-make-point 232 31) (quote "Q-N-Permutations-No-Rotations") "" (om-make-point 98 41) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 302 69) (quote "Returns a specified number of permutations from a given list such that none of the returned lists are rotations of one another.") "" (om-make-point 99 70) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 126 27) (quote "original list") "" (om-make-point 114 143) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 150 29) (quote "no. of results desired") "" (om-make-point 271 144) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 275 179) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 117 179) (om-make-point 80 30) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 105 342) (om-make-point 194 158) (load-buffer-textfile (quote ("(2 4 3 1 5)" "(5 3 4 1 2)" "(3 5 1 2 4)" "(2 4 1 5 3)" "(5 4 2 3 1)" "(3 5 4 2 1)" "(3 1 2 5 4)" "(1 4 3 5 2)" "(3 4 2 1 5)" "(2 3 4 1 5)" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 256 89) (quote "N.B. if the no. of results desired is > the no. of possible results the computer then the computer will keep searching for results and return none.") "" (om-make-point 99 518) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-N-PERMUTATIONS-NO-ROTATIONS" (quote cnmat:q-n-permutations-no-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list for permuting" "MYLIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "the number of permutations desired" "NUM-RESULTS" 4))) (om-make-point 96 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 6 1 nil 0) (5 0 8 0 nil 0) (4 0 8 1 nil 0))) 6.110001 nil "" (om-make-point 350 53) (om-make-point 486 665)) (quote nil) (om-make-point 17 357) nil nil nil "q-n-permutations-no-rotations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "q-combi 2" (om-load-patch-abs1 "q-combi" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 49 35) (quote "mode") "" (om-make-point 303 117) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 49 35) (quote "sum") "" (om-make-point 214 116) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 49 35) (quote "num") "" (om-make-point 256 116) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 56 33) (quote "space") "" (om-make-point 136 117) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 308 157) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-COMBI 2" (quote cnmat:q-combi) (quote ((om-load-inputfun (quote input-funbox) "list of allowed durations" "DUR-SPACE" (list 1 2 3 4 5 6 8 10 12 15 20 24 30 40 60 120)) (om-load-inputfun (quote input-funbox) "sum of durations" "SUM" 120) (om-load-inputfun (quote input-funbox) "number of elements" "NUM" nil) (om-load-inputfunmenu1 (quote input-funmenu) "allow repeated elements?" "MODE" 0 (list (list "ordered without repetitions" 0) (list "unordered without repetitions" 1) (list "unordered with repetitions" 2))))) (om-make-point 176 231) (om-make-point 182 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 167 479) (om-make-point 204 227) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 4 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 2 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 4 2) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 175 319) (om-make-point 180 132) (load-buffer-textfile (quote ("(1 3 4)" "(1 4 3)" "(2 2 4)" "(2 3 3)" "(2 4 2)" "(3 1 4)" "(3 2 3)" "(3 3 2)" "(3 4 1)" "(4 1 3)" "(4 2 2)" "(4 3 1)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 225 155) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 140 155) (om-make-point 70 30) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 272 157) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 625 94) (quote "Computes and returns the list of all combinations of <num> elements in <dur-space> which sum up to <sum>. <mode> (0, 1 or 2) determines whether or not the list must remain ordered and if repetitions are allowed in the results. <num> can be a signle number or a list of integers. If <num> = NIL all number of elements will be searched.") "" (om-make-point 129 19) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 5 0 nil 0) (8 0 5 1 nil 0) (10 0 5 2 nil 0) (4 0 5 3 nil 0) (7 1 6 1 nil 0) (5 0 7 1 nil 0))) 6.110001 nil "" (om-make-point 412 23) (om-make-point 896 824)) (quote nil) (om-make-point 80 53) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 112 32) (quote "DATABASE") "" (om-make-point 66 12) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 430 67) (quote "Computes and returns the list of all combinations of <num> elements in <dur-space> which sum up to <sum>.") "" (om-make-point 200 54) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.110001 nil "" (om-make-point 454 23) (om-make-point 928 826)) (quote nil) (om-make-point 80 112) nil nil nil "DATABASE"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "DURATION" (om-load-patch-abs1 "DURATION" (quote ((let ((box (om-load-boxcall (quote abstraction) "r-tatum-mapping-test 2" (om-load-patch-abs1 "r-tatum-mapping-test" (quote ((let ((box (om-load-boxcall (quote genfun) "R-TATUM-MAPPING" (quote cnmat::r-tatum-mapping) (quote ((om-load-inputfun (quote input-funbox) "" "MYLIST" nil))) (om-make-point 187 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 87 102) (om-make-point 384 63) (load-buffer-textfile (quote ("(1 2 3 4 5 6 8 10 15 20)" "(1 2 3 4 5 6 8 10 15 20)" "(1 2 3 4 5 6 8 10 15 20)" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 409 40) (quote "Maps numbers to tatums according to a key.  See the key below.$Input must be a list of lists!") "" (om-make-point 82 57) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 242 32) (quote "TATUM MAPPING") "" (om-make-point 81 27) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 79 270) (om-make-point 397 66) (load-buffer-textfile (quote ("((1 (4)) (1 (8)) (1 (12)) (1 (16)) (1 (20)) (1 (24)) (1 (32)) (1 (40)) (1 (2)) (1 (1)))" "((1 (4)) (1 (8)) (1 (12)) (1 (16)) (1 (20)) (1 (24)) (1 (32)) (1 (40)) (1 (2)) (1 (1)))" "((1 (4)) (1 (8)) (1 (12)) (1 (16)) (1 (20)) (1 (24)) (1 (32)) (1 (40)) (1 (2)) (1 (1)))" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 317 218) (quote "Tatum Mapping Key:$1 = 1 beat of a quarter note (1 (4))$2 = 1 beat of eighth notes (1 (8))$3 = 1 beat of triplets (1 (12))$4 = 1 beat of sixteenths (1 (16))$5 = 1 beat of quintuplets (1 (20))$6 = 1 beat of setuplets (1 (24))$8 = 1 beat of thirty-seconds (1 (32))$10 = 1 beat of quintuplet thirty-seconds (1 (40))$//skipping triplet quarters for now$15 = 1 beat of a half note (1 (2))$//skipping dotted half for now...$20 = 1 beat of a whole note (1 (1))$$") "" (om-make-point 545 31) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 1 0 0 nil 0) (0 0 4 1 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 998 524)) (quote nil) (om-make-point 62 703) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 366 61) (quote "Generate all \"children\" substitutions for a desired duration or set of durations.") "" (om-make-point 238 710) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 366 61) (quote "Generate all \"children\" substitutions for a desired duration or set of durations.") "" (om-make-point 234 632) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-substitute-children 2" (om-load-patch-abs1 "r-substitute-children" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 311 72) (quote "Generate all \"children\" substitutions for a desired duration or set of durations. Remove any undesired combinations using the disalllowed durations parameter.") "" (om-make-point 101 48) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 204 41) (quote "R-SUBSTITUTE-CHILDREN") "" (om-make-point 101 17) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 775 151) (om-make-point 539 531) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 5 7) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 1 1 -4 -5 -7) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -3 3 1 -5 -7) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -3 1 3 -5 -7) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -3 1 1 1 1 -5 -7) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 5 7 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -16 1 1 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 1 -5 -7 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 3 -5 -7 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 1 1 1 -5 -7 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 5 7 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -12 1 1 1 -4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -15 3 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -15 1 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -15 1 1 1 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 7 3 4 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 1 1 1 -4 -5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -10 3 1 -5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -10 1 3 -5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -10 1 1 1 1 -5) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 1011 851) (om-make-point 429 23))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-SUBSTITUTE-CHILDREN" (quote cnmat::r-substitute-children) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "CHILDREN-DESIRED" nil) (om-load-inputfun (quote input-funbox) "" "REMOVE-VALUES" nil))) (om-make-point 278 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "PRF $(A PRF)") "" (om-make-point 102 148) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 204 41) (quote "PARAMETERS") "" (om-make-point 100 120) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 544 218) (om-make-point 41 30) (list 2) "(2 )" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 210 85) (quote "Desired \"children\" substitutions:$provide a list of durations for substitution") "" (om-make-point 312 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 214 70) (quote "List of Disallowed Durations:$remove any combination that contains any one of these numbers") "" (om-make-point 539 144) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 316 212) (om-make-point 48 30) (list 3 4) "(3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 104 201) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 5 7) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 5 7 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 5 7 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 7 3 4 5) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 1 nil 0) (10 0 3 0 nil 0) (9 0 3 1 nil 0) (6 0 3 2 nil 0))) 6.110001 nil "" (om-make-point 94 174) (om-make-point 1346 700)) (quote nil) (om-make-point 68 622) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 366 61) (quote "Replaces a value with subset values (substitutions) that sum to the original value.$") "" (om-make-point 234 554) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-substitute-ex 2" (om-load-patch-abs1 "r-substitute-ex" (quote ((let ((box (om-load-boxcall (quote genfun) "R-SUBSTITUTE" (quote cnmat::r-substitute) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "VAL" nil) (om-load-inputfun (quote input-funbox) "" "SUBS" nil) (om-load-inputfun (quote input-funbox) "" "MODE" nil))) (om-make-point 1124 475) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-SUBSTITUTE" (quote cnmat::r-substitute) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "VAL" nil) (om-load-inputfun (quote input-funbox) "" "SUBS" nil))) (om-make-point 620 389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-SUBSTITUTE" (quote cnmat::r-substitute) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "VAL" nil) (om-load-inputfun (quote input-funbox) "" "SUBS" nil))) (om-make-point 293 397) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 22" (om-make-point 43 24) (quote "mode") "" (om-make-point 1231 443) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1205 447) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 6" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 1077 193) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1076 57) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 5" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 1080 571) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 1 -7 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 1 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 1 1 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 1 1 -3 -4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1141 396) (om-make-point 48 30) (list 6 2) "(6 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1209 395) (om-make-point 93 30) (list (list 3 3) (list 1 1)) "((3 3) (1 1) )" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 21" (om-make-point 228 47) (quote "R-SUBSTITUTE (mode = 1)") "" (om-make-point 1313 24) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 20" (om-make-point 290 232) (quote "$$R-substitute (mode 1) will only show the substitutions in the rhythmic frame.  All other values will be rests.$$Value arguments must be in the form of a list.$$Substitution arguments must be in the form of a lists of lists.") "" (om-make-point 1309 49) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 19" (om-make-point 45 28) (quote "value") "" (om-make-point 1141 367) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 18" (om-make-point 118 24) (quote "diminutions") "" (om-make-point 1192 368) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-INTERLEAVE" (quote cnmat:r-interleave) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM-PARENT" "RHYTHM-PARENT" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1354 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 4" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 1351 409) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 1 -7 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 1 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 1 1 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 1 1 -3 -4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 17" (om-make-point 208 28) (quote "Interleaved parent-child pairs") "" (om-make-point 1351 320) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS 2" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 1075 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1731 411) (om-make-point 121 137) (load-buffer-textfile (quote ("(1 1 -7 3 3)" "(-7 3 3 1 1)" "(-4 3 3 1 1 -3)" "(3 3 1 1 -3 -4)" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "old" (om-load-patch-abs1 "old" (quote ((let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.110001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (my-voices) $$(mapcar #'(lambda (r)  (cnmat::pulses r))  my-voices)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "MY-VOICES" nil))) (om-make-point 216 250) nil (list (list (list 2 3 4 6) (list -9 3 3) (list 3 4 6 2) (list -7 3 3 -2) (list 4 6 2 3) (list -4 3 3 -2 -3) (list 6 2 3 4) (list 3 3 -2 -3 -4))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 1741 625) nil nil nil "old"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-DURATION-LIST" (quote cnmat::r-duration-list) (quote ((om-load-inputfun (quote input-funbox) "" "MYVOICES" nil))) (om-make-point 1739 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-CUTS2" (quote cnmat:s-cuts2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "list of lists of tatums for each voice" "TATUM" (list (list (list 1 (list 16))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 2043 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 14" (om-make-point 53 27) (quote "tempo") "" (om-make-point 2370 96) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 97 24) (quote "pitches lists") "" (om-make-point 2258 91) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 97 24) (quote "tatum lists") "" (om-make-point 2118 90) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 11" (om-make-point 68 25) (quote "meter") "" (om-make-point 2047 88) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 68 25) (quote "rhythms") "" (om-make-point 1913 90) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1916 603) (om-make-point 298 174) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (-2 1)) (1 (1.0 1)) (1 (2.0 3)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6600)) :ldur (quote (182 182)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (327)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-2 (1 (-2 3)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (327)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 -2 (1 (-1 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 938 553) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf) (quote gf)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "play evens" (om-load-patch-abs1 "play evens" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 206 466) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 108 421) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 230 325) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 146 76) (quote "build a list of the even voices only and output them to a poly") "" (om-make-point 307 347) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 219 59) (quote "take the total number of voices and divide by 2 because you only want to play the even voices") "" (om-make-point 310 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 174 305) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 183 355) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 254 150) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 215 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 202 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice list" 0 (om-make-point 5 45) "" "voice list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (10 0 1 0 nil 0) (6 0 1 1 nil 0) (5 0 6 0 nil 0) (8 0 6 1 nil 0) (2 0 6 2 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "voice list" nil))) (om-make-point 1916 522) nil (list (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (-2 1)) (1 (1.0 1)) (1 (2.0 3)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6600)) :ldur (quote (182 182)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (327)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-2 (1 (-2 3)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (327)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 -2 (1 (-1 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil "play evens"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 225 34) (quote "PLAY ONLY EVEN VOICES") "" (om-make-point 1982 536) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2258 123) (om-make-point 115 66) (load-buffer-textfile (quote ("((6100 5900) 6200 (6400 6600) (6600 6700))" "(5100 5200 5400 5500)" "(4100 4200 4500 4900)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1912 119) (om-make-point 132 63) (load-buffer-textfile (quote ("(-1 5 7 9 10 12)" "(-5 7 9 10 12 1)" "(7 9 -10 12 1 5)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2117 119) (om-make-point 121 70) (load-buffer-textfile (quote ("((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "((1 (16)) (1 (12)) (1 (20)) (1 (16)))" "((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 2379 131) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 2048 128) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1916 293) (om-make-point 298 213) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5900)) :ldur (quote (182 182)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6600)) :ldur (quote (182 182)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5900)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6600)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6700)) :ldur (quote (109 109)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5900)) :ldur (quote (109 109)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6600)) :ldur (quote (109 109)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6700)) :ldur (quote (109 109)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5900)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6600)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 -1)) (1 (-1 -1 -1 -1)) (1 (-1 -1 1 1 1)) (1 (1 1 1 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5900)) :ldur (quote (182 182)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5900)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5900)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5900)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (-1 -1 -1 -1)) (1 (-1 -1 -1)) (1 (1 1 1 1 1)) (1 (1 1 1 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (-1 -1 -1)) (1 (-1 1 1 1)) (1 (1 1 1 1 1)) (1 (-1 -1 -1 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1440 574) (om-make-point 0 281) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 3" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 1713 684) (om-make-point 151 132) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 1 -7 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 1 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 1 1 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 1 1 -3 -4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 203 22) (quote "R-SUBSTITUTE (default)") "" (om-make-point 292 30) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 740 181) (quote "R-substitute object replaces a value with subset values (substitutions) that sum to the original value.$$In its default state (example 1 below) all values of the original rhythmic list music be given a substitution in the order listed. For example: value (3 4 5) with substitutions ((1 2) (1 3) (2 3)) will create diminutions in all voices of (3 4 5).$$Alternately, provide voice numbers for ALL voices and diminutions as needed for each voice in order to specify certain diminutions for particular voices (example 2 below).") "" (om-make-point 291 65) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 2" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 625 482) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 1 2 1 3 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 1 3 3 2 1 1 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 2 2 1 3 1) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 628 314) (om-make-point 59 30) (list 3 4 6) "(3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 82 27) (quote "EXAMPLE 2") "" (om-make-point 625 261) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 45 28) (quote "value") "" (om-make-point 626 285) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 118 24) (quote "substitutions") "" (om-make-point 744 283) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 748 308) (om-make-point 130 80) (load-buffer-textfile (quote ("(0 (1 2) (1 3) (3 3))" "(1 (3) (4) (6))" "(2 (1 1 1) (3 1) (3 3))" "(3 (2 1) (3 1) (3 3))" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 45 28) (quote "value") "" (om-make-point 293 291) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 118 24) (quote "substitutions") "" (om-make-point 394 291) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 82 27) (quote "EXAMPLE 1") "" (om-make-point 293 264) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 62 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 264 480) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 1 2 2 2 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 2 2 2 3 3 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 2 3 3 2 1 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 2 1 2 2 2) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 398 322) (om-make-point 121 30) (list (list 1 2) (list 2 2) (list 3 3)) "((1 2) (2 2) (3 3))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 300 323) (om-make-point 59 30) (list 3 4 6) "(3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 88 204) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 63 68) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (8 0 0 1 nil 0) (9 0 0 2 nil 0) (4 0 0 3 nil 0) (52 0 1 0 nil 0) (40 0 1 1 nil 0) (44 1 1 2 nil 0) (52 0 2 0 nil 0) (51 0 2 1 nil 0) (50 0 2 2 nil 0) (17 0 5 1 nil 0) (0 0 7 0 nil 0) (5 1 14 0 nil 0) (7 1 14 1 nil 0) (14 0 15 1 nil 0) (6 0 17 0 nil 0) (20 0 18 1 nil 0) (7 1 20 0 nil 0) (18 1 21 0 nil 0) (34 0 21 1 nil 0) (32 1 21 2 nil 0) (30 1 21 3 nil 0) (33 0 21 4 nil 0) (28 0 27 1 nil 0) (35 1 28 0 nil 0) (21 0 35 1 nil 0) (18 1 36 1 nil 0) (1 0 39 0 nil 0) (53 0 48 0 nil 0) (2 0 49 0 nil 0) (48 0 52 1 nil 0))) 6.110001 nil "" (om-make-point 66 23) (om-make-point 1440 816)) (quote nil) (om-make-point 82 545) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-polyrhythmic-frame 2" (om-load-patch-abs1 "r-polyrhythmic-frame" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1621 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 2" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 1426 101) (om-make-point 308 113) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 12) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 10) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 8) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 510 420) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 3" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 1769 103) (om-make-point 301 104) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 2 3 6) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 2" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 1416 328) (om-make-point 325 188) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 12) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 10) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 8) :from-file t))) :from-file t)) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 2 3 6) :from-file t))) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 510 420) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 371 33) (quote "Concatenate polyrhythmic frames using a list.") "" (om-make-point 1423 36) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 2" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 722 326) (om-make-point 325 188) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 12) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 10) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 8) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 2 3 6) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 510 420) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-INTERLEAVE" (quote cnmat:r-interleave) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM-PARENT" "RHYTHM-PARENT" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 894 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 3" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 1067 101) (om-make-point 301 104) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 2 3 6) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 2" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 724 99) (om-make-point 308 113) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 12) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 10) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 8) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 510 420) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 371 33) (quote "Interleave voices in a polyrhythmic frame with r-interleave.") "" (om-make-point 719 36) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 198 242) (quote "PRF-Polyrhythmic frame:$$Visualize rhythmic sequences.$$To print a polyrhythmic frame: double click on the object and use command-p to print.$$To delete a voices from a polyrhythmic frame: double click on the object, select a line, and hit delete.$$") "" (om-make-point 441 115) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 38) (quote "PRF-Polyrhythmic frame") "" (om-make-point 75 41) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 77 110) (om-make-point 329 266) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 12) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 10) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 8) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 2 3 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 2 4 5) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 1 0 0 nil 0) (2 1 0 1 nil 0) (0 0 3 1 nil 0) (6 0 5 1 nil 0) (8 1 6 0 nil 0) (7 1 6 1 nil 0))) 6.110001 nil "" (om-make-point 0 200) (om-make-point 1440 636)) (quote nil) (om-make-point 61 73) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 366 61) (quote "Collapes the attacks of all rhythmic frames within a polyrhythmic frame into one rhythmic frame.") "" (om-make-point 224 477) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-merge-ex 2" (om-load-patch-abs1 "r-merge-ex" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 670 433) (om-make-point 48 30) (list 1 3) "(1 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MERGE" (quote cnmat::r-merge) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "MYVOICES" nil) (om-load-inputfun (quote input-funbox) "" "ME" nil))) (om-make-point 923 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MERGE 3" (quote cnmat::r-merge) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "MYVOICES" nil))) (om-make-point 638 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MERGE 3" (quote cnmat::r-merge) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil))) (om-make-point 207 491) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 297 88) (quote "Provide a third argument \"1\" when you would like to specify several lists of rhythmic frames to merge.  ") "" (om-make-point 838 329) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 239 36) (quote "R-MERGE with three arguments") "" (om-make-point 837 298) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 239 36) (quote "R-MERGE with two arguments") "" (om-make-point 452 300) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 837 565) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 2 2 1 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 1 3 8) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1022 441) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 896 441) (om-make-point 110 30) (list (list 0) (list 0 3) (list 7 5)) "((0) (0 3) (7 5))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 444 567) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 7 2 1 2 3) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 70 24) (quote "R-MERGE") "" (om-make-point 62 45) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 294 99) (quote "R-merge collapes the attacks of all rhythmic frames within a polyrhythmic frame into one rhythmic frame.  An optional additional list specifies only those rhythmic frames within the polyrhythmic frame to be compressed. The output in both cases is a polyrhythmic frame.") "" (om-make-point 62 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 79 568) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 1 1 1 1 1 1 1 1 1 1 1 2) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 297 88) (quote "Provide a second argument when you would like to specify which rhythmic frames to merge.  Voices begin with 0, e.g. the first two voices would be specified in the list (0 1).") "" (om-make-point 450 332) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 63 178) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 -2 -3 -4) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 1 0 nil 0) (9 0 1 1 nil 0) (8 0 1 2 nil 0) (15 0 2 0 nil 0) (0 0 2 1 nil 0) (15 0 3 0 nil 0) (1 0 7 1 nil 0) (2 0 10 1 nil 0) (3 0 13 1 nil 0))) 6.110001 nil "" (om-make-point 135 23) (om-make-point 1305 851)) (quote nil) (om-make-point 90 469) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 366 61) (quote "Returns the durations of all rhythmic frame voices. ") "" (om-make-point 222 398) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-duration-list 2" (om-load-patch-abs1 "r-duration-list" (quote ((let ((box (om-load-boxcall (quote genfun) "R-DURATION-LIST 2" (quote cnmat::r-duration-list) (quote ((om-load-inputfun (quote input-funbox) "" "MYVOICES" nil))) (om-make-point 248 435) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 151 26) (quote "R-DURATION-LIST") "" (om-make-point 81 30) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 342 48) (quote "Returns the durations of all rhythmic frame voices. ") "" (om-make-point 75 54) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 240 522) (om-make-point 121 137) (load-buffer-textfile (quote ("(2 3 4 6)" "(-9 3 3)" "(3 4 6 2)" "(-7 3 3 -2)" "(4 6 2 3)" "(-4 3 3 -2 -3)" "(6 2 3 4)" "(3 3 -2 -3 -4)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 208 28) (quote "Interleaved parent-child pairs") "" (om-make-point 81 112) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 74 143) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 -2 -3 -4) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 1 0 0 nil 0) (0 0 3 1 nil 0))) 6.110001 nil "" (om-make-point 200 182) (om-make-point 470 692)) (quote nil) (om-make-point 83 391) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-scatter-attacks-ex 2" (om-load-patch-abs1 "r-scatter-attacks-ex" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 93 25) (quote "tatum-list") "" (om-make-point 624 280) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 60 25) (quote "tempo") "" (om-make-point 466 282) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 468 313) (om-make-point 41 30) 144 "144" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 619 308) (om-make-point 109 77) (load-buffer-textfile (quote ("((1(16)) (1(20)))" "((1(16)) (1(20)))" "((1(16)) (1(20)))" "((1(16)) (1(20)))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 388 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 147 29) (quote "number of voices") "" (om-make-point 428 87) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 230 44) (quote "R-SCATTER-ATTACKS") "" (om-make-point 63 8) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 72 119) (om-make-point 406 30) (list 1 2 3 1 2 3 1 2 2 4 1 2 3 1 2 3 1 2 2 4 1 2 3 1 2 3 1 2 2 6 1 2 8 1 8) "(1 2 3 1 2 3 1 2 2 4 1 2 3 1 2 3 1 2 2 4 1 2 3 1 2 3 1 2 2 6 1 2 8 1 8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 494 119) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-SCATTER-ATTACKS" (quote cnmat:r-scatter-attacks) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "RHYTHMLIST" (list 1/16 1/16 1/8 1/16 1/16 1/16 1/8)) (om-load-inputfun (quote input-funbox) "a list of lists" "NUMVOICES" (list nil)))) (om-make-point 331 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 103 473) (om-make-point 724 283) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) ((1 (-1 -2 -1)) (1 (-2 -1 2)) (1 (-3 -1)) (1 (-2 2 -1)))) ((4 4) ((1 (-3 -1)) (1 (-2 -3)) (1 (-1 -2 1)) (1 (2.0 1 2)))) ((4 4) ((1 (1 1)) (1 (2.0 -1 -2)) (1 (-3 -1)) (1 (-2 -3)))) ((4 4) ((1 (-1 -2 -1)) (1 (-1 -4)) (1 (-2 -1 -1)) (1 (-1 -4)))) ((4 4) (-1 (1 (-1 -4)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (104)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (83)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (208)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (208)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 144) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) ((1 (-1 -2 1)) (1 (2.0 1 -2)) (1 (3 -1)) (1 (2 -2 1)))) ((4 4) ((1 (3.0 -1)) (1 (-2 3)) (1 (1 2 -1)) (1 (-2 -1 -2)))) ((4 4) ((1 (-1 -1)) (1 (-2 1 2)) (1 (-3 1)) (1 (-2 -3)))) ((4 4) ((1 (1 -2 -1)) (1 (-1 -4)) (1 (-2 -1 1)) (1 (1.0 -4)))) ((4 4) (-1 (1 (-1 4)) 1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (104)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (83)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (312)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (83)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (104)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (208)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (83)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (104)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (104)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (104)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 144) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) ((1 (1 2 -1)) (1 (-2 -1 -2)) (1 (-3 1)) (1 (-2 -2 -1)))) ((4 4) ((1 (-3 -1)) (1 (2 -3)) (1 (-1 -2 -1)) (1 (-2 -1 -2)))) ((4 4) ((1 (-1 -1)) (1 (-2 -1 -2)) (1 (-3 -1)) (1 (2 -3)))) ((4 4) ((1 (-1 -2 -1)) (1 (-1 4)) (1 (2.0 1 -1)) (1 (-1 -4)))) ((4 4) (-1 (1 (-1 -4)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (104)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (208)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (104)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (104)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 144) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) ((1 (-1 -2 -1)) (1 (-2 -1 -2)) (1 (-3 -1)) (1 (-2 -2 -1)))) ((4 4) ((1 (-3 1)) (1 (-2 -3)) (1 (-1 -2 -1)) (1 (-2 -1 -2)))) ((4 4) ((1 (-1 -1)) (1 (-2 -1 -2)) (1 (3 -1)) (1 (-2 3)))) ((4 4) ((1 (-1 2 1)) (1 (1.0 -4)) (1 (-2 -1 -1)) (1 (-1 4)))) ((4 4) (1.0 (1 (1 -4)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (104)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (312)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (208)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (104)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (83)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 144) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 735 624) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf) (quote gf) (quote gf)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 583 110) (om-make-point 182 71) (load-buffer-textfile (quote ("(((8800 9200) 0.5) (8900 9300) )" "((7200 7500)) " "(5500 )" "(3300)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 247 28) (quote "pitch collections designated per voice") "" (om-make-point 578 85) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 143 26) (quote "rhythmic proportions") "" (om-make-point 72 88) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 256 78) (quote "p-map2, mode 1:$Random pitch from pitch collections.$Pitch collections specified for each voice.") "" (om-make-point 755 227) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 721 237) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 564 41) (quote "Distributes the attacks of a rhythm sequence randomly across a specified number of voices.") "" (om-make-point 63 34) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAP2" (quote cnmat:p-map2) (quote ((om-load-inputfun (quote input-funbox) "a list of rhythm lists (list of lists)" "DURATIONS-LIST" (list (list 3 4 5) (list 4 5 3) (list 5 3 4))) (om-load-inputfun (quote input-funbox) "a list (or list of lists) for pitch collections" "PITCH-COLLECTION" (list 7200 7300 7500 7700)) (om-load-inputfun (quote input-funbox) "mode: 0 = random choice from a pitch collection; 1 = random choice from a range of pitches" "MODE" 0))) (om-make-point 561 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 4 0 nil 0) (3 1 4 2 nil 0) (17 0 4 3 ((om-make-point 585 283) (om-make-point 585 375) (om-make-point 423 374) (om-make-point 424 392)) 0) (2 0 4 4 nil 0) (7 0 9 0 nil 0) (8 0 9 1 nil 0) (4 0 10 1 nil 0) (9 0 17 0 nil 0) (11 1 17 1 nil 0) (15 0 17 2 nil 0))) 6.110001 nil "" (om-make-point 200 102) (om-make-point 1070 772)) (quote nil) (om-make-point 64 309) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 312 64) (quote "Distributes the attacks of a rhythm sequence randomly across a specified number of voices.") "" (om-make-point 222 316) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 312 64) (quote "Visualization of rhythmic sequences that also allows for printing and editing out voices.") "" (om-make-point 219 71) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-interleave-ex 2" (om-load-patch-abs1 "r-interleave-ex" (quote ((let ((box (om-load-editor-box1 "PRF 5" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 848 190) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 847 42) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 4" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 852 556) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 -2 -3 -4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-DIMINUTIONS 2" (quote cnmat:r-diminutions) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "VAL" nil) (om-load-inputfun (quote input-funbox) "" "SUBS" nil))) (om-make-point 889 443) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 917 393) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 966 391) (om-make-point 48 30) (list 3 3) "(3 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 151 26) (quote "R-INTERLEAVE") "" (om-make-point 459 30) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 45 28) (quote "value") "" (om-make-point 913 364) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 118 24) (quote "diminutions") "" (om-make-point 965 364) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 3" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 1350 423) (om-make-point 491 331) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 2 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 2 4 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 2 4 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 -2 -3 -4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 4 -2 -3 -4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 118 24) (quote "diminutions") "" (om-make-point 1193 362) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 45 28) (quote "value") "" (om-make-point 1142 361) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1195 388) (om-make-point 48 30) (list 2 4) "(2 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1146 390) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-DIMINUTIONS" (quote cnmat:r-diminutions) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "VAL" nil) (om-load-inputfun (quote input-funbox) "" "SUBS" nil))) (om-make-point 1118 440) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-INTERLEAVE 2" (quote cnmat:r-interleave) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM-PARENT" "RHYTHM-PARENT" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1644 325) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 2" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 1101 547) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 2 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 2 4 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 2 4 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 4 -2 -3 -4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "listen-to-it" (om-load-patch-abs1 "listen-to-it" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 139 295) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 491 82) (om-make-point 491 331) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 2 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 2 4 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 2 4 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 -2 -3 -4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 4 -2 -3 -4) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 12 49) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 37 618) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ROTATIONS->POLY2" (quote cnmat:rotations->poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 59 325) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 59 416) (om-make-point 401 195) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 867 109) (om-make-point 573 765) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 42 130) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 384 128) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 221 119) (om-make-point 134 85) (load-buffer-textfile (quote ("(8000)" "(7800)" "(7700)" "(7500)" "(7300)" "(7200)" "(6800)" "(6700)" "(6500)" "(6400)" "(6300)" "(6000)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 97 26) (quote "pitches") "" (om-make-point 219 92) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 97 121) (om-make-point 109 77) (load-buffer-textfile (quote ("((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 60 26) (quote "tempo") "" (om-make-point 379 95) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 0 nil 0) (2 0 4 0 nil 0) (6 0 4 1 nil 0) (10 1 4 2 nil 0) (8 1 4 3 nil 0) (7 0 4 4 nil 0) (0 0 4 5 nil 0) (4 0 5 1 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1959 289) nil (list (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-2 (1 (-1 3)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-2 (1 (-1 2 1)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 (1 (1.0 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-1 (1 (-3 1)) (1 (1.0 1)) (1 (1.0 -2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-1 (1 (-3 1)) (1 (1.0 3)) (1 (1.0 -2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 1)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-1 (1 (3 1)) (1 (1.0 -1)) (1 (-3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-1 (1 (1 1)) (1 (1.0 -1)) (1 (-3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 1)) (1 (3 1)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (1.0 -1)) (1 (-3 -1)) (1 (-3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 -1)) (1 (-3 -1)) (1 (-3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil "listen-to-it"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1880 401) (om-make-point 330 320) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 3)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-2 (1 (-1 3)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-2 (1 (-1 2 1)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 (1 (1.0 2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-1 (1 (-3 1)) (1 (1.0 1)) (1 (1.0 -2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-1 (1 (-3 1)) (1 (1.0 3)) (1 (1.0 -2 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 1)) (1 (3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-1 (1 (3 1)) (1 (1.0 -1)) (1 (-3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-1 (1 (1 1)) (1 (1.0 -1)) (1 (-3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 1)) (1 (3 1)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (1.0 -1)) (1 (-3 -1)) (1 (-3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 -1)) (1 (-3 -1)) (1 (-3 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 828 457) (om-make-point 583 276) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 298 57) (quote "Click inside to see rotations->poly2 object used$to convert interleaved rhythmic frames into") "" (om-make-point 1869 216) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS 2" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 846 92) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 148 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 283 219) (quote "R-interleave is a function that interleaves a parent and a child polyrhythmic frame.$$The inputs must be polyrhythmic frames of the same number of voices.$$Interleave an arbitrary number of rhythmic frames$using the rhythmic frame's \"voices\" output.$Increase the number of inputs in r-interleave object for any number of rhythmic frames.$") "" (om-make-point 455 57) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 462 370) (om-make-point 256 205) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 3 3 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 3 3 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 2 3 4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-INTERLEAVE" (quote cnmat:r-interleave) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM-PARENT" "RHYTHM-PARENT" nil) (om-load-inputfun (quote input-funbox) "RHYTHM-CHILD" "RHYTHM-CHILD" nil))) (om-make-point 513 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 154 497) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 3 3 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 3 3 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 2 3 4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 299 363) (om-make-point 58 30) (list (list 3 3)) "((3 3))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 260 364) (om-make-point 37 30) (list 6) "(6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-SUBSTITUTE" (quote cnmat::r-substitute) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "VAL" "VAL" nil) (om-load-inputfun (quote input-funbox) "SUBS" "SUBS" (list 4 2)))) (om-make-point 172 433) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 174 180) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 149 44) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((20 0 0 1 nil 0) (3 0 2 0 nil 0) (0 0 3 0 nil 0) (4 0 3 1 nil 0) (5 0 3 2 nil 0) (15 0 9 1 nil 0) (0 0 14 0 nil 0) (13 0 14 1 nil 0) (12 0 14 2 nil 0) (0 1 15 0 nil 0) (2 1 15 1 nil 0) (16 1 15 2 nil 0) (14 0 16 0 nil 0) (9 0 17 0 nil 0) (17 0 18 0 nil 0) (1 0 20 0 nil 0) (30 0 21 0 nil 0) (24 0 23 1 nil 0) (29 1 24 0 nil 0) (25 1 24 1 nil 0) (28 0 25 0 nil 0) (29 0 28 0 nil 0) (27 0 28 1 nil 0) (26 0 28 2 nil 0) (21 0 29 1 nil 0))) 6.110001 nil "" (om-make-point 42 23) (om-make-point 1397 784)) (quote nil) (om-make-point 78 232) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 312 64) (quote "Interleaves parent and child polyrhythmic frames.") "" (om-make-point 222 245) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 214 38) (quote "DURATION") "" (om-make-point 86 30) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 312 64) (quote "Replaces a rhythmic value with subset values (diminutions)  that sum to the original value.$") "" (om-make-point 219 155) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-diminutions-ex 2" (om-load-patch-abs1 "r-diminutions-ex" (quote ((let ((box (om-load-boxcall (quote genfun) "R-DIMINUTIONS 3" (quote cnmat:r-diminutions) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "VAL" nil) (om-load-inputfun (quote input-funbox) "" "SUBS" nil))) (om-make-point 134 450) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 91 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 208 28) (quote "Interleaved parent-child pairs") "" (om-make-point 413 371) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 332 416) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 -2 -3 -4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-INTERLEAVE" (quote cnmat:r-interleave) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM-PARENT" "RHYTHM-PARENT" nil) (om-load-inputfun (quote input-funbox) "RHYTHM-CHILD" "RHYTHM-CHILD" nil))) (om-make-point 335 373) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 118 24) (quote "diminutions") "" (om-make-point 209 375) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 45 28) (quote "value") "" (om-make-point 158 374) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 283 134) (quote "Like r-substitutions object, r-diminutions replaces a rhythmic value with subset values (diminutions)  that sum to the original value.$$R-diminutions will only show the diminutions in the rhythmic frame and all other values will be made into rests.") "" (om-make-point 329 99) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 151 26) (quote "R-DIMINUTIONS") "" (om-make-point 332 62) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 213 401) (om-make-point 58 30) (list (list 3 3)) "((3 3))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 164 403) (om-make-point 37 30) (list 6) "(6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 97 528) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 -2 -3 -4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 92 64) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 2" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 93 200) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 0 0 nil 0) (10 0 0 1 nil 0) (9 0 0 2 nil 0) (12 0 1 0 nil 0) (4 0 3 1 nil 0) (13 1 4 0 nil 0) (11 1 4 1 nil 0) (0 0 11 0 nil 0) (1 0 13 1 nil 0))) 6.110001 nil "" (om-make-point 460 23) (om-make-point 710 729)) (quote nil) (om-make-point 73 151) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.110001 nil "" (om-make-point 762 23) (om-make-point 654 842)) (quote nil) (om-make-point 79 189) nil nil nil "DURATION"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "PITCH" (om-load-patch-abs1 "PITCH" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 146 36) (quote "List Generators") "" (om-make-point 55 679) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "p-harmony-from-analysis" (om-load-patch-abs1 "p-harmony-from-analysis" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 153 27) (quote "Load sdif file here") "" (om-make-point 85 45) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 199 47) (quote "<---Listing of midipitch/velocity pairs") "" (om-make-point 910 423) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 664 418) (om-make-point 235 291) (load-buffer-textfile (quote ("(4610 100)" "(5806 71)" "(5312 52)" "(6038 48)" "(8674 46)" "(6770 46)" "(6198 46)" "(7208 45)" "(6508 45)" "(8900 44)" "(8832 44)" "(8786 44)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "pitch-velocity-pairs" (om-load-patch-abs1 "pitch-velocity-pairs" (quote ((let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 86 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.110001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (pitches velocities) $$$(mapcar 'list pitches velocities)$$$$)") (quote ((om-load-inputfun (quote input-funbox) "" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "" "VELOCITIES" nil))) (om-make-point 67 196) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "velocity" 1 (om-make-point 55 45) "" "velocity" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pitch" 0 (om-make-point 5 45) "" "pitch" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 8 373) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0) (0 0 4 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 651 333) nil (list (list (list 4610 100) (list 5806 71) (list 5312 52) (list 6038 48) (list 8674 46) (list 6770 46) (list 6198 46) (list 7208 45) (list 6508 45) (list 8900 44) (list 8832 44) (list 8786 44))) nil "pitch-velocity-pairs"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 193 27) (quote "no. of pitches desired") "" (om-make-point 151 352) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 380 96) (quote "p-harmony-from-analysis flattens all attacks into one event and returns n-pitches based on the greater amplitudes (velocities).  (Given equal velocity, the object will return the higher pitch).") "" (om-make-point 223 397) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 258 56) (quote "as->om returns a chordseq of all pitches and attacks") "" (om-make-point 501 237) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 153 386) (om-make-point 34 30) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 107 525) (om-make-point 233 177) (let ((thechord (make-instance (quote chord) :lmidic (quote (8832 8900 6508 7208 6198 6770 8674 6038 5312 5806 4610)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (44 44 45 45 46 46 46 48 52 71 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 797 383) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-HARMONY-FROM-ANALYSIS" (quote cnmat:p-harmony-from-analysis) (quote ((om-load-inputfun (quote input-funbox) "a chor-seq" "MYCHORDSEQ" (list nil)) (om-load-inputfun (quote input-funbox) "an optional argument specifying the numnber of pitches to return based on highest partial amplitude" "NUMPITCHES" 0))) (om-make-point 68 423) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 326 52) (quote "P-HARMONY-FROM-ANALYSIS") "" (om-make-point 87 9) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 231 120) (quote "<---RESULTS: CHORD$To hear microtones:$1) Set chord object \"approx\" to 1/4 or other microtonal level.$2) Apply \"auto microtone bend\" in the applicationPrefences/Midi section.$") "" (om-make-point 345 564) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Cb-ord-A#1-ff-3c.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 87 69) (om-make-point 389 93) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "Cb-ord-A#1-ff-3c" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 30 32) (om-make-point 893 267))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "micro-$tonal $approx.") "" (om-make-point 980 24) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 104 70) (quote "polyphony-$no. of notes by partial volume") "" (om-make-point 1050 18) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "midic$values for low and hi pitch") "" (om-make-point 872 30) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 86 71) (quote "delta:$window of time for events") "" (om-make-point 796 22) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 70) (quote "amplitudes of sdif scaled to min. max midi velocities") "" (om-make-point 696 27) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 1008 98) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 938 100) (om-make-point 62 30) 127000 "127000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 872 103) (om-make-point 48 30) 4000 "4000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 730 102) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 691 103) (om-make-point 34 30) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 392 39) (quote "***REQUIRES REPMUS LIBRARY to filter sdif files***") "" (om-make-point 309 9) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 182 44) (quote "<= filtering, approximation parameters") "" (om-make-point 1122 102) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1052 102) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 803 104) (om-make-point 41 30) 125 "125" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 171 34) (quote "from 'REPMUS' library =>") "" (om-make-point 494 178) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 96 173) (om-make-point 362 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4610 5806 5312 6038 8674 6770 6198 7208 6508 8900 8832 8786) (8860 12928 12796 12778 12716 12700 12684 12492 12482 12442 12316 12302) (12542 12520 12510 12476 12430 11442 10808 9558) (12534 11522 11372 11034 10462) (12740 12716 12438 12422 12388 12378 12150 12094 12042 11920 11800 11774) (12582 12528 12412 12372 12360 11832 11414 11338) (12674 12514 12446 12432 12394 12364 12190 11908 11728 11378 11072) (12350 11990 11954 11920 11426) (12784 12144 12124 12088 12076 12018 12000 11920 11906 11882 11828 11808) (12816 12794 12770 12762 12718 12702 12656 12102 12064 11974 11958 11782) (12162 12024 11930 11690 11602 11518 11352) (12446 12414 12388 12380 12188 12146 12058 12018 12008 11978 11922 11586) (12666 12650 12538 12366 12350 12090 11942 11930 11892 11874 11836 11776) (12450 12426 12408 12374 12316 12306 12194 12134 11918 11824 11488 11462) (12468 11602 11570 11528 11424 11254 11198 10108) (12756 12550 12516 12500 12478 12384 12000 11978 11768 11706 11686 11300) (12740 12720 12712 12674 12640 12614 12594 12556 12346 12138 12114 12006) (12780 12328 12298 12042 12034 11976 11946 11874 11792 11752 11694 11678) (12816 12794 12764 12658 12572 12544 12516 12490 12464 12398 12366 12338) (12846 12828 12774 12664 12642 12538 12520 12490 12450 12416 12350 12336) (12690 12672 12534 12492 12474 12436 12406 12366 12132 12108 11968 11934) (13394 12926 12800 12758 12696 12640 12550 12522 12440 12416 12356 12320) (12866 12666 12646 12314 11942 11740 11716 11578 11562 11532 11482 11418) (12940 12920 12872 12790 12772 12748 12720 12696 12650 12292 12120 12028) (5016 6040 8804 8726 8560 8480 7918 7790 7656 7478 12818 12804) (5586) (5582) (4080) (4084) (4090) (4088) (4108) (5820 4090))) :lonset (quote (0 120 240 400 520 650 770 900 1050 1170 1300 1420 1540 1680 1800 1920 2040 2220 2370 2490 2620 2740 2870 2990 3120 3250 3400 3630 3770 4100 4350 4530 4920 5950)) :ldur (quote ((5950 4860 5680 120 3840 4010 4980 4020 3970 3490 3690 130) (60 500 1570 460 40 540 60 740 2290 260 690 160) (680 1950 1570 1600 160 450 3030 3070) (400 550 2760 2910 2900) (170 310 2770 880 870 870 1450 340 220 260 60 1040) (470 290 430 130 1010 640 210 2060) (120 1320 780 450 410 210 500 2460 360 690 1370) (100 970 2310 160 1150) (670 220 1290 2160 570 2270 890 440 190 280 410 2010) (540 550 530 520 70 510 230 1170 900 510 210 2120) (360 1490 190 190 420 1640 1010) (700 530 980 460 1900 420 20 430 40 220 250 450) (310 320 940 410 1640 640 220 1720 1390 970 260 140) (1620 160 760 180 980 910 190 480 450 300 430 1390) (390 650 420 1490 370 1230 1460 1460) (1290 530 870 290 1330 920 1370 1240 160 70 1020 220) (1180 390 380 1150 1090 300 180 460 200 1170 580 320) (1020 180 170 1000 710 290 360 230 670 430 170 250) (960 930 900 280 180 870 910 270 610 930 430 880) (200 300 720 670 300 820 260 810 60 440 730 120) (570 260 350 700 420 680 290 620 260 620 360 130) (130 540 490 230 560 280 470 230 130 140 120 480) (450 40 340 420 430 240 430 380 420 420 390 460) (310 230 330 260 320 300 300 300 270 300 220 240) (140 150 150 90 140 190 120 170 190 220 160 150) (80) (780) (90) (110) (170) (130) (160) (100 270))) :lvel (quote ((100 71 52 48 46 46 46 45 45 44 44 44) (41 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (44 43 41 41 41 41 41 41 41 41 40 40) (42) (40) (41) (40) (40) (40) (40) (40 40))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 16 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -4) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 715 415) (om-make-point 400 23) 0 2 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 500) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 656 159) (om-make-point 375 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 1 nil 0) (8 1 3 0 ((om-make-point 171 700) (om-make-point 610 700) (om-make-point 607 328) (om-make-point 689 328) (om-make-point 689 333)) 0) (8 2 3 1 ((om-make-point 204 700) (om-make-point 635 708) (om-make-point 634 328) (om-make-point 727 328) (om-make-point 727 333)) 0) (9 0 8 0 nil 0) (29 0 9 0 ((om-make-point 842 224) (om-make-point 844 308) (om-make-point 117 309) (om-make-point 118 423)) 0) (7 0 9 1 nil 0) (29 0 28 0 nil 0) (12 0 29 0 nil 0) (22 0 29 1 nil 0) (21 0 29 2 nil 0) (26 0 29 3 nil 0) (20 0 29 4 nil 0) (19 0 29 5 nil 0) (18 0 29 6 nil 0) (25 0 29 7 nil 0))) 6.110001 nil "" (om-make-point 135 112) (om-make-point 1305 762)) (quote nil) (om-make-point 33 592) nil nil nil "p-harmony-from-analysis"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 450 52) (quote "Returns a chord object notating partials from a partial-tracking analysis.") "" (om-make-point 183 601) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 442 32) (quote "Returns a bpf lib for the pitch band to be sampled.") "" (om-make-point 188 523) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "p-make-bands" (om-load-patch-abs1 "p-make-bands" (quote ((let ((box (om-load-boxcall (quote genfun) "P-BANDS-COLLECTION" (quote cnmat:p-bands-collection) (quote ((om-load-inputfun (quote input-funbox) "a bpf-lib of two bpfs" "BPF-LIB" nil) (om-load-inputfun (quote input-funbox) "a list of list of attacks, in rotations or other specification" "ATTACKS-VOICES" (list (list 1 2 3 4) (list 2 3 4 5))) (om-load-inputfun (quote input-funbox) " a pitch collection from which to draw pitches" "PITCH-COLLECTION" (list 6000 6600 7200 7500)))) (om-make-point 500 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-BANDS-PITCHCLASS" (quote cnmat:p-bands-pitchclass) (quote ((om-load-inputfun (quote input-funbox) "a bpf-lib of two bpfs" "BPF-LIB" nil) (om-load-inputfun (quote input-funbox) "a list of list of attacks, in rotations or other specification" "ATTACKS-VOICES" (list (list 1 2 3 4) (list 2 3 4 5))) (om-load-inputfun (quote input-funbox) " a collection of allowable pitchclasses" "ALLOWABLE-PITCHCLASSES" (list 0 1 5)))) (om-make-point 496 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAKE-BANDS" (quote cnmat:p-make-bands) (quote ((om-load-inputfun (quote input-funbox) "a chord-seq" "MY-CHORD-SEQ" (list nil)))) (om-make-point 79 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 397 140) (quote "--Describes a band of pitches.$--Takes in a chord-seq with  three of more dyads.$--Returns a bpf lib describing a pitch band that can be sample across a series of attacks.$--Make-bands should be used in conjunction with objects pitch->bands-pitchclass or pitch->bands-collection objects$--See examples: 5b pitch->bands-collection or 5c pitch-bands->pitchclass") "" (om-make-point 349 137) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 178 33) (quote "P-Make-Bands$") "" (om-make-point 349 99) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 80 323) (om-make-point 299 210) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 597.0 1331.0 1638.0 2528.0 2916.0)) (quote (4000.0 4000.0 8400.0 8400.0 4000.0 4000.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 597.0 1331.0 1638.0 2528.0 2916.0)) (quote (5200.0 5200.0 9600.0 9600.0 5200.0 5200.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 799 487))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 89 105) (om-make-point 186 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5200 4000) (5200 4000) (8400 9600) (8400 9600) (4000 5200) (4000 5200))) :lonset (quote (0 597 1331 1638 2528 2916 3916)) :ldur (quote ((1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000))) :lvel (quote ((100 100) (100 100) (100 100) (100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((4) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((5) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 349 204) (om-make-point 522 409) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 1 0 0 nil 0) (5 1 1 0 nil 0) (6 0 2 0 nil 0) (2 0 5 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 764 617)) (quote nil) (om-make-point 59 519) nil nil nil "p-make-bands"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "p-bands-pitchclass" (om-load-patch-abs1 "p-bands-pitchclass" (quote ((let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 713 482) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-BANDS-PITCHCLASS" (quote cnmat:p-bands-pitchclass) (quote ((om-load-inputfun (quote input-funbox) "a bpf-lib of two bpfs" "BPF-LIB" nil) (om-load-inputfun (quote input-funbox) "a list of list of attacks, in rotations or other specification" "ATTACKS-VOICES" (list (list 1 2 3 4) (list 2 3 4 5))) (om-load-inputfun (quote input-funbox) " a collection of allowable pitchclasses" "ALLOWABLE-PITCHCLASSES" (list 0 1 5)))) (om-make-point 788 369) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 592 262) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAKE-BANDS" (quote cnmat:p-make-bands) (quote ((om-load-inputfun (quote input-funbox) "a chord-seq" "MY-CHORD-SEQ" (list nil)))) (om-make-point 64 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 838 211) (om-make-point 73 30) (list 0 1 5 6) "(0 1 5 6 )" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 147 22) (quote "allowable pitchclasses") "" (om-make-point 844 170) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 150 30) (quote "EVALUATE HERE") "" (om-make-point 567 587) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 76 30) (quote "tatum-lists") "" (om-make-point 706 169) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 711 204) (om-make-point 70 50) (load-buffer-textfile (quote ("((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 34 27) (quote "(5)") "" (om-make-point 532 587) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 34 27) (quote "(4)") "" (om-make-point 530 447) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 34 27) (quote "(3)") "" (om-make-point 816 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 34 27) (quote "(2)") "" (om-make-point 530 170) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 34 27) (quote "(1)") "" (om-make-point 29 104) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 548 115) (quote "PITCH->BANDS-PITCHCLASS$$(1) Set pitches to create bands for resulting pitch trajectory$(2) set rotations/attacks (this can be any set of rhythms or attacks list)$(3) constrain pitches to a set of allowable pitchclasses$(4) render to music through rotations->poly$(5) resultant poly object") "" (om-make-point 550 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 161 32) (quote "rhythms/attacks") "" (om-make-point 562 170) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 581 620) (om-make-point 720 256) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (1 2 1)) (1 (1.0 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) 1.0 (1 (3.0 1)) 1.0)) ((4 4) (1.0 (1 (3.0 1)) 2.0)) ((4 4) (1.0 (1 (3.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 3)) 1.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (2.0 1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (3 1)) 1.0 1 (1 (3.0 1)))) ((4 4) (2.0 2)) ((4 4) (1.0 3)) ((4 4) (1.0 (1 (1 2 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (1 (1 (1.0 3)) 1.0 1)) ((4 4) (1.0 (1 (1.0 3)) 2.0)) ((4 4) ((1 (1.0 3)) 3.0)) ((4 4) ((1 (1.0 1 2)) (1 (3 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (1 (1 (3.0 1)) 2.0)) ((4 4) (3 1)) ((4 4) (3.0 (1 (1 2 1)))) ((4 4) ((1 (1.0 1)) (1 (3.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (2 (1 (1.0 3)) 1.0)) ((4 4) (1.0 (1 (1.0 3)) 2.0)) ((4 4) (1.0 (1 (1.0 1 2)) (1 (3 1)) 1.0)) ((4 4) (1 (1 (3.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (3 1)) ((4 4) (3.0 (1 (1 2 1)))) ((4 4) ((1 (1.0 1)) (1 (3.0 1)) 1.0 (1 (1.0 1)))) ((4 4) (1.0 (1 (3.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (4)) ((4 4) ((1 (1 2 1)) (1 (1.0 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) 1.0 (1 (3.0 1)) 1.0)) ((4 4) (1.0 (1 (3.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (2182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 378 110) (om-make-point 1021 713) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 564 209) (om-make-point 127 30) (list 1 2 3 5 7 9 12 16) "(1 2 3 5 7 9 12 16)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 80 323) (om-make-point 299 210) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1400.0 2800.0)) (quote (3600.0 8400.0 3600.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1400.0 2800.0)) (quote (4800.0 9600.0 4800.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 799 487) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 89 105) (om-make-point 186 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600 4800) (8400 9600) (3600 4800))) :lonset (quote (0 1400 2800 3800)) :ldur (quote ((1000 1000) (1000 1000) (1000 1000))) :lvel (quote ((100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 522 409) (om-make-point 349 204) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 9 36) (om-make-point 247 30) (list (list 6000 7000) (list 5000 9000) (list 6000 7000)) "((6000 7000) (5000 9000) (6000 7000))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 282 36) (om-make-point 101 30) (list 0 1000 2000) "(0 1000 2000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (8 1 0 2 nil 0) (1 0 0 3 nil 0) (18 1 1 0 nil 0) (2 0 1 1 nil 0) (4 0 1 2 nil 0) (17 0 2 0 nil 0) (19 0 3 0 nil 0) (0 0 16 1 nil 0) (3 0 18 0 nil 0) (20 0 19 1 nil 0) (21 0 19 2 nil 0))) 6.110001 nil "" (om-make-point 44 48) (om-make-point 1396 826)) (quote nil) (om-make-point 46 440) nil nil nil "p-bands-pitchclass"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 441 71) (quote "Assigns pitches from a set of allowable pitchclasses and following the contour of bpf pitchbands.") "" (om-make-point 184 445) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 441 71) (quote "Returns random pitch samples from a collection, with pitches following the contour of the bpf pitch bands provided.") "" (om-make-point 184 358) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "p-bands-collection" (om-load-patch-abs1 "p-bands-collection" (quote ((let ((box (om-load-boxcall (quote genfun) "P-BANDS-COLLECTION" (quote cnmat:p-bands-collection) (quote ((om-load-inputfun (quote input-funbox) "a bpf-lib of two bpfs" "BPF-LIB" nil) (om-load-inputfun (quote input-funbox) "a list of list of attacks, in rotations or other specification" "ATTACKS-VOICES" (list (list 1 2 3 4) (list 2 3 4 5))) (om-load-inputfun (quote input-funbox) " a pitch collection from which to draw pitches" "PITCH-COLLECTION" (list 6000 6600 7200 7500)))) (om-make-point 874 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 796 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 577 288) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAKE-BANDS" (quote cnmat:p-make-bands) (quote ((om-load-inputfun (quote input-funbox) "a chord-seq" "MY-CHORD-SEQ" (list nil)))) (om-make-point 64 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 150 30) (quote "EVALUATE HERE") "" (om-make-point 567 587) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 76 30) (quote "tatum-lists") "" (om-make-point 691 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 696 203) (om-make-point 70 50) (load-buffer-textfile (quote ("((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "((1 (16)))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 814 197) (om-make-point 511 44) (load-buffer-textfile (quote ("(2600 4600 5500 5600 6200 6700 6800 7100 7200 7500 7800 8000 8100 8300 9000 9100 9300)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "voice->chordseq" (om-load-patch-abs1 "voice->chordseq" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 106 380) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 108 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 95 135) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 5 370) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "pitches" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 1 1 0 nil 0) (4 0 2 0 nil 0) (0 0 3 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1145 265) nil (list (list (list 2600 4600 5500 5600 6200 6700 6800 7100 7200 7500 7800 8000 8100 8300 9000 9100 9300))) nil "voice->chordseq"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 1070 9) (om-make-point 289 179) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1)) (1 (1 -7)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (2600)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 815 629) (om-make-point 620 28) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 34 27) (quote "(5)") "" (om-make-point 532 587) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 34 27) (quote "(4)") "" (om-make-point 543 447) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 34 27) (quote "(3)") "" (om-make-point 801 167) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 34 27) (quote "(2)") "" (om-make-point 515 169) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 34 27) (quote "(1)") "" (om-make-point 29 104) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 548 115) (quote "P-BANDS-COLLECTION$$(1) Set pitches to create bands for resulting pitch trajectory$(2) set rotations/attacks (this can be any set of rhythms or attacks list)$(3) constrain to pitch collection$(4) render to music through rotations->poly$(5) resultant poly object") "" (om-make-point 550 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 161 32) (quote "rhythms/attacks") "" (om-make-point 547 169) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 581 619) (om-make-point 720 256) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (1 2 1)) (1 (1.0 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) 1.0 (1 (3.0 1)) 1.0)) ((4 4) (1.0 (1 (3.0 1)) 2.0)) ((4 4) (1.0 (1 (3.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 3)) 1.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (2.0 1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (3 1)) 1.0 1 (1 (3.0 1)))) ((4 4) (2.0 2)) ((4 4) (1.0 3)) ((4 4) (1.0 (1 (1 2 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (1 (1 (1.0 3)) 1.0 1)) ((4 4) (1.0 (1 (1.0 3)) 2.0)) ((4 4) ((1 (1.0 3)) 3.0)) ((4 4) ((1 (1.0 1 2)) (1 (3 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (1 (1 (3.0 1)) 2.0)) ((4 4) (3 1)) ((4 4) (3.0 (1 (1 2 1)))) ((4 4) ((1 (1.0 1)) (1 (3.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (2 (1 (1.0 3)) 1.0)) ((4 4) (1.0 (1 (1.0 3)) 2.0)) ((4 4) (1.0 (1 (1.0 1 2)) (1 (3 1)) 1.0)) ((4 4) (1 (1 (3.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (3 1)) ((4 4) (3.0 (1 (1 2 1)))) ((4 4) ((1 (1.0 1)) (1 (3.0 1)) 1.0 (1 (1.0 1)))) ((4 4) (1.0 (1 (3.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (4)) ((4 4) ((1 (1 2 1)) (1 (1.0 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) 1.0 (1 (3.0 1)) 1.0)) ((4 4) (1.0 (1 (3.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (2182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 849 557) (om-make-point 378 110) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 549 208) (om-make-point 127 30) (list 1 2 3 5 7 9 12 16) "(1 2 3 5 7 9 12 16)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 161 32) (quote "pitches collection") "" (om-make-point 837 166) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 80 323) (om-make-point 299 210) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1400.0 2800.0)) (quote (8100.0 3800.0 8100.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1400.0 2800.0)) (quote (9300.0 5000.0 9300.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 799 487))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 89 105) (om-make-point 186 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100 9300) (3800 5000) (8100 9300))) :lonset (quote (0 1400 2800 3800)) :ldur (quote ((1000 1000) (1000 1000) (1000 1000))) :lvel (quote ((100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 349 204) (om-make-point 522 409) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 9 36) (om-make-point 247 30) (list (list 6000 7000) (list 5000 9000) (list 6000 7000)) "((6000 7000) (5000 9000) (6000 7000))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 282 36) (om-make-point 101 30) (list 0 1000 2000) "(0 1000 2000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((20 1 0 0 nil 0) (2 0 0 1 nil 0) (7 1 0 2 nil 0) (2 0 1 0 nil 0) (6 1 1 2 nil 0) (0 0 1 3 nil 0) (18 0 2 0 nil 0) (21 0 3 0 nil 0) (8 0 7 1 nil 0) (9 0 8 0 nil 0) (1 0 17 1 nil 0) (3 0 20 0 nil 0) (22 0 21 1 nil 0) (23 0 21 2 nil 0))) 6.110001 nil "" (om-make-point 44 48) (om-make-point 1396 826)) (quote nil) (om-make-point 46 349) nil nil nil "p-bands-collection"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "p-bands-register" (om-load-patch-abs1 "p-bands-register" (quote ((let ((box (om-load-boxcall (quote genfun) "P-BANDS-REGISTER" (quote cnmat:p-bands-register) (quote ((om-load-inputfun (quote input-funbox) "a bpf-lib of two bpfs" "BPF-LIB" nil) (om-load-inputfun (quote input-funbox) "a list of list of attacks, in rotations or other specification" "PITCHES" (list 6000 6000 6000 6000)))) (om-make-point 829 595) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-BANDS-REGISTER" (quote cnmat:p-bands-register) (quote ((om-load-inputfun (quote input-funbox) "a bpf-lib of two bpfs" "BPF-LIB" nil) (om-load-inputfun (quote input-funbox) "a list of list of attacks, in rotations or other specification" "PITCHES" (list 6000 6000 6000 6000)))) (om-make-point 189 610) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAKE-BANDS" (quote cnmat:p-make-bands) (quote ((om-load-inputfun (quote input-funbox) "a chord-seq" "MY-CHORD-SEQ" (list nil)))) (om-make-point 635 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAKE-BANDS" (quote cnmat:p-make-bands) (quote ((om-load-inputfun (quote input-funbox) "a chord-seq" "MY-CHORD-SEQ" (list nil)))) (om-make-point 67 356) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 192 28) (quote "pitch-bands") "" (om-make-point 644 167) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 650 196) (om-make-point 281 144) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400 9500) (3600 5900) (6000 7100) (3600 4700))) :lonset (quote (0 663 1686 3036 4036)) :ldur (quote ((1000 1000) (1000 1000) (1000 1000) (1000 1000))) :lvel (quote ((100 100) (100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((2) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 522 409) (om-make-point 760 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 651 437) (om-make-point 195 134) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 663.0 1686.0 3036.0)) (quote (8400.0 3600.0 6000.0 3600.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 663.0 1686.0 3036.0)) (quote (9500.0 5900.0 7100.0 4700.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 799 487) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 884 522) (om-make-point 249 30) (list 5900 6000 5900 6000 5900 6000 5900) "(5900 6000 5900 6000 5900 6000 5900)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 194 38) (quote "pitch-sequence") "" (om-make-point 881 494) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "map to pitches" (om-load-patch-abs1 "map to pitches" (quote ((let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 14 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 12 433) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 117 95) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 229 82) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 162 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 41 270) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sequence" 0 (om-make-point 5 45) "" "sequence" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (5 0 1 0 nil 0) (0 0 2 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (4 0 5 1 nil 0) (0 0 5 2 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "sequence" nil))) (om-make-point 821 687) nil (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "map to pitches"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 1000 642) (om-make-point 243 198) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 721 23) (om-make-point 516 352) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 82 198) (om-make-point 281 144) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400 9500) (3600 4700))) :lonset (quote (0 3036 4036)) :ldur (quote ((1000 1000) (1000 1000))) :lvel (quote ((100 100) (100 100))) :loffset (quote ((0 0) (0 0))) :lchan (quote ((1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 522 409) (om-make-point 760 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 432 642) (om-make-point 243 198) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 721 23) (om-make-point 516 352) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "map to pitches" (om-load-patch-abs1 "map to pitches" (quote ((let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 14 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 12 433) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 117 95) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 229 82) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 162 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 41 270) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sequence" 0 (om-make-point 5 45) "" "sequence" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (5 0 1 0 nil 0) (0 0 2 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (4 0 5 1 nil 0) (0 0 5 2 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "sequence" nil))) (om-make-point 253 688) nil (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9500)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "map to pitches"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 171 84) (quote "Pitch-bands$Pairs of dyads to outline the high and low pitch borders at each stage in the band.") "" (om-make-point 76 106) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 688 109) (quote "Given a list of pitches, re-registrate those pitches to fall within the bands specified by a bpf.  $$Use the chord-seq to specify pitch ranges in pairs of pitches (the dyads) for beginning and ending points of every stage in the pitch band.  $$The length of the lines between each stage in the pitch band determine its proportional length.") "" (om-make-point 273 30) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 206 38) (quote "P-BANDS-REGISTER") "" (om-make-point 273 6) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 194 38) (quote "pitch-sequence") "" (om-make-point 313 501) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 316 529) (om-make-point 249 30) (list 5900 6000 5900 6000 5900 6000 5900) "(5900 6000 5900 6000 5900 6000 5900)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 83 444) (om-make-point 195 134) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 3036.0)) (quote (8400.0 3600.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 3036.0)) (quote (9500.0 4700.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 799 487) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 1 0 0 nil 0) (7 0 0 1 nil 0) (19 1 1 0 nil 0) (18 0 1 1 nil 0) (5 0 2 0 nil 0) (11 0 3 0 nil 0) (2 0 6 0 nil 0) (0 0 9 0 nil 0) (9 0 10 0 nil 0) (13 0 12 0 nil 0) (1 0 13 0 nil 0) (3 0 19 0 nil 0))) 6.110001 nil "" (om-make-point 126 23) (om-make-point 1314 851)) (quote nil) (om-make-point 48 270) nil nil nil "p-bands-register"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 441 71) (quote "Registrates a pitch sequence within the registral bands determined by a bpf. Random pitch samples conform to a list of allowable pitchclasses and are determed following the contour of the bpf pitch bands provided.") "" (om-make-point 182 273) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "p-map2-ex 2" (om-load-patch-abs1 "p-map2-ex" (quote ((let ((box (om-load-boxcall (quote genfun) "P-MAP2" (quote cnmat:p-map2) (quote ((om-load-inputfun (quote input-funbox) "a list of rhythm lists (list of lists)" "DURATIONS-LIST" (list (list 3 4 5) (list 4 5 3) (list 5 3 4))) (om-load-inputfun (quote input-funbox) "a list (or list of lists) for pitch collections" "PITCH-COLLECTION" (list 7200 7300 7500 7700)) (om-load-inputfun (quote input-funbox) "mode: 0 = random choice from a pitch collection; 1 = random choice from a range of pitches" "MODE" 0))) (om-make-point 2550 323) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY" (quote cnmat:s-poly) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 2398 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAP2" (quote cnmat:p-map2) (quote ((om-load-inputfun (quote input-funbox) "a list of rhythm lists (list of lists)" "DURATIONS-LIST" (list (list 3 4 5) (list 4 5 3) (list 5 3 4))) (om-load-inputfun (quote input-funbox) "a list (or list of lists) for pitch collections" "PITCH-COLLECTION" (list 7200 7300 7500 7700)) (om-load-inputfun (quote input-funbox) "mode: 0 = random choice from a pitch collection; 1 = random choice from a range of pitches" "MODE" 0))) (om-make-point 1942 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY" (quote cnmat:s-poly) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 1876 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAP2" (quote cnmat:p-map2) (quote ((om-load-inputfun (quote input-funbox) "a list of rhythm lists (list of lists)" "DURATIONS-LIST" (list (list 3 4 5) (list 4 5 3) (list 5 3 4))) (om-load-inputfun (quote input-funbox) "a list (or list of lists) for pitch collections" "PITCH-COLLECTION" (list 7200 7300 7500 7700)) (om-load-inputfun (quote input-funbox) "mode: 0 = random choice from a pitch collection; 1 = random choice from a range of pitches" "MODE" 0))) (om-make-point 1393 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY" (quote cnmat:s-poly) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 1254 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY" (quote cnmat:s-poly) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 753 356) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAP2" (quote cnmat:p-map2) (quote ((om-load-inputfun (quote input-funbox) "a list of rhythm lists (list of lists)" "DURATIONS-LIST" (list (list 3 4 5) (list 4 5 3) (list 5 3 4))) (om-load-inputfun (quote input-funbox) "a list (or list of lists) for pitch collections" "PITCH-COLLECTION" (list 7200 7300 7500 7700)) (om-load-inputfun (quote input-funbox) "mode: 0 = random choice from a pitch collection; 1 = random choice from a range of pitches" "MODE" 0))) (om-make-point 892 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY" (quote cnmat:s-poly) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" 1/16) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 173 348) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAP2" (quote cnmat:p-map2) (quote ((om-load-inputfun (quote input-funbox) "a list of rhythm lists (list of lists)" "DURATIONS-LIST" (list (list 3 4 5) (list 4 5 3) (list 5 3 4))) (om-load-inputfun (quote input-funbox) "a list (or list of lists) for pitch collections" "PITCH-COLLECTION" (list 7200 7300 7500 7700)))) (om-make-point 313 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 789 50) (quote "*p-map2 accepts chords designated as an inner list, e.g. the collection of one chord as: ((8800 9000 9200)).$It can also accept chords with weighted probabilities, e.g. the collection of one weighted chord as: (((8800 9000 9200) 0.5)).") "" (om-make-point 527 49) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "mode=1") "" (om-make-point 1101 287) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "mode=1") "" (om-make-point 1677 295) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1058 292) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1649 300) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1187 224) (om-make-point 154 30) (list (list 3 4 5) (list 4 5 3) (list 5 3 4)) "((3 4 5) (4 5 3) (5 3 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1264 459) (om-make-point 274 177) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 3)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 3)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 485 394) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1441 223) (om-make-point 275 65) (load-buffer-textfile (quote ("((8100 0.5) 8200 8500 8700 ((8800 9200) 0.5))" "((7200 0.9) 7300 7500 7700) " "((5500 0.9) 5700 5800)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 268 26) (quote "pitch collections designated per voice") "" (om-make-point 1444 194) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 143 26) (quote "rhythmic proportions") "" (om-make-point 1187 194) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 256 78) (quote "Mode 1$Random pitch from pitch collections, this time using probability weights") "" (om-make-point 1187 113) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 93 31) (quote "mode = 2") "" (om-make-point 2692 304) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 2652 309) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 93 31) (quote "mode = 2") "" (om-make-point 2093 281) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 2060 282) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 2034 223) (om-make-point 90 30) (list 7200 7700) "(7200 7700)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 256 78) (quote "Mode 2$Random pitch from pitch range.$One shared pitch range for all voices.") "" (om-make-point 1784 112) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1784 223) (om-make-point 154 30) (list (list 3 4 5) (list 4 5 3) (list 5 3 4)) "((3 4 5) (4 5 3) (5 3 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 3" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1861 458) (om-make-point 274 177) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 3)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 3)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 268 26) (quote "one shared pitch range") "" (om-make-point 2029 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 143 26) (quote "rhythmic proportions") "" (om-make-point 1784 193) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 256 78) (quote "Mode 2$Random pitch from pitch ranges.$Pitch ranges specified for each voice.") "" (om-make-point 2331 111) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 2331 222) (om-make-point 154 30) (list (list 3 4 5) (list 4 5 3) (list 5 3 4)) "((3 4 5) (4 5 3) (5 3 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 2408 457) (om-make-point 274 177) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 3)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 3)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 200 42) (quote "P-MAP2$Random Pitch from Range") "" (om-make-point 1786 57) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2585 221) (om-make-point 182 71) (load-buffer-textfile (quote ("(8100  8700)" "(7200  7700) " "(5500  5800)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 268 26) (quote "pitch range designated per voice") "" (om-make-point 2583 192) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 143 26) (quote "rhythmic proportions") "" (om-make-point 2331 192) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 356 225) (om-make-point 185 30) (list (list 7200 0.9) 7300 7500 7700) "((7200 0.9) 7300 7500 7700)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 256 78) (quote "Mode 0 (default)$Random pitch from pitch collection.$One shared pitch collection for all voices.") "" (om-make-point 106 114) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 106 225) (om-make-point 154 30) (list (list 3 4 5) (list 4 5 3) (list 5 3 4)) "((3 4 5) (4 5 3) (5 3 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 183 460) (om-make-point 274 177) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 3)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 3)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 268 26) (quote "one shared pitch collection") "" (om-make-point 363 195) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 143 26) (quote "rhythmic proportions") "" (om-make-point 106 195) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 256 78) (quote "Mode 1 $Random pitch from pitch collections.$Pitch collections specified for each voice.") "" (om-make-point 653 113) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 143 26) (quote "rhythmic proportions") "" (om-make-point 653 194) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 268 26) (quote "pitch collections designated per voice") "" (om-make-point 882 195) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 879 224) (om-make-point 182 71) (load-buffer-textfile (quote ("(8200 8500 8700 (8800 9200))" "(7200 7300 7500 7700) " "(5500 5700 5800)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 255 44) (quote "P-MAP2$Random Pitch from Collection") "" (om-make-point 108 59) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 730 459) (om-make-point 274 177) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (3 1)) (1 (3.0 1)) 1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (409 409)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 9200)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 (1 (1.0 3)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 (1 (1.0 3)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 653 224) (om-make-point 154 30) (list (list 3 4 5) (list 4 5 3) (list 5 3 4)) "((3 4 5) (4 5 3) (5 3 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((32 0 0 0 nil 0) (35 1 0 1 nil 0) (22 0 0 2 nil 0) (32 0 1 0 nil 0) (0 0 1 3 nil 0) (27 0 2 0 nil 0) (25 0 2 1 nil 0) (24 0 2 2 nil 0) (27 0 3 0 nil 0) (2 0 3 3 nil 0) (15 0 4 0 nil 0) (17 1 4 1 nil 0) (14 0 4 2 nil 0) (15 0 5 0 nil 0) (4 0 5 3 nil 0) (50 0 6 0 nil 0) (7 0 6 3 nil 0) (50 0 7 0 nil 0) (47 1 7 1 nil 0) (13 0 7 2 nil 0) (40 0 8 0 nil 0) (9 0 8 3 nil 0) (40 0 9 0 nil 0) (38 0 9 1 nil 0) (5 0 16 1 nil 0) (3 0 28 1 nil 0) (1 0 33 1 nil 0) (8 0 41 1 nil 0) (6 0 49 1 nil 0))) 6.110001 nil "" (om-make-point 0 37) (om-make-point 1440 837)) (quote nil) (om-make-point 63 183) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 441 71) (quote "Similar to pmap1 but with different features and allowing for chords.") "" (om-make-point 182 197) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 112 32) (quote "PITCH") "" (om-make-point 56 62) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "p-map1-ex 2" (om-load-patch-abs1 "p-map1-ex" (quote ((let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 1785 595) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1556 464) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAP1" (quote cnmat:p-map1) (quote ((om-load-inputfun (quote input-funbox) "a list of rhythm lists" "DURATIONS-LIST" (list (list 3 4 5) (list 4 5 3) (list 5 3 4))) (om-load-inputfun (quote input-funbox) "a list of mappings in midics" "MAPPING-LIST" (list (list (list 3) (list 6000)) (list (list 4) (list 6100)) (list (list 5) (list 6200)))) (om-load-inputfun (quote input-funbox) "mode: 0 = 1-1 mapping; 1 = map to random choice from set; 2 = map to random choice in a range of choices. (Use two midic pitches to designate the bottom and top of range" "MODE" 0))) (om-make-point 1518 506) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 1208 592) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1282 468) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAP1" (quote cnmat:p-map1) (quote ((om-load-inputfun (quote input-funbox) "a list of rhythm lists" "DURATIONS-LIST" (list (list 3 4 5) (list 4 5 3) (list 5 3 4))) (om-load-inputfun (quote input-funbox) "a list of mappings in midics" "MAPPING-LIST" (list (list (list 3) (list 6000)) (list (list 4) (list 6100)) (list (list 5) (list 6200)))) (om-load-inputfun (quote input-funbox) "mode: 0 = 1-1 mapping; 1 = map to random choice from set; 2 = map to random choice in a range of choices. (Use two midic pitches to designate the bottom and top of range" "MODE" 0))) (om-make-point 1242 507) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 669 592) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 782 469) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAP1" (quote cnmat:p-map1) (quote ((om-load-inputfun (quote input-funbox) "a list of rhythm lists" "DURATIONS-LIST" (list (list 3 4 5) (list 4 5 3) (list 5 3 4))) (om-load-inputfun (quote input-funbox) "a list of mappings in midics" "MAPPING-LIST" (list (list (list 3) (list 6000)) (list (list 4) (list 6100)) (list (list 5) (list 6200)))) (om-load-inputfun (quote input-funbox) "mode: 0 = 1-1 mapping; 1 = map to random choice from set; 2 = map to random choice in a range of choices. (Use two midic pitches to designate the bottom and top of range" "MODE" 0))) (om-make-point 725 496) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110))) (om-make-point 365 586) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MAP1" (quote cnmat:p-map1) (quote ((om-load-inputfun (quote input-funbox) "a list of rhythm lists" "DURATIONS-LIST" (list (list 3 4 5) (list 4 5 3) (list 5 3 4))) (om-load-inputfun (quote input-funbox) "a list of mappings in midics" "MAPPING-LIST" (list (list (list 3) (list 6000)) (list (list 4) (list 6100)) (list (list 5) (list 6200)))))) (om-make-point 406 477) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 3 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 349 100) (quote "mapping with random choice from set elements$using weighted probabilities$Format= $((rhythm) ((pitch &optional probability) other pitches))$When no weights are specified, usese equal probability for each element.") "" (om-make-point 1176 106) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1182 217) (om-make-point 218 133) (load-buffer-textfile (quote ("((3) ((6000 0.99)  6100 6200 6300))" "((4) (7000 7100 7200 7400))" "((5) ((8500 0.75) 8600))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1140 680) (om-make-point 416 225) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 (1 (3 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) (1 1)) ((2 4) ((1 (1.0 3)) 1)) ((2 4) (1 (1 (1.0 3)))) ((2 4) (1 1)) ((2 4) ((1 (1.0 3)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) (1 (1 (1.0 3)))) ((2 4) (1 1)) ((2 4) ((1 (1.0 3)) 1)) ((2 4) (1 (1 (1.0 3)))) ((2 4) (1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 (1 (3 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1111 405) (om-make-point 601 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 210 84) (quote "mode 1 =$random choice from set of elements using$weighted probabilities") "" (om-make-point 1306 499) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 202 55) (quote "mapping with random choice from a range of elements (must be two midics)") "" (om-make-point 1583 131) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 149 87) (quote "mode 1 =$random choice from set of elements") "" (om-make-point 832 477) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 95 56) (quote "mode 0 =$1-1 mapping") "" (om-make-point 469 489) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1696 682) (om-make-point 410 222) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 (1 (3 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) (1 1)) ((2 4) ((1 (1.0 3)) 1)) ((2 4) (1 (1 (1.0 3)))) ((2 4) (1 1)) ((2 4) ((1 (1.0 3)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) (1 (1 (1.0 3)))) ((2 4) (1 1)) ((2 4) ((1 (1.0 3)) 1)) ((2 4) (1 (1 (1.0 3)))) ((2 4) (1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 (1 (3 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 589 461) (om-make-point 133 616) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 88 26) (quote "Rhythm set") "" (om-make-point 20 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1581 198) (om-make-point 188 134) (load-buffer-textfile (quote ("((3) (6000 6900))" "((4) (7000 7800))" "((5) (8000 8800))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 174 63) (quote "mode 3 = mapping with random choice from a range of elements") "" (om-make-point 1579 509) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 675 681) (om-make-point 401 195) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 (1 (3 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) (1 1)) ((2 4) ((1 (1.0 3)) 1)) ((2 4) (1 (1 (1.0 3)))) ((2 4) (1 1)) ((2 4) ((1 (1.0 3)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) (1 (1 (1.0 3)))) ((2 4) (1 1)) ((2 4) ((1 (1.0 3)) 1)) ((2 4) (1 (1 (1.0 3)))) ((2 4) (1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 (1 (3 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1111 405) (om-make-point 601 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 707 203) (om-make-point 188 134) (load-buffer-textfile (quote ("((3) (6100 6200 6300))" "((4) (7000 7100 7200 7400))" "((5) (8500 8600))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 191 78) (quote "mapping with random choice from set elements using equal probabilities for each element") "" (om-make-point 705 121) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 396 200) (om-make-point 156 137) (load-buffer-textfile (quote ("((3) (6100 6200 6300))" "((4) (6400))" "((5) (6700))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 201 679) (om-make-point 401 195) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 (1 (3 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) (1 1)) ((2 4) ((1 (1.0 3)) 1)) ((2 4) (1 (1 (1.0 3)))) ((2 4) (1 1)) ((2 4) ((1 (1.0 3)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) (1 (1 (1.0 3)))) ((2 4) (1 1)) ((2 4) ((1 (1.0 3)) 1)) ((2 4) (1 (1 (1.0 3)))) ((2 4) (1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 (1 (3 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (3 1)) (1 (3.0 1)))) ((2 4) (1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 589 461) (om-make-point 403 373) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 157 210) (om-make-point 48 30) (list 2 4) "(2 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 311 57) (quote "EXAMPLE PATCH mapping pitches to rhythm in various ways using rotations") "" (om-make-point 22 103) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 181 76) (quote "1-1 mapping$More than one pitch is interpreted as a repeating pitch sequence") "" (om-make-point 388 124) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 222 205) (om-make-point 109 77) (load-buffer-textfile (quote ("((1(16)) )" "((1(16)) )" "((1(16)) )" "((1(16)) )" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 115 28) (quote "tatums") "" (om-make-point 223 178) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 67 28) (quote "meter") "" (om-make-point 148 176) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 22 205) (om-make-point 124 30) (list 3 4 5 3 4 5 3 4 5) "(3 4 5 3 4 5 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 ((om-make-point 35 324) (om-make-point 35 458) (om-make-point 1787 459) (om-make-point 1793 595)) 0) (28 0 0 1 ((om-make-point 179 238) (om-make-point 179 414) (om-make-point 1794 416) (om-make-point 1801 595)) 0) (31 1 0 2 ((om-make-point 264 280) (om-make-point 264 436) (om-make-point 1811 436) (om-make-point 1809 595)) 0) (2 0 0 3 ((om-make-point 1542 579) (om-make-point 1544 589) (om-make-point 1815 575) (om-make-point 1817 595)) 0) (11 0 2 0 nil 0) (21 1 2 1 nil 0) (1 0 2 2 nil 0) (11 0 3 0 nil 0) (28 0 3 1 nil 0) (31 1 3 2 nil 0) (5 0 3 3 nil 0) (11 0 5 0 nil 0) (13 1 5 1 nil 0) (4 0 5 2 nil 0) (11 0 6 0 nil 0) (28 0 6 1 nil 0) (31 1 6 2 nil 0) (8 0 6 3 nil 0) (11 0 8 0 nil 0) (24 1 8 1 nil 0) (7 0 8 2 nil 0) (11 0 9 0 nil 0) (28 0 9 1 ((om-make-point 179 238) (om-make-point 177 509) (om-make-point 382 511) (om-make-point 381 586)) 0) (31 1 9 2 nil 0) (10 0 9 3 nil 0) (11 0 10 0 nil 0) (26 1 10 1 nil 0) (34 0 11 0 nil 0) (3 0 14 1 nil 0) (0 0 19 1 nil 0) (6 0 23 1 nil 0) (9 0 27 1 nil 0))) 6.110001 nil "" (om-make-point 52 23) (om-make-point 1388 851)) (quote nil) (om-make-point 61 98) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 441 71) (quote "Ways to map pitches to rhythmic sequences when generating scores, including: 1-1 mapping, random mapping from collections, and random mapping from ranges. Includes probabilistic weighted-choice.") "" (om-make-point 185 101) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.110001 nil "" (om-make-point 741 23) (om-make-point 775 778)) (quote nil) (om-make-point 91 255) nil nil nil "PITCH"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "OPERATIONS" (om-load-patch-abs1 "OPERATIONS" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 340 63) (quote "$Takes an integer as input and returns a list of integer divisors with along with the sum of these divisors.") "" (om-make-point 632 781) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "u-divisors" (om-load-patch-abs1 "u-divisors" (quote ((let ((box (om-load-boxcall (quote genfun) "U-DIVISORS" (quote cnmat::u-divisors) (quote ((om-load-inputfun (quote input-funbox) "list of lists to be tallied" "INPUT" 20))) (om-make-point 148 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "U-divisors") "" (om-make-point 90 31) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 201 98) (quote "$Takes an integer as input and returns a list of integer divisors with along with the sum of these divisors.") "" (om-make-point 88 64) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 127 336) (om-make-point 123 69) (load-buffer-textfile (quote ("(1 2 4 5 10 20)" "(42)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 40 28) (quote "input") "" (om-make-point 159 159) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 164 195) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (0 0 3 1 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 537 504)) (quote nil) (om-make-point 550 773) nil nil nil "u-divisors"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "u-flat-by-voice" (om-load-patch-abs1 "u-flat-by-voice" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 82) (quote "<--optional argument to set nth flat level.") "" (om-make-point 565 349) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 465 84) (quote "Takes a list of lists and flats the contents by voice. Optional  argument flats each voice by nth level only, which can be used to preserve sublists within a voice for items like chords, etc...") "" (om-make-point 79 69) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 157 23) (quote "u-flat-by-voice") "" (om-make-point 77 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 520 354) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 16" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 82 168) (om-make-point 503 86) (load-buffer-textfile (quote ("((6000 6200 6300 6400) (6400 6700))" "((6000 (5200 6100)) (6000 6000 (6200 6500)))" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 15" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 396 466) (om-make-point 275 106) (load-buffer-textfile (quote ("(6000 6200 6300 6400 6400 6700)" "(6000 (5200 6100) 6000 6000 (6200 6500))" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-FLAT-BY-VOICE 2" (quote cnmat::u-flat-by-voice) (quote ((om-load-inputfun (quote input-funbox) "a list" "MYLIST" (list nil)) (om-load-inputfun (quote input-funbox) "a list" "FLAT-LEVEL" (list nil)))) (om-make-point 464 384) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-FLAT-BY-VOICE" (quote cnmat::u-flat-by-voice) (quote ((om-load-inputfun (quote input-funbox) "a list" "MYLIST" (list nil)))) (om-make-point 92 386) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 14" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 24 466) (om-make-point 275 106) (load-buffer-textfile (quote ("(6000 6200 6300 6400 6400 6700)" "(6000 5200 6100 6000 6000 6200 6500)" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 5 1 nil 0) (4 1 6 0 nil 0) (3 0 6 1 nil 0) (4 1 7 0 nil 0) (7 0 8 1 nil 0))) 6.110001 nil "" (om-make-point 200 172) (om-make-point 791 702)) (quote nil) (om-make-point 538 708) nil nil nil "u-flat-by-voice"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "Takes a list of lists and flats the contents by voice.") "" (om-make-point 633 719) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "Applies a transfer list of pitchclasses to a list of lists of midics or of pitchclasses.") "" (om-make-point 628 637) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "u-pc-remap" (om-load-patch-abs1 "u-pc-remap" (quote ((let ((box (om-load-boxcall (quote genfun) "U-PC-REMAP" (quote cnmat::u-pc-remap) (quote ((om-load-inputfun (quote input-funbox) "a list of list of midics" "MYLIST" (list nil)) (om-load-inputfun (quote input-funbox) "a list of of transfers in pcs" "TRANSFER-LIST" (list nil)))) (om-make-point 534 389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-PC-REMAP" (quote cnmat::u-pc-remap) (quote ((om-load-inputfun (quote input-funbox) "a list of list of midics" "MYLIST" (list nil)) (om-load-inputfun (quote input-funbox) "a list of of transfers in pcs" "TRANSFER-LIST" (list nil)))) (om-make-point 101 394) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 22" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 461 505) (om-make-point 193 103) (load-buffer-textfile (quote ("(0 11 0 2 8 9)" "(6 4 6 6 10 10)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 11" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 452 239) (om-make-point 200 76) (load-buffer-textfile (quote ("(11 0 11 9 3 2)" "(6 7 6 5 1 1)" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 12" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 667 240) (om-make-point 75 166) (load-buffer-textfile (quote ("(0 11)" "(1 10)" "(2 9)" "(3 8)" "(4 7)" "(5 6)" "(7 4)" "(8 3)" "(9 2)" "(10 1)" "(11 0)" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 90 34) (quote "midic lists") "" (om-make-point 476 197) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 90 34) (quote "transfer") "" (om-make-point 667 192) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 270 42) (quote "It will also work if you supply a list of pcs as the midic lists.") "" (om-make-point 444 102) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 22" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 57 516) (om-make-point 193 103) (load-buffer-textfile (quote ("(7100 7200 7100 7200 7100 7100)" "(5900 6000 5900 6000 5900 6000)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 271 81) (quote "Applies a transfer list of pitchclasses to a list of lists of midics or of pitchclasses.") "" (om-make-point 39 106) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 157 23) (quote "u-pc-remap") "" (om-make-point 40 80) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 90 34) (quote "transfer") "" (om-make-point 263 203) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 90 34) (quote "midic lists") "" (om-make-point 72 208) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 12" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 263 251) (om-make-point 75 166) (load-buffer-textfile (quote ("(0 11)" "(1 10)" "(2 9)" "(3 8)" "(4 7)" "(5 6)" "(7 4)" "(8 3)" "(9 2)" "(10 1)" "(11 0)" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 11" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 48 250) (om-make-point 200 76) (load-buffer-textfile (quote ("(7200 7100 7200 7000 7200 6900)" "(6000 5900 6000 5800 6000 5700)" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 1 0 0 nil 0) (4 1 0 1 nil 0) (14 1 1 0 nil 0) (13 1 1 1 nil 0) (0 0 2 1 nil 0) (1 0 8 1 nil 0))) 6.110001 nil "" (om-make-point 0 23) (om-make-point 843 759)) (quote nil) (om-make-point 539 629) nil nil nil "u-pc-remap"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "Takes in a list of list of pcs and converts them to lists of list of midics.") "" (om-make-point 632 571) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "u-pc->midic" (om-load-patch-abs1 "u-pc->midic" (quote ((let ((box (om-load-boxcomment "comment 13" (om-make-point 157 23) (quote "u-pc->midic") "" (om-make-point 222 22) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 442 89) (quote "Takes in a list of list of pcs and converts them to lists of list of midics.") "" (om-make-point 220 54) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 10" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 273 487) (om-make-point 226 79) (load-buffer-textfile (quote ("(7300 (7400 7700) 7200 8100 8200)" "(7400 7600 7800 7900)" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-PC->MIDIC" (quote cnmat::u-pc->midic) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list nil)) (om-load-inputfun (quote input-funbox) "a reference pitch" "REFERENCE-PITCH" (list nil)))) (om-make-point 265 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "list of lists of midics") "" (om-make-point 230 146) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 103 44) (quote "reference pitch (reference C)") "" (om-make-point 474 143) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 13" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 234 214) (om-make-point 147 50) (load-buffer-textfile (quote ("(1 (2 5) 0 9 10)" "(2 4 6 7)" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 492 212) (om-make-point 48 30) 7000 "7000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 1 nil 0) (6 1 3 0 nil 0) (7 0 3 1 nil 0))) 6.110001 nil "" (om-make-point -12 27) (om-make-point 800 674)) (quote nil) (om-make-point 538 561) nil nil nil "u-pc->midic"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "Takes in a list of list of midics and converts them to lists of pitch class sets.") "" (om-make-point 629 496) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "u-midic->pc" (om-load-patch-abs1 "u-midic->pc" (quote ((let ((box (om-load-editor-box1 "TEXTFILE 8" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 69 548) (om-make-point 138 65) (load-buffer-textfile (quote ("(0 11 0)" "(0 1 0)" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 8" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 73 243) (om-make-point 138 65) (load-buffer-textfile (quote ("" "(7200 7100 7200)" "(6000 6100 6000)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 157 23) (quote "u-midic->pc") "" (om-make-point 67 82) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 442 89) (quote "Takes in a list of list of midics and converts them to lists of pitch class sets.") "" (om-make-point 65 114) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-MIDIC->PC" (quote cnmat::u-midic->pc) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list nil)))) (om-make-point 89 397) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 1 nil 0) (1 1 4 0 nil 0))) 6.110001 nil "" (om-make-point 175 23) (om-make-point 593 779)) (quote nil) (om-make-point 535 486) nil nil nil "u-midic->pc"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "Invert a list of pitches around a provided  pitch.$") "" (om-make-point 629 442) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "u-inversion" (om-load-patch-abs1 "u-inversion" (quote ((let ((box (om-load-boxcomment "comment 12" (om-make-point 442 89) (quote "Also work for pc-sets.") "" (om-make-point 537 97) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 7" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 558 536) (om-make-point 241 63) (load-buffer-textfile (quote ("(1 0 11)" "(10 9 8)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 707 263) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 15" (om-make-point 94 54) (quote "inversion element$(text box)") "" (om-make-point 704 199) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 8" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 540 230) (om-make-point 138 65) (load-buffer-textfile (quote ("" "(1 2 3)" "(4 5 6)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-INVERSION" (quote cnmat::u-inversion) (quote ((om-load-inputfun (quote input-funbox) "a list of pitch lists" "PITCHLIST" (list (list 7000 7100 8000) (list 6000 6800 7000))) (om-load-inputfun (quote input-funbox) "a pitch to invert around" "INVERSION-ELEMENT" 7100) (om-load-inputfun (quote input-funbox) "a pitch to invert around" "MODE" 7100))) (om-make-point 576 402) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 810 262) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 103 30) (quote "numbers") "" (om-make-point 540 200) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "mode=1 for mod12 output") "" (om-make-point 805 197) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "mode=1 for mod12 output") "" (om-make-point 306 205) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 103 30) (quote "numbers") "" (om-make-point 41 208) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 311 270) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-INVERSION" (quote cnmat::u-inversion) (quote ((om-load-inputfun (quote input-funbox) "a list of pitch lists" "PITCHLIST" (list (list 7000 7100 8000) (list 6000 6800 7000))) (om-load-inputfun (quote input-funbox) "a pitch to invert around" "INVERSION-ELEMENT" 7100) (om-load-inputfun (quote input-funbox) "a pitch to invert around" "MODE" 7100))) (om-make-point 77 410) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 8" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 41 238) (om-make-point 138 65) (load-buffer-textfile (quote ("" "(7200 7100 7200)" "(6000 6100 6000)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 15" (om-make-point 94 54) (quote "inversion element$(text box)") "" (om-make-point 205 207) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 208 271) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 7" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 59 544) (om-make-point 241 63) (load-buffer-textfile (quote ("(0 1 0)" "(0 11 0)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 442 89) (quote "Invert a list of pitches around a provided  pitch.$Mode=1 allows for mod12 and assumes input to be midics for pitch.$Optional mod input allows for different mod values.") "" (om-make-point 38 105) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 157 23) (quote "u-inversion") "" (om-make-point 38 76) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 1 nil 0) (4 1 5 0 nil 0) (2 0 5 1 nil 0) (6 0 5 2 nil 0) (13 1 12 0 nil 0) (15 0 12 1 nil 0) (11 0 12 2 nil 0) (12 0 16 1 nil 0))) 6.110001 nil "" (om-make-point 0 23) (om-make-point 1440 851)) (quote nil) (om-make-point 539 420) nil nil nil "u-inversion"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "A utility for quick multiplication of a number with a lists of numbers.") "" (om-make-point 624 367) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "u-*" (om-load-patch-abs1 "u-*" (quote ((let ((box (om-load-boxcall (quote genfun) "U-*" (quote cnmat::u-*) (quote ((om-load-inputfun (quote input-funbox) "a list" "MYLIST" (list nil)) (om-load-inputfun (quote input-funbox) "a number" "MYNUMBER" (list nil)) (om-load-inputfun (quote input-funbox) "Optional mode argument" "MODE" (list nil)))) (om-make-point 113 462) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 45 24) (quote "u-*") "" (om-make-point 50 88) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 451 110) (quote "U-- is a utility for quick multiplication of a number with a lists of numbers.  Default mode is normal multiplication. Optional Mode=1 is mod12-based multiplication.  Optional mod=12 to change mod number.$$*all options from u-+ also apply to u-*") "" (om-make-point 53 116) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 11" (om-make-point 171 81) (quote "mode=1$for mod12 multiplication") "" (om-make-point 387 234) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 245 353) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 53 26) (quote "mode") "" (om-make-point 392 316) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 140 51) (quote "number to multiply  all elements by") "" (om-make-point 238 301) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 35 25) (quote "list") "" (om-make-point 56 308) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 6" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 63 547) (om-make-point 171 75) (load-buffer-textfile (quote ("(4 8 0 4)" "(4 8 0 4)" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 396 353) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 59 342) (om-make-point 159 73) (load-buffer-textfile (quote ("" "(4 5 6 7)" "(1 2 3 4)" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 1 0 0 nil 0) (4 0 0 1 nil 0) (9 0 0 2 nil 0) (0 0 8 1 nil 0))) 6.110001 nil "" (om-make-point 253 23) (om-make-point 608 728)) (quote nil) (om-make-point 556 356) nil nil nil "u-*"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "u--" (om-load-patch-abs1 "u--" (quote ((let ((box (om-load-boxcomment "comment 4" (om-make-point 45 24) (quote "u--") "" (om-make-point 61 82) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 471 112) (quote "U-- is a utility for quick subtraction of a number from a lists of numbers.  Default mode is normal subtraction. Optional Mode=1 is mod12-based subtraction.  Optional mod=12 to change mod number.$$*all options from u-+ also apply to u--") "" (om-make-point 58 105) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 198 62) (quote "mode=1$for mod12 subtraction") "" (om-make-point 393 245) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U--" (quote cnmat::u--) (quote ((om-load-inputfun (quote input-funbox) "a list" "MYLIST" (list nil)) (om-load-inputfun (quote input-funbox) "a number" "MYNUMBER" (list nil)) (om-load-inputfun (quote input-funbox) "Optional mode argument" "MODE" (list nil)))) (om-make-point 143 450) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 70 329) (om-make-point 159 73) (load-buffer-textfile (quote ("" "(1 2 3 4 5)" "(6 7 8 9 10)" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 256 340) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 407 340) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 93 539) (om-make-point 171 75) (load-buffer-textfile (quote ("(0 1 2 3 4)" "(5 6 7 8 9)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 35 25) (quote "list") "" (om-make-point 67 295) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 140 51) (quote "number to subtract  from all elements") "" (om-make-point 249 288) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 53 26) (quote "mode") "" (om-make-point 403 303) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 1 3 0 nil 0) (5 0 3 1 nil 0) (6 0 3 2 nil 0) (3 0 7 1 nil 0))) 6.110001 nil "" (om-make-point 0 23) (om-make-point 1440 851)) (quote nil) (om-make-point 555 288) nil nil nil "u--"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote " A utility for quick subtraction of a number from a lists of numbers.") "" (om-make-point 621 298) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "A utility for quick addition of a number to a lists of numbers. ") "" (om-make-point 617 225) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "u-+" (om-load-patch-abs1 "u-+" (quote ((let ((box (om-load-boxcall (quote genfun) "U-+ 4" (quote cnmat::u-+) (quote ((om-load-inputfun (quote input-funbox) "a list" "MYLIST" (list nil)) (om-load-inputfun (quote input-funbox) "a number" "MYNUMBER" (list nil)))) (om-make-point 119 450) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-+ 3" (quote cnmat::u-+) (quote ((om-load-inputfun (quote input-funbox) "a list" "MYLIST" (list nil)) (om-load-inputfun (quote input-funbox) "a number" "MYNUMBER" (list nil)) (om-load-inputfun (quote input-funbox) "Optional mode argument" "MODE" (list nil)) (om-load-inputfun (quote input-funbox) "Optional mod argument" "MOD" (list nil)))) (om-make-point 975 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 352 44) (quote "optional mod argument to change mod number") "" (om-make-point 928 259) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-+" (quote cnmat::u-+) (quote ((om-load-inputfun (quote input-funbox) "a list" "MYLIST" (list nil)) (om-load-inputfun (quote input-funbox) "a number" "MYNUMBER" (list nil)) (om-load-inputfun (quote input-funbox) "Optional mode argument" "MODE" (list nil)))) (om-make-point 450 485) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 155 48) (quote "mode=1$for mod12 addition") "" (om-make-point 402 249) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 57 30) (quote "default") "" (om-make-point 49 254) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 128 65) (quote "optional mod argument to set mod argument") "" (om-make-point 1344 259) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 103 41) (quote "optional mod$argument") "" (om-make-point 1345 324) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 53 26) (quote "mode") "" (om-make-point 1235 335) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 140 51) (quote "number to add  to all elements") "" (om-make-point 1075 323) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 35 25) (quote "list") "" (om-make-point 930 338) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1349 370) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 953 566) (om-make-point 101 61) (load-buffer-textfile (quote ("(0 2 0 1)" "(2 0 1 2)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1239 372) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1088 372) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 931 363) (om-make-point 137 75) (load-buffer-textfile (quote ("(7200 7100 7200 7300)" "(8900 9000 9100 9200)" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 128 65) (quote "optional mode 1 for mod addition (default=mod12)") "" (om-make-point 698 251) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 53 26) (quote "mode") "" (om-make-point 697 328) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 140 51) (quote "number to add  to all elements") "" (om-make-point 552 319) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 35 25) (quote "list") "" (om-make-point 405 334) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 428 573) (om-make-point 101 61) (load-buffer-textfile (quote ("(1 0 1 2)" "(6 7 8 9)" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 701 365) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 565 368) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 408 359) (om-make-point 137 75) (load-buffer-textfile (quote ("(1 2 3 4)" "(5 6 7 8)" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 140 51) (quote "number to add  to all elements") "" (om-make-point 195 284) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 35 25) (quote "list") "" (om-make-point 49 299) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 75 565) (om-make-point 153 60) (load-buffer-textfile (quote ("(7300 7200 7300 7400)" "(9000 9100 9200 9300)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 354 116) (quote "U-+ is a utility for quick addition of a number to a lists of numbers.  Default mode is normal addition. Mode=1 is mod12 addition.  Optional mod=12 to change mod number.") "" (om-make-point 48 120) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 45 24) (quote "u-+") "" (om-make-point 47 95) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 51 324) (om-make-point 137 75) (load-buffer-textfile (quote ("(7200 7100 7200 7300)" "(8900 9000 9100 9200)" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 208 333) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((29 1 0 0 nil 0) (30 0 0 1 nil 0) (15 1 1 0 nil 0) (14 0 1 1 nil 0) (13 0 1 2 nil 0) (11 0 1 3 nil 0) (23 1 3 0 nil 0) (22 0 3 1 nil 0) (21 0 3 2 nil 0) (1 0 12 1 nil 0) (3 0 20 1 nil 0) (0 0 26 1 nil 0))) 6.110001 nil "" (om-make-point 0 23) (om-make-point 1440 851)) (quote nil) (om-make-point 556 217) nil nil nil "u-+"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "Returns a list of lists containing meter list, pitches, rhythms, tatum lists, and no. of elements.") "" (om-make-point 171 782) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "u-score-lists 2" (om-load-patch-abs1 "u-score-lists" (quote nil) (quote nil) 6.110001 nil "" (om-make-point 0 23) (om-make-point 1440 851)) (quote nil) (om-make-point 64 774) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "Returns the retrograde of every list within a list of lists.") "" (om-make-point 170 714) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "u-retro 2" (om-load-patch-abs1 "u-retro" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 196 63) (quote "Mode=1 returns the retrograde of each sublist with in the lists of lists.") "" (om-make-point 384 313) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 263 406) (om-make-point 145 78) (load-buffer-textfile (quote ("((3 2 1) (6 5 4))" "((5 4 3) (8 7 6))" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "old" (om-load-patch-abs1 "old" (quote ((let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 15 65) (om-make-point 132 60) (load-buffer-textfile (quote ("((1 2 3) (4 5 6))" "((3 4 5) (6 7 8))" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction 2" (om-load-lisp-abspatch "lispfunction" 6.110001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (mylist) $$(let ((outputlist '())$      (pre-outputlist '()))$$(loop for elem in mylist do$      (loop for sublist in elem do$            (push (reverse sublist) pre-outputlist))$      (push pre-outputlist outputlist)$      (setf pre-outputlist '()))$$$(reverse outputlist)$$$)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "MYLIST" nil))) (om-make-point 171 192) nil (list (list (list (list 6 5 4) (list 3 2 1)) (list (list 8 7 6) (list 5 4 3)))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.110001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (mylist) $$(let ((outputlist '()))$$(loop for elem in mylist do$      (push (reverse elem) outputlist)$)$$(reverse outputlist)$$$)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "MYLIST" nil))) (om-make-point 29 186) nil (list (list (list (list 4 5 6) (list 1 2 3)) (list (list 6 7 8) (list 3 4 5)))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 17 277) (om-make-point 113 97) (load-buffer-textfile (quote ("((4 5 6) (1 2 3))" "((6 7 8) (3 4 5))" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 151 274) (om-make-point 136 93) (load-buffer-textfile (quote ("((6 5 4) (3 2 1))" "((8 7 6) (5 4 3))" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 1 1 0 nil 0) (0 1 2 0 nil 0) (2 0 3 1 nil 0) (1 0 4 1 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 438 410) nil nil nil "old"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 327 293) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-RETRO 2" (quote cnmat::u-retro) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" nil) (om-load-inputfun (quote input-funbox) "a list of lists" "MODE" nil))) (om-make-point 299 323) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 149 26) (quote "input list of lists") "" (om-make-point 103 130) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 274 86) (quote "U-retro returns the retrograde of each list in a list of lists (default).  Optional mode=1 returns the retrograde of each sublist with in the lists of lists") "" (om-make-point 99 38) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 106 26) (quote "U-retro ") "" (om-make-point 100 17) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 93 408) (om-make-point 145 78) (load-buffer-textfile (quote ("((4 5 6) (1 2 3))" "((6 7 8) (3 4 5))" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "U-RETRO" (quote cnmat::u-retro) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" nil))) (om-make-point 129 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 103 162) (om-make-point 132 60) (load-buffer-textfile (quote ("((1 2 3) (4 5 6))" "((3 4 5) (6 7 8))" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 1 nil 0) (10 1 4 0 nil 0) (3 0 4 1 nil 0) (9 0 8 1 nil 0) (10 1 9 0 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 579 520)) (quote nil) (om-make-point 77 700) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 124 26) (quote "OPERATIONS") "" (om-make-point 79 32) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "o-tatum-format 2" (om-load-patch-abs1 "o-tatum-format" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 105 41) (quote "no. of tatum elements") "" (om-make-point 489 218) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 401 214) (om-make-point 75 74) (load-buffer-textfile (quote ("11" "11" "11" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-TATUM-FORMAT 2" (quote cnmat::o-tatum-format) (quote ((om-load-inputfun (quote input-funbox) "a list of lists or more lists of lists" "MYLIST" nil))) (om-make-point 316 141) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 317 218) (quote "Tatum Format Key:$1 = 1 beat of a quarter note (1 (4))$2 = 1 beat of eighth notes (1 (8))$3 = 1 beat of triplets (1 (12))$4 = 1 beat of sixteenths (1 (16))$5 = 1 beat of quintuplets (1 (20))$6 = 1 beat of setuplets (1 (24))$8 = 1 beat of thirty-seconds (1 (32))$10 = 1 beat of quintuplet thirty-seconds (1 (40))$$$") "" (om-make-point 644 3) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "old" (om-load-patch-abs1 "old" (quote ((let ((box (om-load-boxcall (quote genfun) "O-TATUM-MAKER" (quote cnmat:o-tatum-maker) (quote ((om-load-inputfun (quote input-funbox) "a list of lists or more lists of lists" "MYLIST" nil))) (om-make-point 337 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-CUTS2" (quote cnmat:s-cuts2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "list of lists of tatums for each voice" "TATUM" (list (list (list 1 (list 16))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 265 375) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 57 26) (quote "mode") "" (om-make-point 664 240) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 670 280) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 132 466) (om-make-point 298 213) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (182 182)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (109 109)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (109 109)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (182 182)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (109 109)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 -1)) (1 (-3 1)) -1 (1 (-1 1 -2)))) ((4 4) (-1 (1 (-3 1)) -2)) ((4 4) ((1 (1 -2)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (182 182)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 -2)) (1 (-2 1 -1)) -1 (1 (1 -3)))) ((4 4) (-1 (1 (-2 1 -1)) -1 (1 (-3 1)))) ((4 4) (-2 (1 (-4 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 -2)) -1 (1 (1 -4)) -1)) ((4 4) ((1 (1 -2)) -1 (1 (-3 1 -1)) -1)) ((4 4) (-1 (1 (-3 1)) (1 (1 -4)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (109)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 23) (om-make-point 1440 675) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 264 277) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 595 280) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 333 268) (om-make-point 121 70) (load-buffer-textfile (quote ("((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "((1 (12)) (1 (16)) (1 (20)) (1 (16)))" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 128 268) (om-make-point 132 63) (load-buffer-textfile (quote ("(1 5 7 9 10 12)" "(5 7 9 10 12 1)" "(7 9 10 12 1 5)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 474 272) (om-make-point 115 66) (load-buffer-textfile (quote ("(6100 (6200 6500) 6400)" "(5100 5200 5400)" "(4100 4200 4500)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 68 25) (quote "rhythms") "" (om-make-point 129 239) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 68 25) (quote "meter") "" (om-make-point 263 237) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 97 24) (quote "tatum lists") "" (om-make-point 347 236) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 97 24) (quote "pitches lists") "" (om-make-point 474 240) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 97 24) (quote "tempo") "" (om-make-point 593 240) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 337 62) (om-make-point 121 70) (load-buffer-textfile (quote ("((1 12) (1 16) (1 20) (1 16))" "((1 12) (1 16) (1 20) (1 16))" "((1 12) (1 16) (1 20) (1 16))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 222 70) (quote "<-- o-tatum-maker ") "" (om-make-point 429 162) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 177 26) (quote "O-Tatum-Maker") "" (om-make-point 96 60) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 222 70) (quote "o-tatum-maker converts a tatum shorthand into a notation suitable for use with tessellate score objects") "" (om-make-point 95 90) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 1 0 0 nil 0) (8 1 1 0 nil 0) (5 0 1 1 nil 0) (7 1 1 2 nil 0) (9 1 1 3 nil 0) (6 0 1 4 nil 0) (3 0 1 5 nil 0) (1 0 4 1 nil 0) (0 0 7 1 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 913 283) nil nil nil "old"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 223 93) (quote "O-tatum-format converts a tatum shorthand into a notation suitable for use with tessellate score objects.  Second output provides sum of total elements.") "" (om-make-point 59 63) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 177 26) (quote "O-Tatum-format") "" (om-make-point 60 30) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 222 70) (quote "<-- o-tatum-format") "" (om-make-point 409 142) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 317 42) (om-make-point 121 70) (load-buffer-textfile (quote ("(1 2 3 4 )" "(1 2 3 4 )" "(1 2 3 4 )" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 97 24) (quote "tempo") "" (om-make-point 557 321) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 97 24) (quote "pitches lists") "" (om-make-point 438 321) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 97 24) (quote "tatum lists") "" (om-make-point 294 317) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 68 25) (quote "meter") "" (om-make-point 227 318) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 68 25) (quote "rhythms") "" (om-make-point 93 320) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 438 353) (om-make-point 115 66) (load-buffer-textfile (quote ("(6100 (6200 6500) 6400)" "(5100 5200 5400)" "(4100 4200 4500)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 92 349) (om-make-point 132 63) (load-buffer-textfile (quote ("(1 5 7 9 10 12)" "(5 7 9 10 12 1)" "(7 9 10 12 1 5)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 297 349) (om-make-point 121 70) (load-buffer-textfile (quote ("((1 (4)) (1 (8)) (1 (12)) (1 (16)))" "((1 (4)) (1 (8)) (1 (12)) (1 (16)))" "((1 (4)) (1 (8)) (1 (12)) (1 (16)))" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 559 361) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 228 358) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 96 547) (om-make-point 796 213) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (273 273)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (182 182)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (545 545)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (182 182)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (273 273)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (182 182)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (273 273)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) (1 (1 (1 -1)) -1 (1 (1 -3)))) ((4 4) (-2 (1 (1 -2)) -1)) ((4 4) (-1 (1 (-1 1)) -2)) ((4 4) (-1 (1 (-1 1)) -2)) ((4 4) (-2 (1 (-1 -2)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (273 273)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (182 182)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6500)) :ldur (quote (273 273)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) (1 -1 (1 (-2 1)) -1)) ((4 4) (-1 (1 (-1 1)) -2)) ((4 4) (-1 (1 (1 -1)) -2)) ((4 4) (-1 (1 (1 -1)) -2)) ((4 4) (-2 (1 (1 -2)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) (1 -2 (1 (-1 1 -2)))) ((4 4) (-3 (1 (1 -3)))) ((4 4) (-3 (1 (1 -3)))) ((4 4) (-3 (1 (-2 1 1)))) ((4 4) (-2 (1 (-1 -2)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 23) (om-make-point 1440 675) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 634 361) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 57 26) (quote "mode") "" (om-make-point 628 321) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-CUTS2" (quote cnmat:s-cuts2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "list of lists of tatums for each voice" "TATUM" (list (list (list 1 (list 16))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 229 456) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 1 1 1 nil 0) (8 1 2 0 nil 0) (2 0 16 1 nil 0) (22 0 19 1 nil 0) (15 1 22 0 nil 0) (18 0 22 1 nil 0) (16 1 22 2 nil 0) (14 1 22 3 nil 0) (17 0 22 4 nil 0) (20 0 22 5 nil 0))) 6.110001 nil "" (om-make-point 200 80) (om-make-point 1012 794)) (quote nil) (om-make-point 51 628) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "Converts a tatum shorthand into a notation suitable for use with Tessellate.") "" (om-make-point 171 640) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "Returns a list of sums of list arguments.") "" (om-make-point 170 570) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "o-list-info 2" (om-load-patch-abs1 "o-list-info" (quote ((let ((box (om-load-boxcomment "comment 5" (om-make-point 117 35) (quote "O-LIST-INFO") "" (om-make-point 54 40) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 694 89) (quote "Returns the length and sum of all sublists separately and returns the result retaining the original list structure. The output takes the form:((no. of elements, sum) (no. of elements, sum) ...etc)) for each list of lists provided. The last element of each sublist is the total sum of the sublist elements.$Default (\"rhythm-lists\" takes a nested list of lists. Mode 1 (\"pitches\") mode takes in a simple lists of lists. Mode 2 (\"tatums\") mode takes in a list of tatum lists.") "" (om-make-point 53 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 149 42) (quote "\"tatums\" mode $") "" (om-make-point 1265 198) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1238 159) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-LIST-INFO" (quote cnmat:o-list-info) (quote ((om-load-inputfun (quote input-funbox) "list of lists to be tallied" "MYLIST" (list (list 1 2 3) (list 3 5 5 6 7) (list 19 43 59) (list 34) (list 68))) (om-load-inputfunmenu1 (quote input-funmenu) "mode: 0 length of sublist and sum of sublist returned retaining list structure" "MODE" (list (list 1 2 3 4) (list 22 4)) (list (list "sum of the list of lists per voice" 0) (list "sums that preserve list structure" 1))))) (om-make-point 1202 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1090 279) (om-make-point 229 83) (load-buffer-textfile (quote ("((1 1) (1 2) (1 3) (1 4) (1 6) (1 4) (6 20))" "((1 1) (1 2) (1 3) (1 4) (1 6) (1 4) (6 20))" "((1 1) (1 2) (1 3) (1 4) (1 6) (1 4) (6 20))" "((1 1) (1 2) (1 3) (1 4) (1 6) (1 4) (6 20))" "((1 1) (1 2) (1 3) (1 4) (1 6) (1 4) (6 20))" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 149 74) (quote "\"default\" \"rhythm-lists\" mode $(for nested lists in lists)") "" (om-make-point 582 195) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 149 42) (quote "\"pitches\" mode $(for simple list of lists)") "" (om-make-point 1029 199) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1003 156) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 969 277) (om-make-point 93 91) (load-buffer-textfile (quote ("(20 178100)" "(20 130100)" "(20 106100)" "(20 82100)" "(20 82100)" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-LIST-INFO" (quote cnmat:o-list-info) (quote ((om-load-inputfun (quote input-funbox) "list of lists to be tallied" "MYLIST" (list (list 1 2 3) (list 3 5 5 6 7) (list 19 43 59) (list 34) (list 68))) (om-load-inputfunmenu1 (quote input-funmenu) "mode: 0 length of sublist and sum of sublist returned retaining list structure" "MODE" (list (list 1 2 3 4) (list 22 4)) (list (list "sum of the list of lists per voice" 0) (list "sums that preserve list structure" 1))))) (om-make-point 966 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 740 278) (om-make-point 211 91) (load-buffer-textfile (quote ("((5 30) (5 30) (5 30) (5 30) (20 120))" "((5 30) (5 30) (5 30) (5 30) (20 120))" "((5 30) (5 30) (5 30) (5 30) (20 120))" "((5 30) (5 30) (5 30) (5 30) (20 120))" "((5 30) (5 30) (5 30) (5 30) (20 120))" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-LIST-INFO" (quote cnmat:o-list-info) (quote ((om-load-inputfun (quote input-funbox) "list of lists to be tallied" "MYLIST" (list (list 1 2 3) (list 3 5 5 6 7) (list 19 43 59) (list 34) (list 68))))) (om-make-point 730 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 232 836) (om-make-point 1010 90) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9 (((9 4) (1 1 (1 (1 3)) (1 (2 1 1)) (1 (1 1 1 1)) (1 (1 1 2)) 1 (1 (1 1)) (1 (1.0 1)))) ((9 4) ((1 (1 2 1)) (1 (1 1 1 1 2)) (1 (1 1 2)) 1.0 (1 (1.0 1)) (1 (1.0 1 1)) (1 (1 1)) (1 (2.0 1 1 2)) (1 (1 1 1 1)))) ((9 4) (1 (1 (1 1)) (1 (2 1)) (1 (1.0 1 2)) (1 (1 1 1 1)) (1 (1.0 1 2)) 1 (1 (1.0 1)) (1 (1 1)))) ((9 4) ((1 (1.0 1 1 1)) (1 (1 2 1 1 1)) (1 (2 1 1)) 1.0 1 (1 (1.0 1 1)) 1 (1 (1 1 2 1 1)) (1 (1 2 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (3600 5100 9100 6500 3600)) :ldur (quote (545 545 545 545 545)) :lvel (quote (80 80 80 80 80)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600 5100 9100 6600 3600)) :ldur (quote (91 91 91 91 91)) :lvel (quote (80 80 80 80 80)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 9400)) :ldur (quote (182 182)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600 4900 9100 6600 3600)) :ldur (quote (545 545 545 545 545)) :lvel (quote (80 80 80 80 80)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300 5500)) :ldur (quote (136 136)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600 5100 9100 6600 3600)) :ldur (quote (91 91 91 91 91)) :lvel (quote (80 80 80 80 80)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 9400)) :ldur (quote (182 182)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 906 457) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY->VOICE" (quote cnmat:s-poly->voice) (quote ((om-load-inputfun (quote input-funbox) "A poly object--make sure that it is locked." "MYPOLY" (list nil)))) (om-make-point 34 783) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 80 25) (quote "modes") "" (om-make-point 331 492) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "yes" "no")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 334 510) (om-make-point 90 65) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 70 24) "untitled" :range (quote (0 1 2))))) (om-set-selected-item-index rep (quote 0)) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 23" (om-make-point 185 59) (quote "0 = full durations$1 = rests$2 = pulses at tatum") "" (om-make-point 431 513) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 101 23) (quote "rhythm list") "" (om-make-point 115 235) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 16" (om-make-point 50 26) (quote "tempo") "" (om-make-point 205 440) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 210 464) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-POLY2" (quote cnmat:s-poly2) (quote ((om-load-inputfun (quote input-funbox) "a list for the meter" "DURATIONS-LIST" (list (list 1 5 7 10))) (om-load-inputfun (quote input-funbox) "a list of lists for durations" "METER" (list 4 4)) (om-load-inputfun (quote input-funbox) "a tatum specified as a fraction" "TATUM" (list (list (list 1 (list 16)) (list 2 (list 20))))) (om-load-inputfun (quote input-funbox) "a list of lists of pitches" "PITCHES" (list (list 6100))) (om-load-inputfun (quote input-funbox) "a tempo as integer" "TEMPO" 110) (om-load-inputfun (quote input-funbox) "mode: 0 = sustain mode output; 1 = rests mode output" "MODE" 0))) (om-make-point 43 512) (om-make-point 256 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 235 255) (om-make-point 48 30) (list 9 4) "(9 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 529 410) (om-make-point 599 69) (load-buffer-textfile (quote ("(9100 9400 8400 8700 8900 9100 9400 8400 8700 9000 9100 9400 8400 8500 9000 9100 9400 8400 8700 9000)" "(6500 6700 7000 6000 6300 6600 6700 7000 6000 6300 6600 6700 7000 6000 6100 6600 6700 7000 6000 6300)" "(5100 5300 5500 5800 4800 5100 5400 5500 5800 4800 4900 5400 5500 5800 4800 5100 5400 5500 5800 4800)" "(3600 3900 4100 4300 4600 3600 3900 4200 4300 4600 3600 3700 4200 4300 4600 3600 3900 4200 4300 4600)" "(3600 3900 4100 4300 4600 3600 3900 4200 4300 4600 3600 3700 4200 4300 4600 3600 3900 4200 4300 4600)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 56 27) (quote "pitches") "" (om-make-point 531 389) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 275 302) (om-make-point 385 72) (load-buffer-textfile (quote ("((1(4)) (1(8)) (1(12)) (1(16)) (1(24)) (1(16)))" "((1(4)) (1(8)) (1(12)) (1(16)) (1(24)) (1(16)))" "((1(4)) (1(8)) (1(12)) (1(16)) (1(24)) (1(16)))" "((1(4)) (1(8)) (1(12)) (1(16)) (1(24)) (1(16)))" "((1(4)) (1(8)) (1(12)) (1(16)) (1(24)) (1(16)))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 80 26) (quote "tatums") "" (om-make-point 272 286) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 48 26) (quote "meter") "" (om-make-point 232 232) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 37 585) (om-make-point 1231 236) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9 (((9 4) (1 1 (1 (1.0 2)) 1.0 1 (1 (1.0 1)) 3.0)) ((9 4) (1.0 4 (1 (2.0 1)) (1 (1 1)) (1 (1.0 2)) 1.0)) ((9 4) (1 1 1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 3.0)) ((9 4) (1.0 4 (1 (2.0 1)) (1 (3 1)) (1 (2.0 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (2182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (2182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9 (((9 4) (2 1 (1 (3.0 1)) 1.0 (1 (1.0 3)) 3.0)) ((9 4) ((1 (3.0 1)) 1 (1 (1.0 1)) 4.0 (1 (3.0 1 2)) 1)) ((9 4) (1 (1 (1.0 1)) 1.0 (1 (1.0 3)) 1.0 (1 (1.0 3)) 3.0)) ((9 4) ((1 (3.0 1)) 1 4 1.0 (1 (1.0 1 3 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (2182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9 (((9 4) (3 1 (1 (2.0 1)) 4.0)) ((9 4) ((1 (1 3)) (1 (2 1)) 2.0 (1 (1.0 1)) 3.0 (1 (1.0 1 2)))) ((9 4) (2 (1 (2.0 1)) 1.0 (1 (4.0 1.0 1)) 4.0)) ((9 4) ((1 (1.0 1 2)) (1 (4 1.0 1)) 2.0 4 (1 (1 3))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (2182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9 (((9 4) (3 (1 (1.0 1)) 2.0 1 1 (1 (1.0 2)))) ((9 4) (1.0 (1 (1 2)) 3 (1 (1.0 2)) 2.0 (1 (3.0 1)))) ((9 4) (4 3 (1 (1.0 1)) (1 (2 1)))) ((9 4) (1.0 (1 (1 1)) (1 (1.0 1)) 2.0 (1 (1.0 2)) 2.0 (1 (3.0 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (545)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (2182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (364)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9 (((9 4) (4 (1 (2.0 1 3)) 2 (1 (1.0 1)) 1.0)) ((9 4) (1.0 (1 (1 2 3)) (1 (1.0 3)) 2.0 (1 (2.0 1)) 3.0)) ((9 4) (4 (1 (2.0 1 2 1)) 1.0 3)) ((9 4) (1.0 (1 (1 3 2)) (1 (3.0 1)) 2.0 (1 (2.0 1)) 3.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (2182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (1091)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (409)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (2182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (1636)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (91)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (273)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (182)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 1016 505) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 56 159) (om-make-point 417 79) (load-buffer-textfile (quote ("((1 3 6 8 12) (15 1 2 4 8) (1 2 5 10 12) (15 1 3 5 6))" "((3 6 8 12 1) (8 15 1 2 4) (2 5 10 12 1) (6 15 1 3 5))" "((6 8 12 1 3) (4 8 15 1 2) (5 10 12 1 2) (5 6 15 1 3))" "((8 12 1 3 6) (2 4 8 15 1) (10 12 1 2 5) (3 5 6 15 1))" "((12 1 3 6 8) (1 2 4 8 15) (12 1 2 5 10) (1 3 5 6 15))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((25 1 4 0 nil 0) (3 0 4 1 nil 0) (4 0 5 1 nil 0) (10 0 9 1 nil 0) (23 1 10 0 nil 0) (8 0 10 1 nil 0) (12 0 11 1 nil 0) (29 1 12 0 nil 0) (14 0 13 0 nil 0) (28 0 14 0 nil 0) (29 1 21 0 nil 0) (22 0 21 1 nil 0) (25 1 21 2 nil 0) (23 1 21 3 nil 0) (20 0 21 4 nil 0) (16 1 21 5 nil 0) (21 0 28 1 nil 0))) 6.110001 nil "" (om-make-point 650 195) (om-make-point 1382 850)) (quote nil) (om-make-point 70 559) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "Tests canon-query on a list combined with its retrograde.") "" (om-make-point 640 126) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "r-retro-canon?" (om-load-patch-abs1 "r-retro-canon?" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 103 27) (quote "rhythms list") "" (om-make-point 102 155) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 200 35) (quote "RETROGRADE-CANON-TEST") "" (om-make-point 63 29) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 106 192) (om-make-point 80 30) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 104 348) (om-make-point 96 72) (load-buffer-textfile (quote ("(1 2 3 4 5)" "(5 4 3 2 1)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 211 72) (quote "Tests canon-query on a list combined with its retrograde. If true, returns combined list. If false, returns nil.") "" (om-make-point 64 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-RETRO-CANON?" (quote cnmat::r-retro-canon?) (quote ((om-load-inputfun (quote input-funbox) "Tests canon-query on list combined with its retrograde" "MY-LIST" (list 1 2 3 4 5)))) (om-make-point 100 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 1 nil 0) (2 0 5 0 nil 0))) 6.110001 nil "" (om-make-point 71 87) (om-make-point 363 497)) (quote nil) (om-make-point 525 121) nil nil nil "r-retro-canon?"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "Invert a list of pitches around a provided  pitch.") "" (om-make-point 643 76) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "p-inversion" (om-load-patch-abs1 "p-inversion" (quote ((let ((box (om-load-boxcomment "comment 4" (om-make-point 159 28) (quote "PITCH-INVERSION") "" (om-make-point 107 18) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 114 136) (om-make-point 138 65) (load-buffer-textfile (quote ("" "(7000 7800 8000)" "(6000 6800 7000)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 94 54) (quote "inversion element$") "" (om-make-point 275 98) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 277 149) (om-make-point 48 30) 7100 "7100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 141 367) (om-make-point 235 120) (load-buffer-textfile (quote ("((7200 6400 6200) (8200 7400 7200))" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 243 48) (quote "Invert a list of pitches around a provided  pitch.") "" (om-make-point 110 49) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 103 27) (quote "elements list") "" (om-make-point 105 109) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-INVERSION" (quote cnmat:p-inversion) (quote ((om-load-inputfun (quote input-funbox) "a list of pitch lists" "PITCHLIST" (list (list 7000 7100 8000) (list 6000 6800 7000))) (om-load-inputfun (quote input-funbox) "a pitch to invert around" "INVERSION-ELEMENT" 7100))) (om-make-point 145 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 4 1 nil 0) (1 1 7 0 nil 0) (3 0 7 1 nil 0))) 6.110001 nil "" (om-make-point 206 23) (om-make-point 556 607)) (quote nil) (om-make-point 531 60) nil nil nil "p-inversion"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "o-index" (om-load-patch-abs1 "o-index" (quote ((let ((box (om-load-boxcomment "comment 6" (om-make-point 57 29) (quote "mode") "" (om-make-point 703 159) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 6" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 465 203) (om-make-point 88 67) (load-buffer-textfile (quote ("(" "(3 4 5 12 24)" ")" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 558 201) (om-make-point 120 76) (load-buffer-textfile (quote ("(" "(0 1 2 3 4) (0 3 2 4 3) (0 2 1 3 4)" ")" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 505 435) (om-make-point 105 60) (load-buffer-textfile (quote ("((3 4 5 12 24) (3 12 5 24 12) (3 5 4 12 24))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 715 229) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-INDEX 2" (quote cnmat:o-index) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "SOURCE" (list (list 3 4 5 1 2))) (om-load-inputfun (quote input-funbox) "a list of lists" "INDEX-LISTS" (list (list 0 1 2 3 4))) (om-load-inputfunmenu1 (quote input-funmenu) "mode: 0 = multiple source lists with multiple index lists; 1 = single source list with multiple index lists" "MODE" 0 (list (list "multiple source lists with index list" 0) (list "single source list, multiple index lists" 1))))) (om-make-point 525 325) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 57 29) (quote "source") "" (om-make-point 489 159) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 57 29) (quote "index") "" (om-make-point 592 159) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 239 59) (quote "GET INDEX (optional mode=1): single source list, multiple index lists") "" (om-make-point 484 62) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 94 197) (om-make-point 88 67) (load-buffer-textfile (quote ("(" "(3 4 5 12) (1 3 6) (2 4)" ")" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 206 192) (om-make-point 90 61) (load-buffer-textfile (quote ("(" "(0 1 2 3) (0 1 2) (0 1)" ")" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 119 442) (om-make-point 149 66) (load-buffer-textfile (quote ("((3 4 5 12) (1 3 6) (2 4))" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-INDEX" (quote cnmat:o-index) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "SOURCE" (list (list 3 4 5 1 2))) (om-load-inputfun (quote input-funbox) "a list of lists" "INDEX-LISTS" (list (list 0 1 2 3 4))))) (om-make-point 157 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 57 29) (quote "source") "" (om-make-point 107 150) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 57 29) (quote "index") "" (om-make-point 223 150) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 217 59) (quote "GET INDEX (default): multiple source lists w/ multiple index list") "" (om-make-point 102 64) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 159 28) (quote "O-INDEX") "" (om-make-point 106 20) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 1 nil 0) (1 1 5 0 nil 0) (2 1 5 1 nil 0) (4 0 5 2 nil 0) (12 0 11 1 nil 0) (9 1 12 0 nil 0) (10 1 12 1 nil 0))) 6.110001 nil "" (om-make-point 152 116) (om-make-point 876 642)) (quote nil) (om-make-point 73 495) nil nil nil "o-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 41) (quote "Returns a list of lists of elements from the source lists chosen by index number.") "" (om-make-point 172 503) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 186 40) (quote "Repeats a list n-times.") "" (om-make-point 167 444) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "o-list-repeat" (om-load-patch-abs1 "o-list-repeat" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 77 31) (quote "no. times") "" (om-make-point 161 123) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 30 30) (quote "list") "" (om-make-point 74 120) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 162 164) (om-make-point 28 34) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 159 28) (quote "O-LIST-REPEAT") "" (om-make-point 68 42) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 182 35) (quote "Repeats a list n-times.") "" (om-make-point 71 70) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 75 158) (om-make-point 70 50) (load-buffer-textfile (quote ("(45 67 89)" "(732 567)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 79 379) (om-make-point 140 62) (load-buffer-textfile (quote ("(45 67 89 45 67 89)" "(732 567 732 567)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-LIST-REPEAT" (quote cnmat:o-list-repeat) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MY-LIST" (list (list 1 2 3) (list 34 45))) (om-load-inputfun (quote input-funbox) "an integer number for number of repetitions" "NO-TIMES" 2))) (om-make-point 99 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 6 1 nil 0) (5 1 7 0 nil 0) (2 0 7 1 nil 0))) 6.110001 nil "" (om-make-point 152 23) (om-make-point 333 535)) (quote nil) (om-make-point 59 434) nil nil nil "o-list-repeat"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "o-equal-prob" (om-load-patch-abs1 "o-equal-prob" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 200 85) (quote "$Takes in a list of elements and returns the original list plus a list of equal probabilities for each element with a total sum of 1.0") "" (om-make-point 89 71) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 179 36) (quote "O-EQUAL-PROBABILITY") "" (om-make-point 90 50) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 139 171) (om-make-point 76 34) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 125 399) (om-make-point 119 54) (load-buffer-textfile (quote ("(1 2 3 4 5)" "(0.2 0.2 0.2 0.2 0.2)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-EQUAL-PROB" (quote cnmat:o-equal-prob) (quote ((om-load-inputfun (quote input-funbox) "a list of elements" "MY-LIST" (list 55 56 57 58 59)))) (om-make-point 135 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 1 nil 0) (2 0 4 0 nil 0))) 6.110001 nil "" (om-make-point 17 23) (om-make-point 407 569)) (quote nil) (om-make-point 57 373) nil nil nil "o-equal-prob"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 345 79) (quote "Takes in a list of elements and returns the original list plus a list of equal probabilities for each element with a total sum of 1.0.") "" (om-make-point 169 373) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "o-count-trunc" (om-load-patch-abs1 "o-count-trunc" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 199 64) (quote "5) Count elements in a list and truncate to number of elements specified") "" (om-make-point 96 65) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 139 30) (quote "COUNT-TRUNCATE") "" (om-make-point 96 37) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 113 144) (om-make-point 70 50) (load-buffer-textfile (quote ("(1 2 3 4 5)" "(6 7 8 9 10)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 123 331) (om-make-point 70 50) (load-buffer-textfile (quote ("(1 2)" "(6 7)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 199 140) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-COUNT-TRUNC" (quote cnmat:o-count-trunc) (quote ((om-load-inputfun (quote input-funbox) "a  list of lists" "MY-LIST" (list (list 1 2 3))) (om-load-inputfun (quote input-funbox) "the desired length in elements of each list" "LENGTH-DESIRED" 2))) (om-make-point 111 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 1 nil 0) (2 1 5 0 nil 0) (4 0 5 1 nil 0))) 6.110001 nil "" (om-make-point 34 23) (om-make-point 363 489)) (quote nil) (om-make-point 55 310) nil nil nil "o-count-trunc"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 332 47) (quote "As necessary, truncates all lists to the length of desired elements.\"") "" (om-make-point 172 324) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "o-cribs" (om-load-patch-abs1 "o-cribs" (quote ((let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 59 173) (om-make-point 210 82) (load-buffer-textfile (quote ("" "(4 5 6 7 9)" "(19 24 53 17)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 55 371) (om-make-point 208 54) (load-buffer-textfile (quote ("((4 5 6 7 9) (5 6 7 9 4) (6 7 9 4 5) (7 9 4 5 6) (9 4 5 6 7))" "((19 24 53 17) (24 53 17 19) (53 17 19 24) (17 19 24 53))" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 199 54) (quote "2) RHYTHM CRIB BUILDER$crib the list or list of lists") "" (om-make-point 54 98) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 117 35) (quote "O-CRIBS") "" (om-make-point 61 64) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-CRIBS" (quote cnmat:o-cribs) (quote ((om-load-inputfun (quote input-funbox) "a list of lists of values" "MY-LIST" (list (list 1 2 3) (list 4 5 6))))) (om-make-point 118 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 1 nil 0) (0 1 4 0 nil 0))) 6.110001 nil "" (om-make-point 0 23) (om-make-point 373 578)) (quote nil) (om-make-point 77 245) nil nil nil "o-cribs"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 332 47) (quote "Computes and returns the list of all rotations (circular permutations) of a given list <durations>.") "" (om-make-point 172 252) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 277 49) (quote "Sums all sublists and returns the result.") "" (om-make-point 174 193) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "o-sum-lists" (om-load-patch-abs1 "o-sum-lists" (quote ((let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 115 207) (om-make-point 70 50) (load-buffer-textfile (quote ("" "((1 2 3 4 5) (3 5 5 6 7) (19 43 59) (34) (68))" "((1 2 3 4) (22 4))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 319 202) (om-make-point 70 50) (load-buffer-textfile (quote ("" "((1 2 3 4 5) (3 5 5 6 7) (19 43 59) (34) (68))" "((1 2 3 4) (22 4))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 404 210) (om-make-point 28 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 199 54) (quote "Sums all sublists and returns the result.") "" (om-make-point 91 114) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 244 86) (quote "Optional argument (mode=1):$sum all sublists separately and returns the result retaining list structure") "" (om-make-point 320 116) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 111 412) (om-make-point 70 50) (load-buffer-textfile (quote ("((15) (26) (121) (34) (68) (264))" "((10) (26) (36))" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 327 415) (om-make-point 70 50) (load-buffer-textfile (quote ("(264)" "(36)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 117 35) (quote "O-SUM-LISTS") "" (om-make-point 320 85) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 117 35) (quote "O-SUM-LISTS") "" (om-make-point 95 86) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-SUM-LISTS 2" (quote cnmat:o-sum-lists) (quote ((om-load-inputfun (quote input-funbox) "list of lists to be summed" "MY-LIST" (list (list 1 2 3) (list 4 5 6))))) (om-make-point 106 292) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-SUM-LISTS" (quote cnmat:o-sum-lists) (quote ((om-load-inputfun (quote input-funbox) "list of lists to be summed" "MY-LIST" (list (list 1 2 3) (list 4 5 6))) (om-load-inputfunmenu1 (quote input-funmenu) "mode: 0 = sum all numbers; 1 = sum numbers and retain list structure" "MODE" 0 (list (list "sum of the list of lists per voice" 0) (list "sums that preserve list structure" 1))))) (om-make-point 322 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 5 1 nil 0) (10 0 6 1 nil 0) (0 1 9 0 nil 0) (1 1 10 0 nil 0) (2 0 10 1 nil 0))) 6.110001 nil "" (om-make-point 238 36) (om-make-point 638 524)) (quote nil) (om-make-point 65 183) nil nil nil "o-sum-lists"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 277 49) (quote "Returns a sequence of random elements of n-length from a list.$") "" (om-make-point 169 133) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "o-list-rand" (om-load-patch-abs1 "o-list-rand" (quote ((let ((box (om-load-boxcall (quote genfun) "O-LIST-RAND" (quote cnmat:o-list-rand) (quote ((om-load-inputfun (quote input-funbox) "a list with or without random weights" "MYLIST" (list 7100 (list 7200 0.9) 7300 7400 7800)) (om-load-inputfun (quote input-funbox) "desired length of output sequence" "NUM-RETURN-VALS" 20))) (om-make-point 707 425) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-LIST-RAND" (quote cnmat:o-list-rand) (quote ((om-load-inputfun (quote input-funbox) "a list with or without random weights" "MYLIST" (list 7100 (list 7200 0.9) 7300 7400 7800)) (om-load-inputfun (quote input-funbox) "desired length of output sequence" "NUM-RETURN-VALS" 20))) (om-make-point 188 400) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 305 52) (quote "*allows for pitches, chords and weights for each, if desired") "" (om-make-point 547 56) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 38 299) (om-make-point 228 45) (load-buffer-textfile (quote ("7100 7200 7300 7400 7800 (9700 9900)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 478 368) (om-make-point 281 40) (load-buffer-textfile (quote ("7100 (7200 0.3) 7300 7400 ((7800 8000 8200) 0.3)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 53 23) (quote "list") "" (om-make-point 547 346) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 612 526) (om-make-point 317 44) (load-buffer-textfile (quote ("(7400 7100 (7800 8000 8200) 7400 7300 7100 (7800 8000 8200) 7300 7100 (7800 8000 8200) 7400 7200 (7800 8000 8200) 7200 (7800 8000 8200) (7800 8000 8200) 7400 (7800 8000 8200) 7400 7400)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 321 69) (quote "Return a list for a given number of elements with an equal probability weighting.") "" (om-make-point 94 542) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 790 378) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 155 28) (quote "number of attacks") "" (om-make-point 789 347) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 350 141) (quote "Example2$Provide probability weights as desired for any element in the list.$Format as follows (element probability) where the sum of the probabilities is < 1.0.$Any elements without designated probabilities will be assigned equal probabilities from the remainder, adding to 1.0.") "" (om-make-point 545 159) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 93 490) (om-make-point 317 44) (load-buffer-textfile (quote ("(7800 7300 7200 7800 7800 7300 (9700 9900) 7200 7800 7300 (9700 9900) 7400 7400 7300 7800 7300 7100 (9700 9900) 7100 7200)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 155 28) (quote "number of attacks") "" (om-make-point 298 269) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 53 23) (quote "list") "" (om-make-point 39 264) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 299 307) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 239 84) (quote "Example 1$If a list of elements is given with no weights then all elements have equal proability of being chosen.") "" (om-make-point 39 165) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 452 73) (quote "Returns a sequence of random elements of n-length from a list.$Weights may be supplied for elements for the random selection.  Otherwise, all elements are given equal probability of occurring.") "" (om-make-point 42 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 236 47) (quote "RANDOM SEQUENCE FROM A LIST") "" (om-make-point 42 39) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 323 39) (quote "Return a list for a given number of elements with a certain probability weighting") "" (om-make-point 611 573) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 299 44) (quote "format list as (element &optional probability)$probabilities must be less <= 1") "" (om-make-point 546 295) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 1 0 0 nil 0) (8 0 0 1 nil 0) (3 1 1 0 nil 0) (14 0 1 1 nil 0) (0 0 6 1 nil 0) (1 0 11 1 nil 0))) 6.110001 nil "" (om-make-point 200 178) (om-make-point 1021 696)) (quote nil) (om-make-point 69 124) nil nil nil "o-list-rand"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 277 49) (quote "Creates transitions between two lists following a bpf trajectory.") "" (om-make-point 169 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 83 27) (quote "arithmetic") "" (om-make-point 539 194) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "o-list-trans" (om-load-patch-abs1 "o-list-trans" (quote ((let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 339 180) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (100 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 550 327))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 15" (om-make-point 39 27) (quote "bpf") "" (om-make-point 336 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 404 191) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1067 295) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "PROBABILITY SHAPES" (om-load-patch-abs1 "PROBABILITY SHAPES" (quote ((let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 245 223) (om-make-point 89 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 42 56 100)) (quote (100 0 0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 904 687) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 102 227) (om-make-point 89 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 6 42 50 93 100)) (quote (0 0 101 101 0 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 885 584) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 237 90) (om-make-point 89 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 12 88 100)) (quote (100 100 0 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 888 518) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 101 93) (om-make-point 89 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 15 86 100)) (quote (0 0 100 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 60 609) nil nil nil "PROBABILITY SHAPES"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 21" (om-make-point 288 40) (quote "This example transitions from listB to listA, following the bpf.") "" (om-make-point 48 133) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 20" (om-make-point 288 40) (quote "This example transitions from listA to listB, following the bpf.") "" (om-make-point 564 81) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 19" (om-make-point 193 42) (quote "OTHER BPFS THAT COULD BE USED--Look inside") "" (om-make-point 54 558) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 18" (om-make-point 223 34) (quote "LIST-TRANSITION (default)") "" (om-make-point 50 84) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 17" (om-make-point 130 24) (quote "Default mode") "" (om-make-point 573 266) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 16" (om-make-point 79 27) (quote "Mode = 1") "" (om-make-point 1098 296) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "map to pitches 2" (om-load-patch-abs1 "map to pitches" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 28 111) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tempo" 1 (om-make-point 308 53) "" "tempo" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 14 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 12 433) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 117 95) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 229 82) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 162 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 41 270) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sequence" 0 (om-make-point 5 45) "" "sequence" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 2 0 nil 0) (0 0 2 1 nil 0) (7 0 3 0 nil 0) (2 0 4 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (6 0 7 1 nil 0) (2 0 7 2 nil 0) (1 0 7 3 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "sequence" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 391 565) nil (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "map to pitches"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 110) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 389 642) (om-make-point 413 113) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1038 499) (om-make-point 356 47) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 854 214) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (100 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 550 327))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1054 220) (om-make-point 234 30) (list (list (list 6000 6700) 0.9) (list 6100 0.05) 6200) "(((6000 6700) 0.9) (6100 0.05) 6200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1294 219) (om-make-point 153 30) (list 7200 7300 (list 7400 0.9)) "(7200 7300 (7400 0.9))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1007 224) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 15" (om-make-point 39 27) (quote "bpf") "" (om-make-point 851 181) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 14" (om-make-point 89 41) (quote "number of samples") "" (om-make-point 1006 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 39 27) (quote "listA") "" (om-make-point 1091 177) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 39 27) (quote "listB") "" (om-make-point 1290 179) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 904 462) (om-make-point 308 61) (load-buffer-textfile (quote ("(7400 7400 7400 7400 (6000 6700) (6000 6700) (6000 6700) 7400 6100 7400 7400 (6000 6700) (6000 6700) (6000 6700) (6000 6700) 7400 6100 7400 (6000 6700) (6000 6700))" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 110) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 915 645) (om-make-point 504 103) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 11" (om-make-point 201 53) (quote "LIST-TRANSITION $(Mode = 1$with weighted probabilities)") "" (om-make-point 851 75) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 201 53) (quote "LIST-TRANSITION$(default)") "" (om-make-point 346 72) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 388 402) (om-make-point 308 61) (load-buffer-textfile (quote ("(7300 6000 7200 7200 7300 7300 7300 7200 (6200 6700) (6200 6700) (6200 6700) 7300 (6200 6700) (6200 6700) (6200 6700) (6200 6700))" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 39 27) (quote "listB") "" (om-make-point 686 141) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 39 27) (quote "listA") "" (om-make-point 575 140) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 89 41) (quote "number of samples") "" (om-make-point 487 137) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 491 187) (om-make-point 34 30) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 715 187) (om-make-point 90 30) (list 7200 7300) "(7200 7300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 576 187) (om-make-point 132 30) (list 6000 (list 6200 6700)) "(6000 (6200 6700))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 282 372) (quote "$Returns a list of random elements from listA or listB following a bpf to guide the probability from which list (A or B) a given element is chosen.$$Second argument specifies the number of output lists desired.$$Default:$Within each list (listA or listB), elements have equal probability of being chosen.$$Mode1:$Enables the possibility of specifying probabilities for each element in listA or listB$$*Bpfs should use range of 1-100 for both x and y domains.$$*Default mode requires that Alea library be loaded$$$Do Mode1 that uses weights.$$") "" (om-make-point 45 176) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 399 97) (quote "*Provide an argument for probability weights in the form (element, weight), where weight is a float value between 0.0-1.0.  Elements without a weight will be assigned a weight equally divided from the remainder after the assigned weights have been allocated.") "" (om-make-point 1121 70) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 499 549) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 54 30) (quote "tempo") "" (om-make-point 494 515) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-LIST-TRANS 2" (quote cnmat:o-list-trans) (quote ((om-load-inputfun (quote input-funbox) "a  bpf" "MYBPF" nil) (om-load-inputfun (quote input-funbox) "number of output lists deisred" "NUM-TIMES" 1) (om-load-inputfun (quote input-funbox) "number of samples desired" "NUM-SAMPLES" 10) (om-load-inputfun (quote input-funbox) "list A" "LISTA" (list 6000 6100 6200)) (om-load-inputfun (quote input-funbox) "list B" "LISTB" (list 7200 7300 7400)))) (om-make-point 480 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 97 60) (quote "number of output lists desired") "" (om-make-point 393 123) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-LIST-TRANS" (quote cnmat:o-list-trans) (quote ((om-load-inputfun (quote input-funbox) "a  bpf" "MYBPF" nil) (om-load-inputfun (quote input-funbox) "number of output lists deisred" "NUM-TIMES" 1) (om-load-inputfun (quote input-funbox) "number of samples desired" "NUM-SAMPLES" 10) (om-load-inputfun (quote input-funbox) "list A" "LISTA" (list 6000 6100 6200)) (om-load-inputfun (quote input-funbox) "list B" "LISTB" (list 7200 7300 7400)) (om-load-inputfun (quote input-funbox) "optional mode" "MODE" 0))) (om-make-point 996 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 97 60) (quote "number of output lists desired") "" (om-make-point 909 157) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 919 225) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 54 30) (quote "tempo") "" (om-make-point 1087 521) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1092 555) (om-make-point 41 30) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "map to pitches" (om-load-patch-abs1 "map to pitches" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 28 111) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tempo" 1 (om-make-point 308 53) "" "tempo" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 14 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 12 433) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 117 95) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 229 82) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 162 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 41 270) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sequence" 0 (om-make-point 5 45) "" "sequence" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 2 0 nil 0) (0 0 2 1 nil 0) (7 0 3 0 nil 0) (2 0 4 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (6 0 7 1 nil 0) (2 0 7 2 nil 0) (1 0 7 3 nil 0))) 6.110001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "sequence" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 984 571) nil (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (136)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (136 136)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 110) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "map to pitches"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((25 1 11 0 nil 0) (34 0 11 1 nil 0) (11 0 12 0 nil 0) (38 0 21 1 nil 0) (43 0 22 0 nil 0) (36 0 25 1 nil 0) (0 0 36 0 nil 0) (2 0 36 1 nil 0) (29 0 36 2 nil 0) (31 0 36 3 nil 0) (30 0 36 4 nil 0) (13 0 38 0 nil 0) (40 0 38 1 nil 0) (16 0 38 2 nil 0) (14 0 38 3 nil 0) (15 0 38 4 nil 0) (3 0 38 5 nil 0) (21 1 43 0 nil 0) (42 0 43 1 nil 0))) 6.110001 nil "" (om-make-point 0 61) (om-make-point 1440 813)) (quote nil) (om-make-point 68 60) nil nil nil "o-list-trans"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.110001 nil "" (om-make-point 248 54) (om-make-point 986 847)) (quote nil) (om-make-point 68 398) nil nil nil "OPERATIONS"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 6.110001))
