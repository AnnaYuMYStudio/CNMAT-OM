; OM File Header - Saved 2016/11/14 20:01:30
; (6.1001 :patc (om-make-point 862 53) (om-make-point 893 23) (om-make-point 537 504) "" 183 0 "2016/10/06 10:23:26" "2016/11/14 18:49:50")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "divisor" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "U-divisors (draft)") nil (om-make-point 90 31) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 201 98) (quote "$Takes an integer as input and returns a list of integer divisors with along with the sum of these divisors.") nil (om-make-point 88 64) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 127 364) (om-make-point 123 69) (load-buffer-textfile (quote ("(1 2 4 5 10 20)" "(42)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "divisors" (om-load-lisp-abspatch "divisors" 6.1001 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (input) $$(let ((numbers (arithm-ser 1 input 1))$      (pre-final-list '())$      (final-list))$$(loop for number in numbers do$      (if (integerp (/ input number)) (push (list number (/ input number)) pre-final-list)))$$(setf final-list (sort (remove-dup (flat pre-final-list) 'eq 1) '<))$$(list final-list (list (reduce #'+ final-list)))$$)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil))) (om-make-point 154 257) nil (list (list (list 1 2 4 5 10 20) (list 42))) nil "divisors"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 40 28) (quote "input") nil (om-make-point 159 159) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 164 195) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 1 nil 0) (5 0 3 0 nil 0))) nil 6.1001))
