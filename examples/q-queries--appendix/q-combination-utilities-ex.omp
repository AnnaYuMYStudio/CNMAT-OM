; OM File Header - Saved 2016/08/09 15:35:59
; (6.1001 :patc (om-make-point 987 349) (om-make-point 690 23) (om-make-point 1400 851) "" 183 0 nil "2016/08/09 15:35:59")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "q-combination-utilities-ex" (quote ((let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 364 630) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 2170 665) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 8" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2022 716) (om-make-point 293 71) (load-buffer-textfile (quote ("((3 1 2) (3 2 1) 2)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "yes" "no")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 1981 594) (om-make-point 339 60) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 319 24) "untitled" :range (quote (((1 2 3) (1 3 2) 2) ((1 2 3) (1 3 2) (2 1 3) 4) ((1 2 3) (1 3 2) (2 1 3) (2 3 1) 6) ((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 9) ((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 12) ((1 2 3) (2 1 3) 2) ((1 2 3) (2 1 3) (2 3 1) 4) ((1 2 3) (2 1 3) (2 3 1) (3 1 2) 5) ((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 8) ((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) 12) ((1 2 3) (2 3 1) 0) ((1 2 3) (2 3 1) (3 1 2) 2) ((1 2 3) (2 3 1) (3 1 2) (3 2 1) 5) ((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) 9) ((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) 12) ((1 2 3) (3 1 2) 2) ((1 2 3) (3 1 2) (3 2 1) 3) ((1 2 3) (3 1 2) (3 2 1) (1 3 2) 7) ((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) 8) ((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) 12) ((1 2 3) (3 2 1) 2) ((1 2 3) (3 2 1) (1 3 2) 4) ((1 2 3) (3 2 1) (1 3 2) (2 1 3) 5) ((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) 9) ((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 12) ((1 3 2) (2 1 3) 0) ((1 3 2) (2 1 3) (2 3 1) 2) ((1 3 2) (2 1 3) (2 3 1) (3 1 2) 6) ((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 9) ((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 12) ((1 3 2) (2 3 1) 0) ((1 3 2) (2 3 1) (3 1 2) 2) ((1 3 2) (2 3 1) (3 1 2) (3 2 1) 6) ((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 9) ((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) 12) ((1 3 2) (3 1 2) 2) ((1 3 2) (3 1 2) (3 2 1) 4) ((1 3 2) (3 1 2) (3 2 1) (1 2 3) 7) ((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) 8) ((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) 12) ((1 3 2) (3 2 1) 0) ((1 3 2) (3 2 1) (1 2 3) 4) ((1 3 2) (3 2 1) (1 2 3) (2 1 3) 5) ((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) 9) ((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) 12) ((1 3 2) (1 2 3) 2) ((1 3 2) (1 2 3) (2 1 3) 4) ((1 3 2) (1 2 3) (2 1 3) (2 3 1) 6) ((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) 9) ((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 12) ((2 1 3) (2 3 1) 2) ((2 1 3) (2 3 1) (3 1 2) 4) ((2 1 3) (2 3 1) (3 1 2) (3 2 1) 7) ((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 8) ((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 12) ((2 1 3) (3 1 2) 2) ((2 1 3) (3 1 2) (3 2 1) 3) ((2 1 3) (3 1 2) (3 2 1) (1 2 3) 4) ((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 8) ((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) 12) ((2 1 3) (3 2 1) 2) ((2 1 3) (3 2 1) (1 2 3) 3) ((2 1 3) (3 2 1) (1 2 3) (1 3 2) 5) ((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) 9) ((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) 12) ((2 1 3) (1 2 3) 2) ((2 1 3) (1 2 3) (1 3 2) 4) ((2 1 3) (1 2 3) (1 3 2) (2 3 1) 6) ((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) 9) ((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) 12) ((2 1 3) (1 3 2) 0) ((2 1 3) (1 3 2) (2 3 1) 2) ((2 1 3) (1 3 2) (2 3 1) (3 1 2) 6) ((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) 9) ((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 12) ((2 3 1) (3 1 2) 0) ((2 3 1) (3 1 2) (3 2 1) 4) ((2 3 1) (3 1 2) (3 2 1) (1 2 3) 5) ((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 9) ((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 12) ((2 3 1) (3 2 1) 2) ((2 3 1) (3 2 1) (1 2 3) 4) ((2 3 1) (3 2 1) (1 2 3) (1 3 2) 6) ((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 9) ((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) 12) ((2 3 1) (1 2 3) 0) ((2 3 1) (1 2 3) (1 3 2) 2) ((2 3 1) (1 2 3) (1 3 2) (2 1 3) 6) ((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) 9) ((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) 12) ((2 3 1) (1 3 2) 0) ((2 3 1) (1 3 2) (2 1 3) 2) ((2 3 1) (1 3 2) (2 1 3) (3 1 2) 6) ((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) 9) ((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) 12) ((2 3 1) (2 1 3) 2) ((2 3 1) (2 1 3) (3 1 2) 4) ((2 3 1) (2 1 3) (3 1 2) (3 2 1) 7) ((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) 8) ((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 12) ((3 1 2) (3 2 1) 2) ((3 1 2) (3 2 1) (1 2 3) 3) ((3 1 2) (3 2 1) (1 2 3) (1 3 2) 7) ((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 8) ((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) 12) ((3 1 2) (1 2 3) 2) ((3 1 2) (1 2 3) (1 3 2) 6) ((3 1 2) (1 2 3) (1 3 2) (2 1 3) 7) ((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) 9) ((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) 12) ((3 1 2) (1 3 2) 2) ((3 1 2) (1 3 2) (2 1 3) 4) ((3 1 2) (1 3 2) (2 1 3) (2 3 1) 6) ((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) 9) ((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) 12) ((3 1 2) (2 1 3) 2) ((3 1 2) (2 1 3) (2 3 1) 4) ((3 1 2) (2 1 3) (2 3 1) (3 2 1) 7) ((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) 8) ((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) 12) ((3 1 2) (2 3 1) 0) ((3 1 2) (2 3 1) (3 2 1) 4) ((3 1 2) (2 3 1) (3 2 1) (1 2 3) 5) ((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) 9) ((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 12) ((3 2 1) (1 2 3) 2) ((3 2 1) (1 2 3) (1 3 2) 4) ((3 2 1) (1 2 3) (1 3 2) (2 1 3) 5) ((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) 9) ((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 12) ((3 2 1) (1 3 2) 0) ((3 2 1) (1 3 2) (2 1 3) 2) ((3 2 1) (1 3 2) (2 1 3) (2 3 1) 6) ((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 9) ((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) 12) ((3 2 1) (2 1 3) 2) ((3 2 1) (2 1 3) (2 3 1) 6) ((3 2 1) (2 1 3) (2 3 1) (3 1 2) 7) ((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) 8) ((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) 12) ((3 2 1) (2 3 1) 2) ((3 2 1) (2 3 1) (3 1 2) 4) ((3 2 1) (2 3 1) (3 1 2) (1 2 3) 5) ((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) 9) ((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) 12) ((3 2 1) (3 1 2) 2) ((3 2 1) (3 1 2) (1 2 3) 3) ((3 2 1) (3 1 2) (1 2 3) (1 3 2) 7) ((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) 8) ((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) 12)))))) (om-set-selected-item-index rep (quote 100)) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-ALL" (quote cnmat:q-permutations+canon-all) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))))) (om-make-point 1676 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 2516 310) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-UTILITY" (quote cnmat:q-permutations+canon-utility) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))) (om-load-inputfun (quote input-funbox) "a mode argument" "MODE" 0))) (om-make-point 2414 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1793 505) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-UTILITY" (quote cnmat:q-permutations+canon-utility) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))) (om-load-inputfun (quote input-funbox) "a mode argument" "MODE" 0))) (om-make-point 1691 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON" (quote cnmat:q-permutations+canon) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list 1 2 3 4 5)))) (om-make-point 1238 536) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1090 359) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON-UTILITY" (quote cnmat:q-permutations+canon-utility) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list (list 1 2 3) (list 1 3 2) (list 2 1 3) (list 2 3 1) (list 3 1 2) (list 3 2 1))) (om-load-inputfun (quote input-funbox) "a mode argument" "MODE" 0))) (om-make-point 973 390) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON" (quote cnmat:q-permutations+canon) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list 1 2 3 4 5)))) (om-make-point 507 369) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-N-PERMUTATIONS-NO-ROTATIONS" (quote cnmat:q-n-permutations-no-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list for permuting" "MYLIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "the number of permutations desired" "NUM-RESULTS" 4))) (om-make-point 76 236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 185 46) (quote "Output utility--mode=0 = exclude rotations") "" (om-make-point 967 303) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 7" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1013 499) (om-make-point 112 160) (load-buffer-textfile (quote ("((2 3 1 4 5) (3 4 2 5 1))" "((3 2 4 5 1) (2 4 1 3 5))" "((1 4 5 3 2) (3 4 2 5 1))" "((1 4 3 5 2) (2 4 1 3 5))" "((5 2 3 4 1))" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 227 83) (quote "<-- output utility, mode=2$function output sorted by fewest onset overlaps + excluding rotations") "" (om-make-point 2611 300) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 6" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 2388 440) (om-make-point 277 455) (load-buffer-textfile (quote ("((1 2 3) (2 3 1) 0)" "((1 3 2) (2 1 3) 0)" "((1 3 2) (2 3 1) 0)" "((1 3 2) (3 2 1) 0)" "((2 3 1) (3 1 2) 0)" "((1 2 3) (1 3 2) 2)" "((1 2 3) (2 1 3) 2)" "((1 2 3) (2 3 1) (3 1 2) 2)" "((1 2 3) (3 1 2) 2)" "((1 2 3) (3 2 1) 2)" "((1 3 2) (2 1 3) (2 3 1) 2)" "((1 3 2) (2 3 1) (3 1 2) 2)" "((1 3 2) (3 1 2) 2)" "((2 1 3) (2 3 1) 2)" "((2 1 3) (3 1 2) 2)" "((2 1 3) (3 2 1) 2)" "((2 1 3) (1 3 2) (2 3 1) 2)" "((2 3 1) (3 2 1) 2)" "((2 3 1) (1 2 3) (1 3 2) 2)" "((3 1 2) (3 2 1) 2)" "((3 2 1) (1 3 2) (2 1 3) 2)" "((1 2 3) (3 1 2) (3 2 1) 3)" "((2 1 3) (3 1 2) (3 2 1) 3)" "((2 1 3) (3 2 1) (1 2 3) 3)" "((3 2 1) (3 1 2) (1 2 3) 3)" "((1 2 3) (1 3 2) (2 1 3) 4)" "((1 2 3) (2 1 3) (2 3 1) 4)" "((1 2 3) (3 2 1) (1 3 2) 4)" "((1 3 2) (3 1 2) (3 2 1) 4)" "((1 3 2) (3 2 1) (1 2 3) 4)" "((1 3 2) (1 2 3) (2 1 3) 4)" "((2 1 3) (2 3 1) (3 1 2) 4)" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) 4)" "((2 3 1) (3 1 2) (3 2 1) 4)" "((2 3 1) (3 2 1) (1 2 3) 4)" "((2 3 1) (2 1 3) (3 1 2) 4)" "((3 1 2) (1 3 2) (2 1 3) 4)" "((3 1 2) (2 3 1) (3 2 1) 4)" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) 5)" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) 5)" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) 5)" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) 5)" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) 5)" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) 5)" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) 5)" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) 6)" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) 6)" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) 6)" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) 6)" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) 6)" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) 6)" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) 6)" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) 6)" "((3 1 2) (1 2 3) (1 3 2) 6)" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) 6)" "((3 2 1) (2 1 3) (2 3 1) 6)" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) 7)" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) 7)" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) 7)" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) 7)" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) 7)" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) 7)" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) 7)" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 8)" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) 8)" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) 8)" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 8)" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) 8)" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) 8)" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) 8)" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) 8)" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 9)" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) 9)" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) 9)" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 9)" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 9)" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) 9)" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) 9)" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) 9)" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) 9)" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) 9)" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 9)" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) 9)" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) 9)" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) 9)" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) 9)" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) 9)" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 12)" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) 12)" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) 12)" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) 12)" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 12)" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) 12)" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) 12)" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) 12)" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) 12)" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) 12)" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) 12)" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) 12)" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) 12)" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) 12)" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) 12)" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) 12)" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) 12)" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) 12)" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) 12)" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 224 59) (quote "<--output utility, mode=1$function output sorted by fewest onset overlaps") "" (om-make-point 1918 522) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 179 29) (quote "<--function output") "" (om-make-point 1952 424) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1655 640) (om-make-point 298 269) (load-buffer-textfile (quote ("((1 2 3) (2 3 1) 0)" "((1 3 2) (2 1 3) 0)" "((1 3 2) (2 3 1) 0)" "((1 3 2) (3 2 1) 0)" "((2 1 3) (1 3 2) 0)" "((2 3 1) (3 1 2) 0)" "((2 3 1) (1 2 3) 0)" "((2 3 1) (1 3 2) 0)" "((3 1 2) (2 3 1) 0)" "((3 2 1) (1 3 2) 0)" "((1 2 3) (1 3 2) 2)" "((1 2 3) (2 1 3) 2)" "((1 2 3) (2 3 1) (3 1 2) 2)" "((1 2 3) (3 1 2) 2)" "((1 2 3) (3 2 1) 2)" "((1 3 2) (2 1 3) (2 3 1) 2)" "((1 3 2) (2 3 1) (3 1 2) 2)" "((1 3 2) (3 1 2) 2)" "((1 3 2) (1 2 3) 2)" "((2 1 3) (2 3 1) 2)" "((2 1 3) (3 1 2) 2)" "((2 1 3) (3 2 1) 2)" "((2 1 3) (1 2 3) 2)" "((2 1 3) (1 3 2) (2 3 1) 2)" "((2 3 1) (3 2 1) 2)" "((2 3 1) (1 2 3) (1 3 2) 2)" "((2 3 1) (1 3 2) (2 1 3) 2)" "((2 3 1) (2 1 3) 2)" "((3 1 2) (3 2 1) 2)" "((3 1 2) (1 2 3) 2)" "((3 1 2) (1 3 2) 2)" "((3 1 2) (2 1 3) 2)" "((3 2 1) (1 2 3) 2)" "((3 2 1) (1 3 2) (2 1 3) 2)" "((3 2 1) (2 1 3) 2)" "((3 2 1) (2 3 1) 2)" "((3 2 1) (3 1 2) 2)" "((1 2 3) (3 1 2) (3 2 1) 3)" "((2 1 3) (3 1 2) (3 2 1) 3)" "((2 1 3) (3 2 1) (1 2 3) 3)" "((3 1 2) (3 2 1) (1 2 3) 3)" "((3 2 1) (3 1 2) (1 2 3) 3)" "((1 2 3) (1 3 2) (2 1 3) 4)" "((1 2 3) (2 1 3) (2 3 1) 4)" "((1 2 3) (3 2 1) (1 3 2) 4)" "((1 3 2) (3 1 2) (3 2 1) 4)" "((1 3 2) (3 2 1) (1 2 3) 4)" "((1 3 2) (1 2 3) (2 1 3) 4)" "((2 1 3) (2 3 1) (3 1 2) 4)" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) 4)" "((2 1 3) (1 2 3) (1 3 2) 4)" "((2 3 1) (3 1 2) (3 2 1) 4)" "((2 3 1) (3 2 1) (1 2 3) 4)" "((2 3 1) (2 1 3) (3 1 2) 4)" "((3 1 2) (1 3 2) (2 1 3) 4)" "((3 1 2) (2 1 3) (2 3 1) 4)" "((3 1 2) (2 3 1) (3 2 1) 4)" "((3 2 1) (1 2 3) (1 3 2) 4)" "((3 2 1) (2 3 1) (3 1 2) 4)" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) 5)" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) 5)" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) 5)" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) 5)" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) 5)" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) 5)" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) 5)" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) 5)" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) 5)" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) 6)" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) 6)" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) 6)" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) 6)" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) 6)" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) 6)" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) 6)" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) 6)" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) 6)" "((3 1 2) (1 2 3) (1 3 2) 6)" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) 6)" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) 6)" "((3 2 1) (2 1 3) (2 3 1) 6)" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) 7)" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) 7)" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) 7)" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) 7)" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) 7)" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) 7)" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) 7)" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) 7)" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) 7)" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 8)" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) 8)" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) 8)" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 8)" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 8)" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) 8)" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 8)" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) 8)" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) 8)" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) 8)" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 9)" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) 9)" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) 9)" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 9)" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 9)" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) 9)" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) 9)" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) 9)" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) 9)" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) 9)" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 9)" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 9)" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) 9)" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) 9)" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) 9)" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) 9)" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) 9)" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) 9)" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 9)" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) 9)" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 12)" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) 12)" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) 12)" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) 12)" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 12)" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 12)" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) 12)" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) 12)" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) 12)" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 12)" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 12)" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) 12)" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) 12)" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) 12)" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 12)" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 12)" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) 12)" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) 12)" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) 12)" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 12)" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) 12)" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) 12)" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) 12)" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) 12)" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 12)" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 12)" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) 12)" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) 12)" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) 12)" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) 12)" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1634 397) (om-make-point 289 86) (load-buffer-textfile (quote ("((1 2 3) (1 3 2) 2)" "((1 2 3) (1 3 2) (2 1 3) 4)" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) 6)" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 9)" "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 12)" "((1 2 3) (2 1 3) 2)" "((1 2 3) (2 1 3) (2 3 1) 4)" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) 5)" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 8)" "((1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) 12)" "((1 2 3) (2 3 1) 0)" "((1 2 3) (2 3 1) (3 1 2) 2)" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) 5)" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) 9)" "((1 2 3) (2 3 1) (3 1 2) (3 2 1) (1 3 2) (2 1 3) 12)" "((1 2 3) (3 1 2) 2)" "((1 2 3) (3 1 2) (3 2 1) 3)" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) 7)" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) 8)" "((1 2 3) (3 1 2) (3 2 1) (1 3 2) (2 1 3) (2 3 1) 12)" "((1 2 3) (3 2 1) 2)" "((1 2 3) (3 2 1) (1 3 2) 4)" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) 5)" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) 9)" "((1 2 3) (3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 12)" "((1 3 2) (2 1 3) 0)" "((1 3 2) (2 1 3) (2 3 1) 2)" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) 6)" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 9)" "((1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 12)" "((1 3 2) (2 3 1) 0)" "((1 3 2) (2 3 1) (3 1 2) 2)" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) 6)" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 9)" "((1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (2 1 3) 12)" "((1 3 2) (3 1 2) 2)" "((1 3 2) (3 1 2) (3 2 1) 4)" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) 7)" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) 8)" "((1 3 2) (3 1 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) 12)" "((1 3 2) (3 2 1) 0)" "((1 3 2) (3 2 1) (1 2 3) 4)" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) 5)" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) 9)" "((1 3 2) (3 2 1) (1 2 3) (2 1 3) (2 3 1) (3 1 2) 12)" "((1 3 2) (1 2 3) 2)" "((1 3 2) (1 2 3) (2 1 3) 4)" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) 6)" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) 9)" "((1 3 2) (1 2 3) (2 1 3) (2 3 1) (3 1 2) (3 2 1) 12)" "((2 1 3) (2 3 1) 2)" "((2 1 3) (2 3 1) (3 1 2) 4)" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) 7)" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 8)" "((2 1 3) (2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 12)" "((2 1 3) (3 1 2) 2)" "((2 1 3) (3 1 2) (3 2 1) 3)" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) 4)" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 8)" "((2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 3 1) 12)" "((2 1 3) (3 2 1) 2)" "((2 1 3) (3 2 1) (1 2 3) 3)" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) 5)" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) 9)" "((2 1 3) (3 2 1) (1 2 3) (1 3 2) (2 3 1) (3 1 2) 12)" "((2 1 3) (1 2 3) 2)" "((2 1 3) (1 2 3) (1 3 2) 4)" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) 6)" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) 9)" "((2 1 3) (1 2 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) 12)" "((2 1 3) (1 3 2) 0)" "((2 1 3) (1 3 2) (2 3 1) 2)" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) 6)" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) 9)" "((2 1 3) (1 3 2) (2 3 1) (3 1 2) (3 2 1) (1 2 3) 12)" "((2 3 1) (3 1 2) 0)" "((2 3 1) (3 1 2) (3 2 1) 4)" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) 5)" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 9)" "((2 3 1) (3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 12)" "((2 3 1) (3 2 1) 2)" "((2 3 1) (3 2 1) (1 2 3) 4)" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) 6)" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 9)" "((2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) 12)" "((2 3 1) (1 2 3) 0)" "((2 3 1) (1 2 3) (1 3 2) 2)" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) 6)" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) 9)" "((2 3 1) (1 2 3) (1 3 2) (2 1 3) (3 1 2) (3 2 1) 12)" "((2 3 1) (1 3 2) 0)" "((2 3 1) (1 3 2) (2 1 3) 2)" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) 6)" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) 9)" "((2 3 1) (1 3 2) (2 1 3) (3 1 2) (3 2 1) (1 2 3) 12)" "((2 3 1) (2 1 3) 2)" "((2 3 1) (2 1 3) (3 1 2) 4)" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) 7)" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) 8)" "((2 3 1) (2 1 3) (3 1 2) (3 2 1) (1 2 3) (1 3 2) 12)" "((3 1 2) (3 2 1) 2)" "((3 1 2) (3 2 1) (1 2 3) 3)" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) 7)" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 8)" "((3 1 2) (3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) 12)" "((3 1 2) (1 2 3) 2)" "((3 1 2) (1 2 3) (1 3 2) 6)" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) 7)" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) 9)" "((3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 2 1) 12)" "((3 1 2) (1 3 2) 2)" "((3 1 2) (1 3 2) (2 1 3) 4)" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) 6)" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) 9)" "((3 1 2) (1 3 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) 12)" "((3 1 2) (2 1 3) 2)" "((3 1 2) (2 1 3) (2 3 1) 4)" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) 7)" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) 8)" "((3 1 2) (2 1 3) (2 3 1) (3 2 1) (1 2 3) (1 3 2) 12)" "((3 1 2) (2 3 1) 0)" "((3 1 2) (2 3 1) (3 2 1) 4)" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) 5)" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) 9)" "((3 1 2) (2 3 1) (3 2 1) (1 2 3) (1 3 2) (2 1 3) 12)" "((3 2 1) (1 2 3) 2)" "((3 2 1) (1 2 3) (1 3 2) 4)" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) 5)" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) 9)" "((3 2 1) (1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 12)" "((3 2 1) (1 3 2) 0)" "((3 2 1) (1 3 2) (2 1 3) 2)" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) 6)" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) 9)" "((3 2 1) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (1 2 3) 12)" "((3 2 1) (2 1 3) 2)" "((3 2 1) (2 1 3) (2 3 1) 6)" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) 7)" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) 8)" "((3 2 1) (2 1 3) (2 3 1) (3 1 2) (1 2 3) (1 3 2) 12)" "((3 2 1) (2 3 1) 2)" "((3 2 1) (2 3 1) (3 1 2) 4)" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) 5)" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) 9)" "((3 2 1) (2 3 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) 12)" "((3 2 1) (3 1 2) 2)" "((3 2 1) (3 1 2) (1 2 3) 3)" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) 7)" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) 8)" "((3 2 1) (3 1 2) (1 2 3) (1 3 2) (2 1 3) (2 3 1) 12)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1665 190) (om-make-point 153 107) (load-buffer-textfile (quote ("(1 2 3)" "(1 3 2)" "(2 1 3)" "(2 3 1)" "(3 1 2)" "(3 2 1)" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 436 135) (quote "Provided with a group of lists, iteratively builds output lists returning lists built up by element for each rotation.$$All lists are return.  The last element in the list indicates the number of points of onsets overlap in the list, not counting the initial attacks.$$Do this process on each rotation of the original lists provided.$$") "" (om-make-point 1590 46) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 310 29) (quote "Permutations+Canon-Growth-Return-All") "" (om-make-point 1591 18) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 144 27) (quote "<--function output") "" (om-make-point 1437 654) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 268 83) (quote "Another example of default mode using randomly generated lists 5 elements, each element between 0-20.") "" (om-make-point 1245 172) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "make 5x5 digit list" (om-load-patch-abs1 "make 5x5 digit list" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 7 449) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 276 303) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 244 333) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 124 133) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "RANDOM" (quote random) (quote ((om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 103 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 180 195) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 148 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (6 0 2 0 nil 0) (1 0 2 1 nil 0) (3 0 4 0 nil 0) (4 0 6 0 nil 0) (5 0 6 1 nil 0))) 6.1001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 1254 245) nil (list (list (list 11 0 6 11 6) (list 3 18 11 15 11) (list 6 7 13 13 8) (list 8 9 15 17 11) (list 15 17 18 17 14))) nil "make 5x5 digit list"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1218 642) (om-make-point 214 161) (load-buffer-textfile (quote ("((3 18 11 15 11) (6 7 13 13 8))" "((3 18 11 15 11) (6 7 13 13 8))" "((6 7 13 13 8) (8 9 15 17 11))" "((8 9 15 17 11) (6 7 13 13 8))" "((15 17 18 17 14) (6 7 13 13 8))" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1230 344) (om-make-point 194 158) (load-buffer-textfile (quote ("(11 0 6 11 6)" "(3 18 11 15 11)" "(6 7 13 13 8)" "(8 9 15 17 11)" "(15 17 18 17 14)" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 241 49) (quote "(lists of lists from the original input$that do not have onset overlaps)") "" (om-make-point 675 475) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 440 167) (quote "Provided with a group of lists, iteratively builds output lists with no rhythmic overlaps, except for the onset.$$Builds according to this process: take the first list and check it against the second list.  If there are no attack overlaps add both lists to the output list.  Then check the third list agains this output list. If there are no outputs, combine the third list to the output list and continue. Etc...$$Does this process on each rotation of the original lists provided.$$") "" (om-make-point 510 49) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 179 29) (quote "<--list to check") "" (om-make-point 585 576) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 59) (quote "<--checking elements for onset overlaps in a given list") "" (om-make-point 721 681) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 519 672) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 4 3 5 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 4 1 3 5) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 539 580) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 553 620) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 179 29) (quote "<--function output") "" (om-make-point 673 450) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 159 28) (quote "starting lists") "" (om-make-point 512 225) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 517 461) (om-make-point 139 106) (load-buffer-textfile (quote ("((2 3 1 4 5) (3 4 2 5 1))" "((3 2 4 5 1) (2 4 1 3 5))" "((1 4 5 3 2) (3 4 2 5 1))" "((1 4 3 5 2) (2 4 1 3 5))" "((2 4 1 3 5) (3 2 4 5 1))" "((5 2 3 4 1))" "((3 4 2 5 1) (2 3 1 4 5))" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 515 256) (om-make-point 153 107) (load-buffer-textfile (quote ("(2 3 1 4 5)" "(3 2 4 5 1)" "(1 4 5 3 2)" "(1 4 3 5 2)" "(2 4 1 3 5)" "(5 2 3 4 1)" "(3 4 2 5 1)" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 310 29) (quote "Permutations+Canon-Growth") "" (om-make-point 512 18) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 256 89) (quote "N.B. if the no. of results desired is > the no. of possible results the computer then the computer will keep searching for results and return none.") "" (om-make-point 79 498) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 90 328) (om-make-point 194 158) (load-buffer-textfile (quote ("(2 3 1 4 5)" "(3 2 4 5 1)" "(1 4 5 3 2)" "(1 4 3 5 2)" "(2 4 1 3 5)" "(5 2 3 4 1)" "(3 4 2 5 1)" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 97 159) (om-make-point 80 30) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 255 156) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 150 29) (quote "no. of results desired") "" (om-make-point 251 124) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 126 27) (quote "original list") "" (om-make-point 94 125) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 302 69) (quote "Returns a unique ordering of a specified number of permutations from a given list such that none of the returned lists are rotations of one another.") "" (om-make-point 79 50) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 232 31) (quote "Q-N-Permutations-No-Rotations") "" (om-make-point 78 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 1 1 0 nil 0) (1 0 2 1 nil 0) (21 1 3 0 nil 0) (22 1 4 0 nil 0) (4 0 6 0 nil 0) (5 0 6 1 nil 0) (21 1 8 0 nil 0) (7 0 8 1 nil 0) (29 1 9 0 nil 0) (39 1 11 0 ((om-make-point 571 565) (om-make-point 936 562) (om-make-point 933 385) (om-make-point 1030 385) (om-make-point 1030 390)) 0) (10 0 11 1 nil 0) (40 1 12 0 nil 0) (44 0 13 0 nil 0) (45 0 13 1 nil 0) (11 0 15 1 nil 0) (6 0 17 1 nil 0) (8 0 20 1 nil 0) (4 0 21 1 nil 0) (9 0 28 1 nil 0) (27 0 29 1 nil 0) (36 0 34 1 nil 0) (35 0 36 0 nil 0) (39 1 36 1 nil 0) (12 0 39 1 nil 0) (13 0 43 1 nil 0))) nil 6.1001))
