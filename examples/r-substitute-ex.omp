; OM File Header - Saved 2016/11/14 20:01:30
; (6.1001 :patc (om-make-point 604 60) (om-make-point 210 23) (om-make-point 1081 645) "" 183 0 nil "2016/11/14 20:01:30")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "r-substitute-ex" (quote ((let ((box (om-load-boxcomment "comment 8" (om-make-point 151 26) (quote "R-Substitute") "" (om-make-point 292 30) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 740 181) (quote "R-substitute object replaces a rhythmic value with subset values (substitutions) that sum to the original value.$$In its default state (example 1 below) all values of the original rhythmic list music be given a substitution in the order listed. For example: value ( 3 4 5) with substitutions ((1 2) (1 3) (2 3)) will create diminutions in all voices of (3 4 5).$$Alternately, provide voice numbers for ALL voices and diminutions as needed for each voice in order to specify certain diminutions for particular voices (example 2 below).") "" (om-make-point 291 65) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-SUBSTITUTE" (quote cnmat::r-substitute) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "VAL" "VAL" nil) (om-load-inputfun (quote input-funbox) "SUBS" "SUBS" (list 4 2)))) (om-make-point 666 388) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF 2" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 637 446) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 1 2 1 3 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 5 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 1 3 2 2 1 1 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 2 2 2 1 3 1) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 628 314) (om-make-point 59 30) (list 3 4 6) "(3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 82 27) (quote "EXAMPLE 2") "" (om-make-point 625 261) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 45 28) (quote "value") "" (om-make-point 626 285) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 118 24) (quote "substitutions") "" (om-make-point 744 283) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 748 308) (om-make-point 130 80) (load-buffer-textfile (quote ("(0 (1 2) (1 3) (2 3))" "(1 (3) (4) (5))" "(2 (1 1 1) (3 1) (3 2))" "(3 (2 1) (3 1) (3 2))" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 45 28) (quote "value") "" (om-make-point 293 291) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 118 24) (quote "substitutions") "" (om-make-point 394 291) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 82 27) (quote "EXAMPLE 1") "" (om-make-point 293 264) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-ROTATIONS" (quote cnmat:q-rotations) (quote ((om-load-inputfun (quote input-funbox) "a list of values" "DURATIONS" (list 1 2 3)))) (om-make-point 62 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 263 447) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 1 2 2 2 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 2 2 2 3 3 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 2 3 3 2 1 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 2 1 2 2 2) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 398 322) (om-make-point 121 30) (list (list 1 2) (list 2 2) (list 3 3)) "((1 2) (2 2) (3 3))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 297 323) (om-make-point 59 30) (list 3 4 6) "(3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R-SUBSTITUTE" (quote cnmat::r-substitute) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "VAL" "VAL" nil) (om-load-inputfun (quote input-funbox) "SUBS" "SUBS" (list 4 2)))) (om-make-point 292 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 88 204) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 63 68) (om-make-point 70 30) (list 2 3 4 6) "(2 3 4 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 2 0 nil 0) (4 0 2 1 nil 0) (8 1 2 2 nil 0) (2 0 3 0 nil 0) (18 0 12 0 nil 0) (16 0 13 0 nil 0) (17 0 16 0 nil 0) (15 0 16 1 nil 0) (14 0 16 2 nil 0) (12 0 17 1 nil 0))) nil 6.1001))
